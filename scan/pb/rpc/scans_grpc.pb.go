// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: scan/pb/rpc/scans.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Scans_Create_FullMethodName = "/scans.Scans/Create"
	Scans_Read_FullMethodName   = "/scans.Scans/Read"
	Scans_List_FullMethodName   = "/scans.Scans/List"
	Scans_Upsert_FullMethodName = "/scans.Scans/Upsert"
	Scans_Delete_FullMethodName = "/scans.Scans/Delete"
)

// ScansClient is the client API for Scans service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScansClient interface {
	Create(ctx context.Context, in *CreateScanRequest, opts ...grpc.CallOption) (*CreateScanResponse, error)
	Read(ctx context.Context, in *ReadScanRequest, opts ...grpc.CallOption) (*ReadScanResponse, error)
	List(ctx context.Context, in *ReadScanRequest, opts ...grpc.CallOption) (*ReadScanResponse, error)
	Upsert(ctx context.Context, in *UpsertScanRequest, opts ...grpc.CallOption) (*UpsertScanResponse, error)
	Delete(ctx context.Context, in *DeleteScanRequest, opts ...grpc.CallOption) (*DeleteScanResponse, error)
}

type scansClient struct {
	cc grpc.ClientConnInterface
}

func NewScansClient(cc grpc.ClientConnInterface) ScansClient {
	return &scansClient{cc}
}

func (c *scansClient) Create(ctx context.Context, in *CreateScanRequest, opts ...grpc.CallOption) (*CreateScanResponse, error) {
	out := new(CreateScanResponse)
	err := c.cc.Invoke(ctx, Scans_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scansClient) Read(ctx context.Context, in *ReadScanRequest, opts ...grpc.CallOption) (*ReadScanResponse, error) {
	out := new(ReadScanResponse)
	err := c.cc.Invoke(ctx, Scans_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scansClient) List(ctx context.Context, in *ReadScanRequest, opts ...grpc.CallOption) (*ReadScanResponse, error) {
	out := new(ReadScanResponse)
	err := c.cc.Invoke(ctx, Scans_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scansClient) Upsert(ctx context.Context, in *UpsertScanRequest, opts ...grpc.CallOption) (*UpsertScanResponse, error) {
	out := new(UpsertScanResponse)
	err := c.cc.Invoke(ctx, Scans_Upsert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scansClient) Delete(ctx context.Context, in *DeleteScanRequest, opts ...grpc.CallOption) (*DeleteScanResponse, error) {
	out := new(DeleteScanResponse)
	err := c.cc.Invoke(ctx, Scans_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScansServer is the server API for Scans service.
// All implementations must embed UnimplementedScansServer
// for forward compatibility
type ScansServer interface {
	Create(context.Context, *CreateScanRequest) (*CreateScanResponse, error)
	Read(context.Context, *ReadScanRequest) (*ReadScanResponse, error)
	List(context.Context, *ReadScanRequest) (*ReadScanResponse, error)
	Upsert(context.Context, *UpsertScanRequest) (*UpsertScanResponse, error)
	Delete(context.Context, *DeleteScanRequest) (*DeleteScanResponse, error)
	mustEmbedUnimplementedScansServer()
}

// UnimplementedScansServer must be embedded to have forward compatible implementations.
type UnimplementedScansServer struct {
}

func (UnimplementedScansServer) Create(context.Context, *CreateScanRequest) (*CreateScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedScansServer) Read(context.Context, *ReadScanRequest) (*ReadScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedScansServer) List(context.Context, *ReadScanRequest) (*ReadScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedScansServer) Upsert(context.Context, *UpsertScanRequest) (*UpsertScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedScansServer) Delete(context.Context, *DeleteScanRequest) (*DeleteScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedScansServer) mustEmbedUnimplementedScansServer() {}

// UnsafeScansServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScansServer will
// result in compilation errors.
type UnsafeScansServer interface {
	mustEmbedUnimplementedScansServer()
}

func RegisterScansServer(s grpc.ServiceRegistrar, srv ScansServer) {
	s.RegisterService(&Scans_ServiceDesc, srv)
}

func _Scans_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScansServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scans_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScansServer).Create(ctx, req.(*CreateScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scans_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScansServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scans_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScansServer).Read(ctx, req.(*ReadScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scans_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScansServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scans_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScansServer).List(ctx, req.(*ReadScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scans_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScansServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scans_Upsert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScansServer).Upsert(ctx, req.(*UpsertScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scans_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScansServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scans_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScansServer).Delete(ctx, req.(*DeleteScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Scans_ServiceDesc is the grpc.ServiceDesc for Scans service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scans_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scans.Scans",
	HandlerType: (*ScansServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Scans_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Scans_Read_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Scans_List_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _Scans_Upsert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Scans_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scan/pb/rpc/scans.proto",
}
