package c2

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/v2/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	gorm "gorm.io/gorm"
	strings "strings"
	time "time"
)

type ChannelORM struct {
	AgentId           *string
	Attempts          int32
	CreatedAt         *time.Time
	Direction         string
	Failures          int32
	Id                string `gorm:"type:uuid;primaryKey"`
	Interval          int64
	Jitter            int64
	LastCheckin       int64
	LocalAddress      string
	NextCheckin       int64
	Order             int32
	PeerID            string
	Protocol          string
	ProxyURL          string
	RawData           string
	ReconnectInterval int64
	RemoteAddress     string
	Running           bool
	Type              string
	UpdatedAt         *time.Time
}

// TableName overrides the default tablename generated by GORM
func (ChannelORM) TableName() string {
	return "channels"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Channel) ToORM(ctx context.Context) (ChannelORM, error) {
	to := ChannelORM{}
	var err error
	if prehook, ok := interface{}(m).(ChannelWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	to.Type = m.Type
	to.Direction = m.Direction
	to.PeerID = m.PeerID
	to.Order = m.Order
	to.Running = m.Running
	to.Protocol = m.Protocol
	to.RemoteAddress = m.RemoteAddress
	to.LocalAddress = m.LocalAddress
	to.ProxyURL = m.ProxyURL
	to.RawData = m.RawData
	to.ReconnectInterval = m.ReconnectInterval
	to.Interval = m.Interval
	to.Jitter = m.Jitter
	to.Attempts = m.Attempts
	to.Failures = m.Failures
	to.LastCheckin = m.LastCheckin
	to.NextCheckin = m.NextCheckin
	if posthook, ok := interface{}(m).(ChannelWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ChannelORM) ToPB(ctx context.Context) (Channel, error) {
	to := Channel{}
	var err error
	if prehook, ok := interface{}(m).(ChannelWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	to.Type = m.Type
	to.Direction = m.Direction
	to.PeerID = m.PeerID
	to.Order = m.Order
	to.Running = m.Running
	to.Protocol = m.Protocol
	to.RemoteAddress = m.RemoteAddress
	to.LocalAddress = m.LocalAddress
	to.ProxyURL = m.ProxyURL
	to.RawData = m.RawData
	to.ReconnectInterval = m.ReconnectInterval
	to.Interval = m.Interval
	to.Jitter = m.Jitter
	to.Attempts = m.Attempts
	to.Failures = m.Failures
	to.LastCheckin = m.LastCheckin
	to.NextCheckin = m.NextCheckin
	if posthook, ok := interface{}(m).(ChannelWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Channel the arg will be the target, the caller the one being converted from

// ChannelBeforeToORM called before default ToORM code
type ChannelWithBeforeToORM interface {
	BeforeToORM(context.Context, *ChannelORM) error
}

// ChannelAfterToORM called after default ToORM code
type ChannelWithAfterToORM interface {
	AfterToORM(context.Context, *ChannelORM) error
}

// ChannelBeforeToPB called before default ToPB code
type ChannelWithBeforeToPB interface {
	BeforeToPB(context.Context, *Channel) error
}

// ChannelAfterToPB called after default ToPB code
type ChannelWithAfterToPB interface {
	AfterToPB(context.Context, *Channel) error
}

// DefaultCreateChannel executes a basic gorm create call
func DefaultCreateChannel(ctx context.Context, in *Channel, db *gorm.DB) (*Channel, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ChannelORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ChannelORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ChannelORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ChannelORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadChannel(ctx context.Context, in *Channel, db *gorm.DB) (*Channel, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ChannelORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ChannelORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ChannelORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ChannelORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ChannelORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ChannelORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ChannelORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteChannel(ctx context.Context, in *Channel, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ChannelORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ChannelORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ChannelORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ChannelORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ChannelORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteChannelSet(ctx context.Context, in []*Channel, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ChannelORM{})).(ChannelORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ChannelORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ChannelORM{})).(ChannelORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ChannelORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Channel, *gorm.DB) (*gorm.DB, error)
}
type ChannelORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Channel, *gorm.DB) error
}

// DefaultStrictUpdateChannel clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateChannel(ctx context.Context, in *Channel, db *gorm.DB) (*Channel, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateChannel")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ChannelORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ChannelORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ChannelORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ChannelORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ChannelORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ChannelORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ChannelORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchChannel executes a basic gorm update call with patch behavior
func DefaultPatchChannel(ctx context.Context, in *Channel, updateMask *field_mask.FieldMask, db *gorm.DB) (*Channel, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Channel
	var err error
	if hook, ok := interface{}(&pbObj).(ChannelWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadChannel(ctx, &Channel{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ChannelWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskChannel(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ChannelWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateChannel(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ChannelWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ChannelWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Channel, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ChannelWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Channel, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ChannelWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Channel, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ChannelWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Channel, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetChannel executes a bulk gorm update call with patch behavior
func DefaultPatchSetChannel(ctx context.Context, objects []*Channel, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Channel, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Channel, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchChannel(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskChannel patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskChannel(ctx context.Context, patchee *Channel, patcher *Channel, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Channel, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"Type" {
			patchee.Type = patcher.Type
			continue
		}
		if f == prefix+"Direction" {
			patchee.Direction = patcher.Direction
			continue
		}
		if f == prefix+"PeerID" {
			patchee.PeerID = patcher.PeerID
			continue
		}
		if f == prefix+"Order" {
			patchee.Order = patcher.Order
			continue
		}
		if f == prefix+"Running" {
			patchee.Running = patcher.Running
			continue
		}
		if f == prefix+"Protocol" {
			patchee.Protocol = patcher.Protocol
			continue
		}
		if f == prefix+"RemoteAddress" {
			patchee.RemoteAddress = patcher.RemoteAddress
			continue
		}
		if f == prefix+"LocalAddress" {
			patchee.LocalAddress = patcher.LocalAddress
			continue
		}
		if f == prefix+"ProxyURL" {
			patchee.ProxyURL = patcher.ProxyURL
			continue
		}
		if f == prefix+"RawData" {
			patchee.RawData = patcher.RawData
			continue
		}
		if f == prefix+"ReconnectInterval" {
			patchee.ReconnectInterval = patcher.ReconnectInterval
			continue
		}
		if f == prefix+"Interval" {
			patchee.Interval = patcher.Interval
			continue
		}
		if f == prefix+"Jitter" {
			patchee.Jitter = patcher.Jitter
			continue
		}
		if f == prefix+"Attempts" {
			patchee.Attempts = patcher.Attempts
			continue
		}
		if f == prefix+"Failures" {
			patchee.Failures = patcher.Failures
			continue
		}
		if f == prefix+"LastCheckin" {
			patchee.LastCheckin = patcher.LastCheckin
			continue
		}
		if f == prefix+"NextCheckin" {
			patchee.NextCheckin = patcher.NextCheckin
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListChannel executes a gorm list call
func DefaultListChannel(ctx context.Context, db *gorm.DB) ([]*Channel, error) {
	in := Channel{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ChannelORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ChannelORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ChannelORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ChannelORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Channel{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ChannelORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ChannelORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ChannelORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]ChannelORM) error
}
