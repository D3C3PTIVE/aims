package c2

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/v2/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	host "github.com/d3c3ptive/aims/proto/host"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	gorm "gorm.io/gorm"
	strings "strings"
	time "time"
)

type AgentORM struct {
	Arch                string
	Burned              bool
	Channels            []*ChannelORM `gorm:"foreignKey:AgentId;references:Id"`
	CreatedAt           *time.Time
	Filename            string
	FirstContact        int64
	Host                *host.HostORM `gorm:"foreignKey:HostId;references:Id"`
	HostId              *string
	Id                  string `gorm:"type:uuid;primaryKey"`
	IsDead              bool
	LastCheckin         int64
	Locale              string
	Name                string
	Process             *host.ProcessORM `gorm:"foreignKey:ProcessId;references:Id"`
	ProcessId           *string
	Runtime             string
	Tasks               []*TaskORM `gorm:"foreignKey:AgentId;references:Id"`
	TasksCount          int64
	TasksCountCompleted int64
	Tool                string
	UpdatedAt           *time.Time
	User                *host.UserORM `gorm:"foreignKey:UserId;references:Id"`
	UserId              *string
	WorkingDirectory    string
}

// TableName overrides the default tablename generated by GORM
func (AgentORM) TableName() string {
	return "agents"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Agent) ToORM(ctx context.Context) (AgentORM, error) {
	to := AgentORM{}
	var err error
	if prehook, ok := interface{}(m).(AgentWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if m.Host != nil {
		tempHost, err := m.Host.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Host = &tempHost
	}
	to.Name = m.Name
	to.Runtime = m.Runtime
	to.Tool = m.Tool
	to.Burned = m.Burned
	to.IsDead = m.IsDead
	to.Arch = m.Arch
	to.Locale = m.Locale
	to.Filename = m.Filename
	if m.User != nil {
		tempUser, err := m.User.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.User = &tempUser
	}
	if m.Process != nil {
		tempProcess, err := m.Process.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Process = &tempProcess
	}
	to.FirstContact = m.FirstContact
	to.LastCheckin = m.LastCheckin
	for _, v := range m.Channels {
		if v != nil {
			if tempChannels, cErr := v.ToORM(ctx); cErr == nil {
				to.Channels = append(to.Channels, &tempChannels)
			} else {
				return to, cErr
			}
		} else {
			to.Channels = append(to.Channels, nil)
		}
	}
	for _, v := range m.Tasks {
		if v != nil {
			if tempTasks, cErr := v.ToORM(ctx); cErr == nil {
				to.Tasks = append(to.Tasks, &tempTasks)
			} else {
				return to, cErr
			}
		} else {
			to.Tasks = append(to.Tasks, nil)
		}
	}
	to.TasksCount = m.TasksCount
	to.TasksCountCompleted = m.TasksCountCompleted
	to.WorkingDirectory = m.WorkingDirectory
	if posthook, ok := interface{}(m).(AgentWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *AgentORM) ToPB(ctx context.Context) (Agent, error) {
	to := Agent{}
	var err error
	if prehook, ok := interface{}(m).(AgentWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if m.Host != nil {
		tempHost, err := m.Host.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Host = &tempHost
	}
	to.Name = m.Name
	to.Runtime = m.Runtime
	to.Tool = m.Tool
	to.Burned = m.Burned
	to.IsDead = m.IsDead
	to.Arch = m.Arch
	to.Locale = m.Locale
	to.Filename = m.Filename
	if m.User != nil {
		tempUser, err := m.User.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.User = &tempUser
	}
	if m.Process != nil {
		tempProcess, err := m.Process.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Process = &tempProcess
	}
	to.FirstContact = m.FirstContact
	to.LastCheckin = m.LastCheckin
	for _, v := range m.Channels {
		if v != nil {
			if tempChannels, cErr := v.ToPB(ctx); cErr == nil {
				to.Channels = append(to.Channels, &tempChannels)
			} else {
				return to, cErr
			}
		} else {
			to.Channels = append(to.Channels, nil)
		}
	}
	for _, v := range m.Tasks {
		if v != nil {
			if tempTasks, cErr := v.ToPB(ctx); cErr == nil {
				to.Tasks = append(to.Tasks, &tempTasks)
			} else {
				return to, cErr
			}
		} else {
			to.Tasks = append(to.Tasks, nil)
		}
	}
	to.TasksCount = m.TasksCount
	to.TasksCountCompleted = m.TasksCountCompleted
	to.WorkingDirectory = m.WorkingDirectory
	if posthook, ok := interface{}(m).(AgentWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Agent the arg will be the target, the caller the one being converted from

// AgentBeforeToORM called before default ToORM code
type AgentWithBeforeToORM interface {
	BeforeToORM(context.Context, *AgentORM) error
}

// AgentAfterToORM called after default ToORM code
type AgentWithAfterToORM interface {
	AfterToORM(context.Context, *AgentORM) error
}

// AgentBeforeToPB called before default ToPB code
type AgentWithBeforeToPB interface {
	BeforeToPB(context.Context, *Agent) error
}

// AgentAfterToPB called after default ToPB code
type AgentWithAfterToPB interface {
	AfterToPB(context.Context, *Agent) error
}

type TaskORM struct {
	AgentId     *string
	CompletedAt *time.Time
	CreatedAt   *time.Time
	Description string
	Id          string `gorm:"type:uuid;primaryKey"`
	Request     string
	Response    string
	SentAt      *time.Time
	State       string
	UpdatedAt   *time.Time
}

// TableName overrides the default tablename generated by GORM
func (TaskORM) TableName() string {
	return "tasks"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Task) ToORM(ctx context.Context) (TaskORM, error) {
	to := TaskORM{}
	var err error
	if prehook, ok := interface{}(m).(TaskWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if m.SentAt != nil {
		t := m.SentAt.AsTime()
		to.SentAt = &t
	}
	if m.CompletedAt != nil {
		t := m.CompletedAt.AsTime()
		to.CompletedAt = &t
	}
	to.State = m.State
	to.Request = m.Request
	to.Response = m.Response
	to.Description = m.Description
	if posthook, ok := interface{}(m).(TaskWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TaskORM) ToPB(ctx context.Context) (Task, error) {
	to := Task{}
	var err error
	if prehook, ok := interface{}(m).(TaskWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if m.SentAt != nil {
		to.SentAt = timestamppb.New(*m.SentAt)
	}
	if m.CompletedAt != nil {
		to.CompletedAt = timestamppb.New(*m.CompletedAt)
	}
	to.State = m.State
	to.Request = m.Request
	to.Response = m.Response
	to.Description = m.Description
	if posthook, ok := interface{}(m).(TaskWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Task the arg will be the target, the caller the one being converted from

// TaskBeforeToORM called before default ToORM code
type TaskWithBeforeToORM interface {
	BeforeToORM(context.Context, *TaskORM) error
}

// TaskAfterToORM called after default ToORM code
type TaskWithAfterToORM interface {
	AfterToORM(context.Context, *TaskORM) error
}

// TaskBeforeToPB called before default ToPB code
type TaskWithBeforeToPB interface {
	BeforeToPB(context.Context, *Task) error
}

// TaskAfterToPB called after default ToPB code
type TaskWithAfterToPB interface {
	AfterToPB(context.Context, *Task) error
}

// DefaultCreateAgent executes a basic gorm create call
func DefaultCreateAgent(ctx context.Context, in *Agent, db *gorm.DB) (*Agent, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AgentORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AgentORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type AgentORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AgentORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadAgent(ctx context.Context, in *Agent, db *gorm.DB) (*Agent, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(AgentORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(AgentORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := AgentORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(AgentORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type AgentORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AgentORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AgentORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteAgent(ctx context.Context, in *Agent, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(AgentORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&AgentORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(AgentORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type AgentORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AgentORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteAgentSet(ctx context.Context, in []*Agent, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&AgentORM{})).(AgentORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&AgentORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&AgentORM{})).(AgentORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type AgentORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Agent, *gorm.DB) (*gorm.DB, error)
}
type AgentORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Agent, *gorm.DB) error
}

// DefaultStrictUpdateAgent clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateAgent(ctx context.Context, in *Agent, db *gorm.DB) (*Agent, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateAgent")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &AgentORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(AgentORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterChannels := ChannelORM{}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	filterChannels.AgentId = new(string)
	*filterChannels.AgentId = ormObj.Id
	if err = db.Where(filterChannels).Delete(ChannelORM{}).Error; err != nil {
		return nil, err
	}
	filterTasks := TaskORM{}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	filterTasks.AgentId = new(string)
	*filterTasks.AgentId = ormObj.Id
	if err = db.Where(filterTasks).Delete(TaskORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AgentORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AgentORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type AgentORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AgentORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AgentORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchAgent executes a basic gorm update call with patch behavior
func DefaultPatchAgent(ctx context.Context, in *Agent, updateMask *field_mask.FieldMask, db *gorm.DB) (*Agent, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Agent
	var err error
	if hook, ok := interface{}(&pbObj).(AgentWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadAgent(ctx, &Agent{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(AgentWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskAgent(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(AgentWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateAgent(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(AgentWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type AgentWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Agent, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type AgentWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Agent, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type AgentWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Agent, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type AgentWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Agent, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetAgent executes a bulk gorm update call with patch behavior
func DefaultPatchSetAgent(ctx context.Context, objects []*Agent, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Agent, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Agent, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchAgent(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskAgent patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskAgent(ctx context.Context, patchee *Agent, patcher *Agent, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Agent, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	var updatedHost bool
	var updatedUser bool
	var updatedProcess bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if !updatedHost && strings.HasPrefix(f, prefix+"Host.") {
			updatedHost = true
			if patcher.Host == nil {
				patchee.Host = nil
				continue
			}
			if patchee.Host == nil {
				patchee.Host = &host.Host{}
			}
			if o, err := host.DefaultApplyFieldMaskHost(ctx, patchee.Host, patcher.Host, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Host.", db); err != nil {
				return nil, err
			} else {
				patchee.Host = o
			}
			continue
		}
		if f == prefix+"Host" {
			updatedHost = true
			patchee.Host = patcher.Host
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Runtime" {
			patchee.Runtime = patcher.Runtime
			continue
		}
		if f == prefix+"Tool" {
			patchee.Tool = patcher.Tool
			continue
		}
		if f == prefix+"Burned" {
			patchee.Burned = patcher.Burned
			continue
		}
		if f == prefix+"IsDead" {
			patchee.IsDead = patcher.IsDead
			continue
		}
		if f == prefix+"Arch" {
			patchee.Arch = patcher.Arch
			continue
		}
		if f == prefix+"Locale" {
			patchee.Locale = patcher.Locale
			continue
		}
		if f == prefix+"Filename" {
			patchee.Filename = patcher.Filename
			continue
		}
		if !updatedUser && strings.HasPrefix(f, prefix+"User.") {
			updatedUser = true
			if patcher.User == nil {
				patchee.User = nil
				continue
			}
			if patchee.User == nil {
				patchee.User = &host.User{}
			}
			if o, err := host.DefaultApplyFieldMaskUser(ctx, patchee.User, patcher.User, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"User.", db); err != nil {
				return nil, err
			} else {
				patchee.User = o
			}
			continue
		}
		if f == prefix+"User" {
			updatedUser = true
			patchee.User = patcher.User
			continue
		}
		if !updatedProcess && strings.HasPrefix(f, prefix+"Process.") {
			updatedProcess = true
			if patcher.Process == nil {
				patchee.Process = nil
				continue
			}
			if patchee.Process == nil {
				patchee.Process = &host.Process{}
			}
			if o, err := host.DefaultApplyFieldMaskProcess(ctx, patchee.Process, patcher.Process, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Process.", db); err != nil {
				return nil, err
			} else {
				patchee.Process = o
			}
			continue
		}
		if f == prefix+"Process" {
			updatedProcess = true
			patchee.Process = patcher.Process
			continue
		}
		if f == prefix+"FirstContact" {
			patchee.FirstContact = patcher.FirstContact
			continue
		}
		if f == prefix+"LastCheckin" {
			patchee.LastCheckin = patcher.LastCheckin
			continue
		}
		if f == prefix+"Channels" {
			patchee.Channels = patcher.Channels
			continue
		}
		if f == prefix+"Tasks" {
			patchee.Tasks = patcher.Tasks
			continue
		}
		if f == prefix+"TasksCount" {
			patchee.TasksCount = patcher.TasksCount
			continue
		}
		if f == prefix+"TasksCountCompleted" {
			patchee.TasksCountCompleted = patcher.TasksCountCompleted
			continue
		}
		if f == prefix+"WorkingDirectory" {
			patchee.WorkingDirectory = patcher.WorkingDirectory
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListAgent executes a gorm list call
func DefaultListAgent(ctx context.Context, db *gorm.DB) ([]*Agent, error) {
	in := Agent{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AgentORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(AgentORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []AgentORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AgentORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Agent{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type AgentORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AgentORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AgentORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]AgentORM) error
}

// DefaultCreateTask executes a basic gorm create call
func DefaultCreateTask(ctx context.Context, in *Task, db *gorm.DB) (*Task, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TaskORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadTask(ctx context.Context, in *Task, db *gorm.DB) (*Task, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := TaskORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(TaskORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type TaskORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteTask(ctx context.Context, in *Task, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&TaskORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type TaskORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteTaskSet(ctx context.Context, in []*Task, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&TaskORM{})).(TaskORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&TaskORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&TaskORM{})).(TaskORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type TaskORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Task, *gorm.DB) (*gorm.DB, error)
}
type TaskORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Task, *gorm.DB) error
}

// DefaultStrictUpdateTask clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTask(ctx context.Context, in *Task, db *gorm.DB) (*Task, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateTask")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &TaskORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(TaskORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type TaskORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchTask executes a basic gorm update call with patch behavior
func DefaultPatchTask(ctx context.Context, in *Task, updateMask *field_mask.FieldMask, db *gorm.DB) (*Task, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Task
	var err error
	if hook, ok := interface{}(&pbObj).(TaskWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadTask(ctx, &Task{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(TaskWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskTask(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(TaskWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateTask(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(TaskWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type TaskWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Task, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TaskWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Task, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TaskWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Task, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TaskWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Task, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetTask executes a bulk gorm update call with patch behavior
func DefaultPatchSetTask(ctx context.Context, objects []*Task, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Task, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Task, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchTask(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskTask patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTask(ctx context.Context, patchee *Task, patcher *Task, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Task, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	var updatedSentAt bool
	var updatedCompletedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if !updatedSentAt && strings.HasPrefix(f, prefix+"SentAt.") {
			if patcher.SentAt == nil {
				patchee.SentAt = nil
				continue
			}
			if patchee.SentAt == nil {
				patchee.SentAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"SentAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.SentAt, patchee.SentAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"SentAt" {
			updatedSentAt = true
			patchee.SentAt = patcher.SentAt
			continue
		}
		if !updatedCompletedAt && strings.HasPrefix(f, prefix+"CompletedAt.") {
			if patcher.CompletedAt == nil {
				patchee.CompletedAt = nil
				continue
			}
			if patchee.CompletedAt == nil {
				patchee.CompletedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CompletedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CompletedAt, patchee.CompletedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CompletedAt" {
			updatedCompletedAt = true
			patchee.CompletedAt = patcher.CompletedAt
			continue
		}
		if f == prefix+"State" {
			patchee.State = patcher.State
			continue
		}
		if f == prefix+"Request" {
			patchee.Request = patcher.Request
			continue
		}
		if f == prefix+"Response" {
			patchee.Response = patcher.Response
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTask executes a gorm list call
func DefaultListTask(ctx context.Context, db *gorm.DB) ([]*Task, error) {
	in := Task{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []TaskORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Task{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TaskORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]TaskORM) error
}
