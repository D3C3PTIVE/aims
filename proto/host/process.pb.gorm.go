package host

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/v2/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	gorm "gorm.io/gorm"
	strings "strings"
	time "time"
)

type ProcessORM struct {
	Architecture string
	CreatedAt    *time.Time
	Executable   string
	HostId       *string
	Id           string   `gorm:"type:uuid;primaryKey"`
	Owner        *UserORM `gorm:"foreignKey:ProcessId;references:Id"`
	Pid          int32
	Ppid         int32
	UpdatedAt    *time.Time
}

// TableName overrides the default tablename generated by GORM
func (ProcessORM) TableName() string {
	return "processes"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Process) ToORM(ctx context.Context) (ProcessORM, error) {
	to := ProcessORM{}
	var err error
	if prehook, ok := interface{}(m).(ProcessWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	to.Pid = m.Pid
	to.Ppid = m.Ppid
	to.Executable = m.Executable
	if m.Owner != nil {
		tempOwner, err := m.Owner.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Owner = &tempOwner
	}
	to.Architecture = m.Architecture
	// Repeated type string is not an ORMable message type
	if posthook, ok := interface{}(m).(ProcessWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ProcessORM) ToPB(ctx context.Context) (Process, error) {
	to := Process{}
	var err error
	if prehook, ok := interface{}(m).(ProcessWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	to.Pid = m.Pid
	to.Ppid = m.Ppid
	to.Executable = m.Executable
	if m.Owner != nil {
		tempOwner, err := m.Owner.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Owner = &tempOwner
	}
	to.Architecture = m.Architecture
	// Repeated type string is not an ORMable message type
	if posthook, ok := interface{}(m).(ProcessWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Process the arg will be the target, the caller the one being converted from

// ProcessBeforeToORM called before default ToORM code
type ProcessWithBeforeToORM interface {
	BeforeToORM(context.Context, *ProcessORM) error
}

// ProcessAfterToORM called after default ToORM code
type ProcessWithAfterToORM interface {
	AfterToORM(context.Context, *ProcessORM) error
}

// ProcessBeforeToPB called before default ToPB code
type ProcessWithBeforeToPB interface {
	BeforeToPB(context.Context, *Process) error
}

// ProcessAfterToPB called after default ToPB code
type ProcessWithAfterToPB interface {
	AfterToPB(context.Context, *Process) error
}

// DefaultCreateProcess executes a basic gorm create call
func DefaultCreateProcess(ctx context.Context, in *Process, db *gorm.DB) (*Process, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProcessORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProcessORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ProcessORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProcessORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadProcess(ctx context.Context, in *Process, db *gorm.DB) (*Process, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ProcessORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ProcessORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ProcessORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ProcessORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ProcessORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProcessORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProcessORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteProcess(ctx context.Context, in *Process, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ProcessORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ProcessORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ProcessORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ProcessORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProcessORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteProcessSet(ctx context.Context, in []*Process, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ProcessORM{})).(ProcessORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ProcessORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ProcessORM{})).(ProcessORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ProcessORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Process, *gorm.DB) (*gorm.DB, error)
}
type ProcessORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Process, *gorm.DB) error
}

// DefaultStrictUpdateProcess clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateProcess(ctx context.Context, in *Process, db *gorm.DB) (*Process, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateProcess")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ProcessORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ProcessORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterOwner := UserORM{}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	filterOwner.ProcessId = new(string)
	*filterOwner.ProcessId = ormObj.Id
	if err = db.Where(filterOwner).Delete(UserORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProcessORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProcessORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ProcessORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProcessORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProcessORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchProcess executes a basic gorm update call with patch behavior
func DefaultPatchProcess(ctx context.Context, in *Process, updateMask *field_mask.FieldMask, db *gorm.DB) (*Process, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Process
	var err error
	if hook, ok := interface{}(&pbObj).(ProcessWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadProcess(ctx, &Process{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ProcessWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskProcess(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ProcessWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateProcess(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ProcessWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ProcessWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Process, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ProcessWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Process, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ProcessWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Process, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ProcessWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Process, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetProcess executes a bulk gorm update call with patch behavior
func DefaultPatchSetProcess(ctx context.Context, objects []*Process, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Process, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Process, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchProcess(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskProcess patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskProcess(ctx context.Context, patchee *Process, patcher *Process, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Process, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	var updatedOwner bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"Pid" {
			patchee.Pid = patcher.Pid
			continue
		}
		if f == prefix+"Ppid" {
			patchee.Ppid = patcher.Ppid
			continue
		}
		if f == prefix+"Executable" {
			patchee.Executable = patcher.Executable
			continue
		}
		if !updatedOwner && strings.HasPrefix(f, prefix+"Owner.") {
			updatedOwner = true
			if patcher.Owner == nil {
				patchee.Owner = nil
				continue
			}
			if patchee.Owner == nil {
				patchee.Owner = &User{}
			}
			if o, err := DefaultApplyFieldMaskUser(ctx, patchee.Owner, patcher.Owner, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Owner.", db); err != nil {
				return nil, err
			} else {
				patchee.Owner = o
			}
			continue
		}
		if f == prefix+"Owner" {
			updatedOwner = true
			patchee.Owner = patcher.Owner
			continue
		}
		if f == prefix+"Architecture" {
			patchee.Architecture = patcher.Architecture
			continue
		}
		if f == prefix+"CmdLine" {
			patchee.CmdLine = patcher.CmdLine
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListProcess executes a gorm list call
func DefaultListProcess(ctx context.Context, db *gorm.DB) ([]*Process, error) {
	in := Process{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProcessORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ProcessORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ProcessORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProcessORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Process{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ProcessORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProcessORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProcessORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]ProcessORM) error
}
