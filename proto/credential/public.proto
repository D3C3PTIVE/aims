syntax = "proto3";

package credential;

// DB -----------
import "google/protobuf/timestamp.proto";
import "options/gorm.proto";
import "types/types.proto";

// Public - A publicly disclosed credential (ex: username)
message Public {
  option (gorm.opts).ormable = true;
  gorm.types.UUID Id = 1 [(gorm.field).tag = {type:"uuid" primary_key: true}];
  // @gotags: display:"Created at" readonly:"true"
  google.protobuf.Timestamp CreatedAt = 4;
  // @gotags: display:"Updated at" readonly:"true"
  google.protobuf.Timestamp UpdatedAt = 5;

  // @gotags: display:"Type" readonly:"true"
  PublicType Type = 10;
  // @gotags: display:"Username" readonly:"true"
  string Username = 11;
  // Data - When the Public credential is a cryptographic key/certificate
  // rather than a username, the key/certificate data is stored in this field.
  // @gotags: display:"Data" readonly:"true"
  string Data = 12;
  // Claims - Some public credentials, such as JSON Web Tokens, 
  // can bear claims, which are a list of key-value pairs. These
  // claims are stored as the bytes of a JSON-marshalled map[string]interface{}
  // A method is provided for credentials to get this map.
  // @gotags: display:"Claims" readonly:"true"
  string Claims = 13;
}

// PublicType - The type of a Public credential. Each of these types might
// trigger different validations when using fetching/creating Private in DB.
enum PublicType {
  // A Username is the default type, such that if the Public.Username is
  // empty, the type will not be able to save itself in DB without
  // explicitely specifying either its .Username field, or by creating a
  // credential.BlankUsername type first.
  Username = 0;
  BlankUsername = 1;

  // PublicKey - Some types of Public credentials are cryptographic public keys.
  // Regardless of their cyphers, algos and other tails, they are stored
  // in the .Key field of the credential.Public, and specialized "subtypes"
  // provide methods for manipulating the key, in/for various formats/purposes.
  // As well, various methods are provided to get cipher and fingerprints.
  PublicKey = 3;

  // Certificate - An x509 certificate that can contain additional information
  // to an (optional) key (a certificate needs a key for encryption, but can be 
  // empty). 
  Certificate = 4;
}
