syntax = "proto3";

package credential;

// DB -----------
import "google/protobuf/timestamp.proto";
import "options/gorm.proto";

// Private - Any credential that should not be publicly exposed.
message Private {
  option (gorm.opts).ormable = true;
  string Id = 1 [(gorm.field).tag = {type:"uuid" primary_key: true}];
  // @gotags: display:"Created at" readonly:"true"
  google.protobuf.Timestamp CreatedAt = 4;
  // @gotags: display:"Updated at" readonly:"true"
  google.protobuf.Timestamp UpdatedAt = 5;

  // @gotags: display:"Type" readonly:"true"
  PrivateType Type = 10;
  // No data passed into Maltego at this point.
  string Data = 11;
  // @gotags: display:"JTR Format" readonly:"true"
  string JTRFormat = 12;
}

// PrivateType - The type of a Private credential. Each of these types might
// trigger different validations when using fetching/creating Private in DB.
enum PrivateType {
  // A password is the default type, such that if the Private.Data is
  // empty, the type will not be able to save itself in DB without
  // explicitely specifying either its .Type field, or by creating a
  // credential.BlankPassword first.
  Password = 0;
  BlankPassword = 1;

  // ReplayableHash - A credential.PasswordHash password hash that
  // can be replayed to authenticate to additional services.
  ReplayableHash = 2;
  // NonReplayableHash - A credential.PasswordHash password hash that 
  // cannot be replayed to authenticate to other services. Contrasts 
  // with credential.ReplayableHash. The NonReplayableHash.Data is any 
  // password hash, such as those recovered from `/etc/passwd` or `/etc/shadow`.
  NonReplayableHash = 3;

  // NTLMHash - A credential.Private password hash that can be credential.ReplayableHash replayed
  // to authenticate to SMB.  It is composed of two hash hex digests (where the hash bytes are
  // printed as a hexadecimal string where 2 characters represent a byte of the original hash with
  // the high nibble first): (1) {lanManagerHexDigestRegexp, the LAN Manager hash's hex digest} and
  // (2) {ntLanManagerHexDigestRegexp, the NTLM hash's hex digest}.
  NTLMHash = 4;

  // PostgresMD5 - A credential.Private.PasswordHash password hash that can be
  // credential.Private.ReplayableHash replayed to authenticate to PostgreSQL
  // servers. It is composed of a hexadecimal string of 32 characters prepended
  // by the string 'md5'
  PostgresMD5= 5;

  // Key - Usually a cryptographic key. When the credential is of this
  // type, various validations are performed on the formatting, encoding
  // potential encryption of the key data, etc.
  // As well, various methods are provided to get cipher and fingerprints.
  Key = 6;

  // JWT - When the private credential is a JSON Web Token, it is used 
  // in conjunction with a given credential.Public to create a JWT string
  // stored in its .Data field. 
  // As well, some other types (eg. credential.Core) allow you to create 
  // JWT from their own data, like usernames, public/private key pairs, etc.
  JWT = 7;
}
