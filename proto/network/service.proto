syntax = "proto3";

package network;

// DB -----------
import "google/protobuf/timestamp.proto";
import "options/gorm.proto";


// Service - A service running behind a port
message Service {
  option (gorm.opts).ormable = true;
  // @gotags: display:"ID" readonly:"true" strict:"yes"
  string Id = 1 [(gorm.field).tag = {type:"uuid" primary_key: true }];
  // @gotags: display:"Created at" readonly:"true" xml:"-" 
  google.protobuf.Timestamp CreatedAt = 4; 
  // @gotags: display:"Updated at" readonly:"true" xml:"-" 
  google.protobuf.Timestamp UpdatedAt = 5;

  // Nmap
  // @gotags: xml:"proto,attr" display:"Protocol"
  string Protocol = 10;
  // @gotags: xml:"name,attr" display:"Name"
  string Name = 11;
  // @gotags: xml:"extrainfo,attr" display:"Extra Info"
  string ExtraInfo = 12;

  // @gotags: xml:"devicetype,attr" display:"Device Type"
  string DeviceType = 17;
  // @gotags: xml:"hostname,attr"
  string Hostname = 18;
  // @gotags: xml:"method,attr" display:"Method"
  string Method = 19;
  // @gotags: xml:"ostype,attr" display:"OS Type"
  string OSType = 20;
  // @gotags: xml:"product,attr" display:"Product"
  string Product = 21;
  // @gotags: xml:"rpcnum,attr" display:"RPC Number"
  string RPCNum = 22;
  // @gotags: xml:"servicefp,attr" display:"Fingerprint"
  string ServiceFP = 23;
  // @gotags: xml:"tunnel,attr" display:"Tunnel"
  string Tunnel = 24;
  // @gotags: xml:"lowver,attr" display:"Low Version"
  string LowVersion = 25; 
  // @gotags: xml:"highver,attr" display:"High Version"
  string HighVersion = 26;
  // @gotags: xml:"version,attr" display:"Version"
  string Version = 27;
  // @gotags: xml:"conf,attr"
  int32 Confidence = 28;
  // @gotags: xml:"cpe" display:"CPEs"
  repeated string CPEs = 29; // "Common Platform Enumeration":standardized way to name software apps, OSs and Hardware platforms

  // @gotags: display:"Authenticated"
  bool Authenticated = 30;

  // Additional information grabbed from any 
  // method ran against the service. Because
  // some HTTP scanners yield map[string]interface{},
  // we always store them as map[string]string.
  message AddedInfo {
                string Key = 1;
                string Value = 2;
  }
  repeated AddedInfo AdditionalInfo = 40;
}

