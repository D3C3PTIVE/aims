package nmap

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/v2/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	gorm "gorm.io/gorm"
	strings "strings"
	time "time"
)

type ScriptORM struct {
	CreatedAt *time.Time
	Elements  []*ElementORM `gorm:"foreignKey:ScriptId;references:Id"`
	Id        string        `gorm:"type:uuid;primaryKey"`
	Name      string
	Output    string
	Tables    []*TableORM `gorm:"foreignKey:ScriptId;references:Id"`
	UpdatedAt *time.Time
}

// TableName overrides the default tablename generated by GORM
func (ScriptORM) TableName() string {
	return "scripts"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Script) ToORM(ctx context.Context) (ScriptORM, error) {
	to := ScriptORM{}
	var err error
	if prehook, ok := interface{}(m).(ScriptWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	to.Name = m.Name
	to.Output = m.Output
	for _, v := range m.Elements {
		if v != nil {
			if tempElements, cErr := v.ToORM(ctx); cErr == nil {
				to.Elements = append(to.Elements, &tempElements)
			} else {
				return to, cErr
			}
		} else {
			to.Elements = append(to.Elements, nil)
		}
	}
	for _, v := range m.Tables {
		if v != nil {
			if tempTables, cErr := v.ToORM(ctx); cErr == nil {
				to.Tables = append(to.Tables, &tempTables)
			} else {
				return to, cErr
			}
		} else {
			to.Tables = append(to.Tables, nil)
		}
	}
	if posthook, ok := interface{}(m).(ScriptWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ScriptORM) ToPB(ctx context.Context) (Script, error) {
	to := Script{}
	var err error
	if prehook, ok := interface{}(m).(ScriptWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	to.Name = m.Name
	to.Output = m.Output
	for _, v := range m.Elements {
		if v != nil {
			if tempElements, cErr := v.ToPB(ctx); cErr == nil {
				to.Elements = append(to.Elements, &tempElements)
			} else {
				return to, cErr
			}
		} else {
			to.Elements = append(to.Elements, nil)
		}
	}
	for _, v := range m.Tables {
		if v != nil {
			if tempTables, cErr := v.ToPB(ctx); cErr == nil {
				to.Tables = append(to.Tables, &tempTables)
			} else {
				return to, cErr
			}
		} else {
			to.Tables = append(to.Tables, nil)
		}
	}
	if posthook, ok := interface{}(m).(ScriptWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Script the arg will be the target, the caller the one being converted from

// ScriptBeforeToORM called before default ToORM code
type ScriptWithBeforeToORM interface {
	BeforeToORM(context.Context, *ScriptORM) error
}

// ScriptAfterToORM called after default ToORM code
type ScriptWithAfterToORM interface {
	AfterToORM(context.Context, *ScriptORM) error
}

// ScriptBeforeToPB called before default ToPB code
type ScriptWithBeforeToPB interface {
	BeforeToPB(context.Context, *Script) error
}

// ScriptAfterToPB called after default ToPB code
type ScriptWithAfterToPB interface {
	AfterToPB(context.Context, *Script) error
}

type ElementORM struct {
	Id       string `gorm:"type:uuid;primaryKey"`
	Key      string
	ScriptId *string
	TableId  *string
	Value    string
}

// TableName overrides the default tablename generated by GORM
func (ElementORM) TableName() string {
	return "elements"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Element) ToORM(ctx context.Context) (ElementORM, error) {
	to := ElementORM{}
	var err error
	if prehook, ok := interface{}(m).(ElementWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Key = m.Key
	to.Value = m.Value
	if posthook, ok := interface{}(m).(ElementWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ElementORM) ToPB(ctx context.Context) (Element, error) {
	to := Element{}
	var err error
	if prehook, ok := interface{}(m).(ElementWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Key = m.Key
	to.Value = m.Value
	if posthook, ok := interface{}(m).(ElementWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Element the arg will be the target, the caller the one being converted from

// ElementBeforeToORM called before default ToORM code
type ElementWithBeforeToORM interface {
	BeforeToORM(context.Context, *ElementORM) error
}

// ElementAfterToORM called after default ToORM code
type ElementWithAfterToORM interface {
	AfterToORM(context.Context, *ElementORM) error
}

// ElementBeforeToPB called before default ToPB code
type ElementWithBeforeToPB interface {
	BeforeToPB(context.Context, *Element) error
}

// ElementAfterToPB called after default ToPB code
type ElementWithAfterToPB interface {
	AfterToPB(context.Context, *Element) error
}

type TableORM struct {
	Elements []*ElementORM `gorm:"foreignKey:TableId;references:Id"`
	Id       string        `gorm:"type:uuid;primaryKey"`
	Key      string
	ScriptId *string
	TableId  *string
	Tables   []*TableORM `gorm:"foreignKey:TableId;references:Id"`
}

// TableName overrides the default tablename generated by GORM
func (TableORM) TableName() string {
	return "tables"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Table) ToORM(ctx context.Context) (TableORM, error) {
	to := TableORM{}
	var err error
	if prehook, ok := interface{}(m).(TableWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Key = m.Key
	for _, v := range m.Tables {
		if v != nil {
			if tempTables, cErr := v.ToORM(ctx); cErr == nil {
				to.Tables = append(to.Tables, &tempTables)
			} else {
				return to, cErr
			}
		} else {
			to.Tables = append(to.Tables, nil)
		}
	}
	for _, v := range m.Elements {
		if v != nil {
			if tempElements, cErr := v.ToORM(ctx); cErr == nil {
				to.Elements = append(to.Elements, &tempElements)
			} else {
				return to, cErr
			}
		} else {
			to.Elements = append(to.Elements, nil)
		}
	}
	if posthook, ok := interface{}(m).(TableWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TableORM) ToPB(ctx context.Context) (Table, error) {
	to := Table{}
	var err error
	if prehook, ok := interface{}(m).(TableWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Key = m.Key
	for _, v := range m.Tables {
		if v != nil {
			if tempTables, cErr := v.ToPB(ctx); cErr == nil {
				to.Tables = append(to.Tables, &tempTables)
			} else {
				return to, cErr
			}
		} else {
			to.Tables = append(to.Tables, nil)
		}
	}
	for _, v := range m.Elements {
		if v != nil {
			if tempElements, cErr := v.ToPB(ctx); cErr == nil {
				to.Elements = append(to.Elements, &tempElements)
			} else {
				return to, cErr
			}
		} else {
			to.Elements = append(to.Elements, nil)
		}
	}
	if posthook, ok := interface{}(m).(TableWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Table the arg will be the target, the caller the one being converted from

// TableBeforeToORM called before default ToORM code
type TableWithBeforeToORM interface {
	BeforeToORM(context.Context, *TableORM) error
}

// TableAfterToORM called after default ToORM code
type TableWithAfterToORM interface {
	AfterToORM(context.Context, *TableORM) error
}

// TableBeforeToPB called before default ToPB code
type TableWithBeforeToPB interface {
	BeforeToPB(context.Context, *Table) error
}

// TableAfterToPB called after default ToPB code
type TableWithAfterToPB interface {
	AfterToPB(context.Context, *Table) error
}

type SmurfORM struct {
	Id        string `gorm:"type:uuid;primaryKey"`
	Responses string
}

// TableName overrides the default tablename generated by GORM
func (SmurfORM) TableName() string {
	return "smurves"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Smurf) ToORM(ctx context.Context) (SmurfORM, error) {
	to := SmurfORM{}
	var err error
	if prehook, ok := interface{}(m).(SmurfWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Responses = m.Responses
	if posthook, ok := interface{}(m).(SmurfWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *SmurfORM) ToPB(ctx context.Context) (Smurf, error) {
	to := Smurf{}
	var err error
	if prehook, ok := interface{}(m).(SmurfWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Responses = m.Responses
	if posthook, ok := interface{}(m).(SmurfWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Smurf the arg will be the target, the caller the one being converted from

// SmurfBeforeToORM called before default ToORM code
type SmurfWithBeforeToORM interface {
	BeforeToORM(context.Context, *SmurfORM) error
}

// SmurfAfterToORM called after default ToORM code
type SmurfWithAfterToORM interface {
	AfterToORM(context.Context, *SmurfORM) error
}

// SmurfBeforeToPB called before default ToPB code
type SmurfWithBeforeToPB interface {
	BeforeToPB(context.Context, *Smurf) error
}

// SmurfAfterToPB called after default ToPB code
type SmurfWithAfterToPB interface {
	AfterToPB(context.Context, *Smurf) error
}

// DefaultCreateScript executes a basic gorm create call
func DefaultCreateScript(ctx context.Context, in *Script, db *gorm.DB) (*Script, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ScriptORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ScriptORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ScriptORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ScriptORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadScript(ctx context.Context, in *Script, db *gorm.DB) (*Script, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ScriptORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ScriptORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ScriptORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ScriptORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ScriptORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ScriptORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ScriptORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteScript(ctx context.Context, in *Script, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ScriptORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ScriptORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ScriptORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ScriptORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ScriptORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteScriptSet(ctx context.Context, in []*Script, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ScriptORM{})).(ScriptORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ScriptORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ScriptORM{})).(ScriptORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ScriptORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Script, *gorm.DB) (*gorm.DB, error)
}
type ScriptORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Script, *gorm.DB) error
}

// DefaultStrictUpdateScript clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateScript(ctx context.Context, in *Script, db *gorm.DB) (*Script, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateScript")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ScriptORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ScriptORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterElements := ElementORM{}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	filterElements.ScriptId = new(string)
	*filterElements.ScriptId = ormObj.Id
	if err = db.Where(filterElements).Delete(ElementORM{}).Error; err != nil {
		return nil, err
	}
	filterTables := TableORM{}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	filterTables.ScriptId = new(string)
	*filterTables.ScriptId = ormObj.Id
	if err = db.Where(filterTables).Delete(TableORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ScriptORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ScriptORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ScriptORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ScriptORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ScriptORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchScript executes a basic gorm update call with patch behavior
func DefaultPatchScript(ctx context.Context, in *Script, updateMask *field_mask.FieldMask, db *gorm.DB) (*Script, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Script
	var err error
	if hook, ok := interface{}(&pbObj).(ScriptWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadScript(ctx, &Script{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ScriptWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskScript(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ScriptWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateScript(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ScriptWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ScriptWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Script, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ScriptWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Script, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ScriptWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Script, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ScriptWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Script, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetScript executes a bulk gorm update call with patch behavior
func DefaultPatchSetScript(ctx context.Context, objects []*Script, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Script, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Script, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchScript(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskScript patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskScript(ctx context.Context, patchee *Script, patcher *Script, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Script, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Output" {
			patchee.Output = patcher.Output
			continue
		}
		if f == prefix+"Elements" {
			patchee.Elements = patcher.Elements
			continue
		}
		if f == prefix+"Tables" {
			patchee.Tables = patcher.Tables
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListScript executes a gorm list call
func DefaultListScript(ctx context.Context, db *gorm.DB) ([]*Script, error) {
	in := Script{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ScriptORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ScriptORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ScriptORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ScriptORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Script{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ScriptORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ScriptORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ScriptORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]ScriptORM) error
}

// DefaultCreateElement executes a basic gorm create call
func DefaultCreateElement(ctx context.Context, in *Element, db *gorm.DB) (*Element, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ElementORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadElement(ctx context.Context, in *Element, db *gorm.DB) (*Element, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ElementORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ElementORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ElementORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteElement(ctx context.Context, in *Element, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ElementORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ElementORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteElementSet(ctx context.Context, in []*Element, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ElementORM{})).(ElementORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ElementORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ElementORM{})).(ElementORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ElementORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Element, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Element, *gorm.DB) error
}

// DefaultStrictUpdateElement clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateElement(ctx context.Context, in *Element, db *gorm.DB) (*Element, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateElement")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ElementORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ElementORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchElement executes a basic gorm update call with patch behavior
func DefaultPatchElement(ctx context.Context, in *Element, updateMask *field_mask.FieldMask, db *gorm.DB) (*Element, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Element
	var err error
	if hook, ok := interface{}(&pbObj).(ElementWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadElement(ctx, &Element{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ElementWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskElement(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ElementWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateElement(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ElementWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ElementWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Element, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ElementWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Element, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ElementWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Element, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ElementWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Element, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetElement executes a bulk gorm update call with patch behavior
func DefaultPatchSetElement(ctx context.Context, objects []*Element, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Element, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Element, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchElement(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskElement patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskElement(ctx context.Context, patchee *Element, patcher *Element, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Element, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Key" {
			patchee.Key = patcher.Key
			continue
		}
		if f == prefix+"Value" {
			patchee.Value = patcher.Value
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListElement executes a gorm list call
func DefaultListElement(ctx context.Context, db *gorm.DB) ([]*Element, error) {
	in := Element{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ElementORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Element{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ElementORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]ElementORM) error
}

// DefaultCreateTable executes a basic gorm create call
func DefaultCreateTable(ctx context.Context, in *Table, db *gorm.DB) (*Table, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TableORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadTable(ctx context.Context, in *Table, db *gorm.DB) (*Table, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := TableORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(TableORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type TableORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteTable(ctx context.Context, in *Table, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&TableORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type TableORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteTableSet(ctx context.Context, in []*Table, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&TableORM{})).(TableORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&TableORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&TableORM{})).(TableORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type TableORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Table, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Table, *gorm.DB) error
}

// DefaultStrictUpdateTable clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTable(ctx context.Context, in *Table, db *gorm.DB) (*Table, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateTable")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &TableORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterElements := ElementORM{}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	filterElements.TableId = new(string)
	*filterElements.TableId = ormObj.Id
	if err = db.Where(filterElements).Delete(ElementORM{}).Error; err != nil {
		return nil, err
	}
	filterTables := TableORM{}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	filterTables.TableId = new(string)
	*filterTables.TableId = ormObj.Id
	if err = db.Where(filterTables).Delete(TableORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type TableORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchTable executes a basic gorm update call with patch behavior
func DefaultPatchTable(ctx context.Context, in *Table, updateMask *field_mask.FieldMask, db *gorm.DB) (*Table, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Table
	var err error
	if hook, ok := interface{}(&pbObj).(TableWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadTable(ctx, &Table{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(TableWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskTable(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(TableWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateTable(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(TableWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type TableWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Table, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TableWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Table, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TableWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Table, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TableWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Table, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetTable executes a bulk gorm update call with patch behavior
func DefaultPatchSetTable(ctx context.Context, objects []*Table, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Table, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Table, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchTable(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskTable patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTable(ctx context.Context, patchee *Table, patcher *Table, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Table, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Key" {
			patchee.Key = patcher.Key
			continue
		}
		if f == prefix+"Tables" {
			patchee.Tables = patcher.Tables
			continue
		}
		if f == prefix+"Elements" {
			patchee.Elements = patcher.Elements
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTable executes a gorm list call
func DefaultListTable(ctx context.Context, db *gorm.DB) ([]*Table, error) {
	in := Table{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []TableORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Table{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TableORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]TableORM) error
}

// DefaultCreateSmurf executes a basic gorm create call
func DefaultCreateSmurf(ctx context.Context, in *Smurf, db *gorm.DB) (*Smurf, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type SmurfORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadSmurf(ctx context.Context, in *Smurf, db *gorm.DB) (*Smurf, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := SmurfORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(SmurfORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type SmurfORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteSmurf(ctx context.Context, in *Smurf, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&SmurfORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type SmurfORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteSmurfSet(ctx context.Context, in []*Smurf, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&SmurfORM{})).(SmurfORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&SmurfORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&SmurfORM{})).(SmurfORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type SmurfORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Smurf, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Smurf, *gorm.DB) error
}

// DefaultStrictUpdateSmurf clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateSmurf(ctx context.Context, in *Smurf, db *gorm.DB) (*Smurf, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateSmurf")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &SmurfORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type SmurfORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchSmurf executes a basic gorm update call with patch behavior
func DefaultPatchSmurf(ctx context.Context, in *Smurf, updateMask *field_mask.FieldMask, db *gorm.DB) (*Smurf, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Smurf
	var err error
	if hook, ok := interface{}(&pbObj).(SmurfWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadSmurf(ctx, &Smurf{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(SmurfWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskSmurf(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(SmurfWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateSmurf(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(SmurfWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type SmurfWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Smurf, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SmurfWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Smurf, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SmurfWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Smurf, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SmurfWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Smurf, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetSmurf executes a bulk gorm update call with patch behavior
func DefaultPatchSetSmurf(ctx context.Context, objects []*Smurf, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Smurf, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Smurf, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchSmurf(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskSmurf patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskSmurf(ctx context.Context, patchee *Smurf, patcher *Smurf, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Smurf, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Responses" {
			patchee.Responses = patcher.Responses
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListSmurf executes a gorm list call
func DefaultListSmurf(ctx context.Context, db *gorm.DB) ([]*Smurf, error) {
	in := Smurf{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []SmurfORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Smurf{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type SmurfORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]SmurfORM) error
}
