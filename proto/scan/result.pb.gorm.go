package scan

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	host "github.com/maxlandon/aims/proto/host"
	network "github.com/maxlandon/aims/proto/network"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	strings "strings"
)

type ResultORM struct {
	Address   *network.AddressORM `gorm:"foreignkey:AddressId;association_foreignkey:Id"`
	AddressId *string
	Data      string
	Host      *host.HostORM `gorm:"foreignkey:HostId;association_foreignkey:Id"`
	HostId    *string
	Id        string        `gorm:"type:uuid;primary_key"`
	Port      *host.PortORM `gorm:"foreignkey:PortId;association_foreignkey:Id"`
	PortId    *string
	Service   *network.ServiceORM `gorm:"foreignkey:ServiceId;association_foreignkey:Id"`
	ServiceId *string
}

// TableName overrides the default tablename generated by GORM
func (ResultORM) TableName() string {
	return "results"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Result) ToORM(ctx context.Context) (ResultORM, error) {
	to := ResultORM{}
	var err error
	if prehook, ok := interface{}(m).(ResultWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.Host != nil {
		tempHost, err := m.Host.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Host = &tempHost
	}
	if m.Address != nil {
		tempAddress, err := m.Address.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Address = &tempAddress
	}
	if m.Port != nil {
		tempPort, err := m.Port.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Port = &tempPort
	}
	if m.Service != nil {
		tempService, err := m.Service.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Service = &tempService
	}
	to.Data = m.Data
	if posthook, ok := interface{}(m).(ResultWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ResultORM) ToPB(ctx context.Context) (Result, error) {
	to := Result{}
	var err error
	if prehook, ok := interface{}(m).(ResultWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.Host != nil {
		tempHost, err := m.Host.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Host = &tempHost
	}
	if m.Address != nil {
		tempAddress, err := m.Address.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Address = &tempAddress
	}
	if m.Port != nil {
		tempPort, err := m.Port.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Port = &tempPort
	}
	if m.Service != nil {
		tempService, err := m.Service.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Service = &tempService
	}
	to.Data = m.Data
	if posthook, ok := interface{}(m).(ResultWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Result the arg will be the target, the caller the one being converted from

// ResultBeforeToORM called before default ToORM code
type ResultWithBeforeToORM interface {
	BeforeToORM(context.Context, *ResultORM) error
}

// ResultAfterToORM called after default ToORM code
type ResultWithAfterToORM interface {
	AfterToORM(context.Context, *ResultORM) error
}

// ResultBeforeToPB called before default ToPB code
type ResultWithBeforeToPB interface {
	BeforeToPB(context.Context, *Result) error
}

// ResultAfterToPB called after default ToPB code
type ResultWithAfterToPB interface {
	AfterToPB(context.Context, *Result) error
}

// DefaultCreateResult executes a basic gorm create call
func DefaultCreateResult(ctx context.Context, in *Result, db *gorm.DB) (*Result, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ResultORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ResultORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ResultORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ResultORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadResult(ctx context.Context, in *Result, db *gorm.DB) (*Result, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ResultORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &ResultORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ResultORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ResultORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ResultORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ResultORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ResultORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ResultORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteResult(ctx context.Context, in *Result, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ResultORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ResultORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ResultORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ResultORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ResultORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteResultSet(ctx context.Context, in []*Result, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ResultORM{})).(ResultORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ResultORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ResultORM{})).(ResultORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ResultORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Result, *gorm.DB) (*gorm.DB, error)
}
type ResultORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Result, *gorm.DB) error
}

// DefaultStrictUpdateResult clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateResult(ctx context.Context, in *Result, db *gorm.DB) (*Result, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateResult")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ResultORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ResultORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ResultORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ResultORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ResultORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ResultORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ResultORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchResult executes a basic gorm update call with patch behavior
func DefaultPatchResult(ctx context.Context, in *Result, updateMask *field_mask.FieldMask, db *gorm.DB) (*Result, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Result
	var err error
	if hook, ok := interface{}(&pbObj).(ResultWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadResult(ctx, &Result{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ResultWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskResult(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ResultWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateResult(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ResultWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ResultWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Result, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ResultWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Result, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ResultWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Result, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ResultWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Result, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetResult executes a bulk gorm update call with patch behavior
func DefaultPatchSetResult(ctx context.Context, objects []*Result, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Result, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Result, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchResult(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskResult patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskResult(ctx context.Context, patchee *Result, patcher *Result, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Result, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedHost bool
	var updatedAddress bool
	var updatedPort bool
	var updatedService bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if !updatedHost && strings.HasPrefix(f, prefix+"Host.") {
			updatedHost = true
			if patcher.Host == nil {
				patchee.Host = nil
				continue
			}
			if patchee.Host == nil {
				patchee.Host = &host.Host{}
			}
			if o, err := host.DefaultApplyFieldMaskHost(ctx, patchee.Host, patcher.Host, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Host.", db); err != nil {
				return nil, err
			} else {
				patchee.Host = o
			}
			continue
		}
		if f == prefix+"Host" {
			updatedHost = true
			patchee.Host = patcher.Host
			continue
		}
		if !updatedAddress && strings.HasPrefix(f, prefix+"Address.") {
			updatedAddress = true
			if patcher.Address == nil {
				patchee.Address = nil
				continue
			}
			if patchee.Address == nil {
				patchee.Address = &network.Address{}
			}
			if o, err := network.DefaultApplyFieldMaskAddress(ctx, patchee.Address, patcher.Address, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Address.", db); err != nil {
				return nil, err
			} else {
				patchee.Address = o
			}
			continue
		}
		if f == prefix+"Address" {
			updatedAddress = true
			patchee.Address = patcher.Address
			continue
		}
		if !updatedPort && strings.HasPrefix(f, prefix+"Port.") {
			updatedPort = true
			if patcher.Port == nil {
				patchee.Port = nil
				continue
			}
			if patchee.Port == nil {
				patchee.Port = &host.Port{}
			}
			if o, err := host.DefaultApplyFieldMaskPort(ctx, patchee.Port, patcher.Port, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Port.", db); err != nil {
				return nil, err
			} else {
				patchee.Port = o
			}
			continue
		}
		if f == prefix+"Port" {
			updatedPort = true
			patchee.Port = patcher.Port
			continue
		}
		if !updatedService && strings.HasPrefix(f, prefix+"Service.") {
			updatedService = true
			if patcher.Service == nil {
				patchee.Service = nil
				continue
			}
			if patchee.Service == nil {
				patchee.Service = &network.Service{}
			}
			if o, err := network.DefaultApplyFieldMaskService(ctx, patchee.Service, patcher.Service, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Service.", db); err != nil {
				return nil, err
			} else {
				patchee.Service = o
			}
			continue
		}
		if f == prefix+"Service" {
			updatedService = true
			patchee.Service = patcher.Service
			continue
		}
		if f == prefix+"Data" {
			patchee.Data = patcher.Data
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListResult executes a gorm list call
func DefaultListResult(ctx context.Context, db *gorm.DB) ([]*Result, error) {
	in := Result{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ResultORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &ResultORM{}, &Result{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ResultORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ResultORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ResultORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Result{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ResultORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ResultORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ResultORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]ResultORM) error
}
