// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: scan/scan.proto

package scan

import (
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	host "github.com/maxlandon/aims/proto/host"
	nmap "github.com/maxlandon/aims/proto/scan/nmap"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Run - Represents a scan before, after or while being run.
// This run can be the one of any scanner: fields are not mandatorily used
// by all scanners for all scans, but this type gives a common tree in which
// to store hosts, ports, services, statistics and various other information.
type Run struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: display:"ID" readonly:"true"
	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty" display:"ID" readonly:"true"`
	// @gotags: display:"Created at" readonly:"true" xml:"-"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" display:"Created at" readonly:"true" xml:"-"`
	// @gotags: display:"Updated at" readonly:"true" xml:"-"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" display:"Updated at" readonly:"true" xml:"-"`
	// An optional session from which the scan runs.
	SessionId string `protobuf:"bytes,8,opt,name=SessionId,proto3" json:"SessionId,omitempty"`
	// An optional host (on which is a session/beacon) from which the scan runs.
	HostId string `protobuf:"bytes,9,opt,name=HostId,proto3" json:"HostId,omitempty"`
	// Nmap --------------------------------
	// @gotags: xml:"args,attr"
	Args string `protobuf:"bytes,10,opt,name=Args,proto3" json:"Args,omitempty" xml:"args,attr"`
	// @gotags: xml:"profile_name,attr"
	ProfileName string `protobuf:"bytes,11,opt,name=ProfileName,proto3" json:"ProfileName,omitempty" xml:"profile_name,attr"`
	// @gotags: xml:"scanner,attr"
	Scanner string `protobuf:"bytes,12,opt,name=Scanner,proto3" json:"Scanner,omitempty" xml:"scanner,attr"`
	// @gotags: xml:"startstr,attr"
	StartStr string `protobuf:"bytes,13,opt,name=StartStr,proto3" json:"StartStr,omitempty" xml:"startstr,attr"`
	// @gotags: xml:"version,attr"
	Version string `protobuf:"bytes,14,opt,name=Version,proto3" json:"Version,omitempty" xml:"version,attr"`
	// @gotags: xml:"xmloutputversion,attr"
	XMLOutputVersion string `protobuf:"bytes,15,opt,name=XMLOutputVersion,proto3" json:"XMLOutputVersion,omitempty" xml:"xmloutputversion,attr"`
	// @gotags: xml:"debugging"
	Debugging *Debugging `protobuf:"bytes,16,opt,name=Debugging,proto3" json:"Debugging,omitempty" xml:"debugging"`
	// @gotags: xml:"runstats"
	Stats *Stats `protobuf:"bytes,17,opt,name=Stats,proto3" json:"Stats,omitempty" xml:"runstats"`
	// @gotags: xml:"scaninfo"
	Info *Info `protobuf:"bytes,18,opt,name=Info,proto3" json:"Info,omitempty" xml:"scaninfo"`
	// @gotags: xml:"start,attr"
	Start int64 `protobuf:"varint,19,opt,name=Start,proto3" json:"Start,omitempty" xml:"start,attr"`
	// @gotags: xml:"verbose"
	Verbose *Verbose `protobuf:"bytes,20,opt,name=Verbose,proto3" json:"Verbose,omitempty" xml:"verbose"`
	// @gotags: xml:"host"
	Hosts []*host.Host `protobuf:"bytes,21,rep,name=Hosts,proto3" json:"Hosts,omitempty" xml:"host"`
	// @gotags: xml:"prescript>script"
	PreScripts []*nmap.Script `protobuf:"bytes,22,rep,name=PreScripts,proto3" json:"PreScripts,omitempty" xml:"prescript>script"`
	// @gotags: xml:"postscript>script"
	PostScripts []*nmap.Script `protobuf:"bytes,23,rep,name=PostScripts,proto3" json:"PostScripts,omitempty" xml:"postscript>script"`
	// @gotags: xml:"target"
	Targets []*Target `protobuf:"bytes,24,rep,name=Targets,proto3" json:"Targets,omitempty" xml:"target"`
	// @gotags: xml:"taskbegin"
	Begin []*ScanTask `protobuf:"bytes,25,rep,name=Begin,proto3" json:"Begin,omitempty" xml:"taskbegin"`
	// @gotags: xml:"taskprogress"
	Progress []*TaskProgress `protobuf:"bytes,26,rep,name=Progress,proto3" json:"Progress,omitempty" xml:"taskprogress"`
	// @gotags: xml:"taskend"
	End        []*ScanTask `protobuf:"bytes,27,rep,name=End,proto3" json:"End,omitempty" xml:"taskend"`
	NmapErrors []string    `protobuf:"bytes,28,rep,name=NmapErrors,proto3" json:"NmapErrors,omitempty"`
	RawXML     string      `protobuf:"bytes,30,opt,name=RawXML,proto3" json:"RawXML,omitempty"`
	// Results - Generally, scans other than Nmap can produce
	// asynchronous results, which has a few implications:
	//   - We can make the scan push its results to caller
	//   - We must however build any entity tree ourselves,
	//     with most of the nmap population not done for us,
	//     for things like traceroutes.
	//
	// The scan.Run has methods and internal logic to deal
	// with populating and/or pushing and/or validating results
	// as they come during a scan.
	Results []*Result `protobuf:"bytes,40,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *Run) Reset() {
	*x = Run{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Run) ProtoMessage() {}

func (x *Run) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Run.ProtoReflect.Descriptor instead.
func (*Run) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{0}
}

func (x *Run) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Run) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Run) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Run) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Run) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *Run) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *Run) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *Run) GetScanner() string {
	if x != nil {
		return x.Scanner
	}
	return ""
}

func (x *Run) GetStartStr() string {
	if x != nil {
		return x.StartStr
	}
	return ""
}

func (x *Run) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Run) GetXMLOutputVersion() string {
	if x != nil {
		return x.XMLOutputVersion
	}
	return ""
}

func (x *Run) GetDebugging() *Debugging {
	if x != nil {
		return x.Debugging
	}
	return nil
}

func (x *Run) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Run) GetInfo() *Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Run) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Run) GetVerbose() *Verbose {
	if x != nil {
		return x.Verbose
	}
	return nil
}

func (x *Run) GetHosts() []*host.Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *Run) GetPreScripts() []*nmap.Script {
	if x != nil {
		return x.PreScripts
	}
	return nil
}

func (x *Run) GetPostScripts() []*nmap.Script {
	if x != nil {
		return x.PostScripts
	}
	return nil
}

func (x *Run) GetTargets() []*Target {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *Run) GetBegin() []*ScanTask {
	if x != nil {
		return x.Begin
	}
	return nil
}

func (x *Run) GetProgress() []*TaskProgress {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *Run) GetEnd() []*ScanTask {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Run) GetNmapErrors() []string {
	if x != nil {
		return x.NmapErrors
	}
	return nil
}

func (x *Run) GetRawXML() string {
	if x != nil {
		return x.RawXML
	}
	return ""
}

func (x *Run) GetResults() []*Result {
	if x != nil {
		return x.Results
	}
	return nil
}

// Info - A general overview of a Scan, with basic information
// on targeted/found services, protocols and flags.
type Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// @gotags: xml:"numservices,attr"
	NumServices int32 `protobuf:"varint,10,opt,name=NumServices,proto3" json:"NumServices,omitempty" xml:"numservices,attr"`
	// @gotags: xml:"protocol,attr"
	Protocol string `protobuf:"bytes,11,opt,name=Protocol,proto3" json:"Protocol,omitempty" xml:"protocol,attr"`
	// @gotags: xml:"scanflags,attr"
	ScanFlags string `protobuf:"bytes,12,opt,name=ScanFlags,proto3" json:"ScanFlags,omitempty" xml:"scanflags,attr"`
	// @gotags: xml:"services,attr"
	Services string `protobuf:"bytes,13,opt,name=Services,proto3" json:"Services,omitempty" xml:"services,attr"`
	// @gotags: xml:"type,attr"
	Type string `protobuf:"bytes,14,opt,name=Type,proto3" json:"Type,omitempty" xml:"type,attr"`
}

func (x *Info) Reset() {
	*x = Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info) ProtoMessage() {}

func (x *Info) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Info.ProtoReflect.Descriptor instead.
func (*Info) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{1}
}

func (x *Info) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Info) GetNumServices() int32 {
	if x != nil {
		return x.NumServices
	}
	return 0
}

func (x *Info) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Info) GetScanFlags() string {
	if x != nil {
		return x.ScanFlags
	}
	return ""
}

func (x *Info) GetServices() string {
	if x != nil {
		return x.Services
	}
	return ""
}

func (x *Info) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Verbose - Contains the verbosity level of the scan
type Verbose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// @gotags: xml:"level,attr"
	Level int32 `protobuf:"varint,10,opt,name=Level,proto3" json:"Level,omitempty" xml:"level,attr"`
}

func (x *Verbose) Reset() {
	*x = Verbose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Verbose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verbose) ProtoMessage() {}

func (x *Verbose) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verbose.ProtoReflect.Descriptor instead.
func (*Verbose) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{2}
}

func (x *Verbose) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Verbose) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

// Debugging - Contains the debugging level of the scan
type Debugging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// @gotags: xml:"level,attr"
	Level int32 `protobuf:"varint,10,opt,name=Level,proto3" json:"Level,omitempty" xml:"level,attr"`
}

func (x *Debugging) Reset() {
	*x = Debugging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Debugging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Debugging) ProtoMessage() {}

func (x *Debugging) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Debugging.ProtoReflect.Descriptor instead.
func (*Debugging) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{3}
}

func (x *Debugging) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Debugging) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

// ScanTask - Information about a task
type ScanTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// @gotags: xml:"time,attr"
	Time int64 `protobuf:"varint,10,opt,name=Time,proto3" json:"Time,omitempty" xml:"time,attr"`
	// @gotags: xml:"task,attr"
	Task string `protobuf:"bytes,11,opt,name=Task,proto3" json:"Task,omitempty" xml:"task,attr"`
	// @gotags: xml:"extrainfo,attr"
	ExtraInfo string `protobuf:"bytes,12,opt,name=ExtraInfo,proto3" json:"ExtraInfo,omitempty" xml:"extrainfo,attr"`
}

func (x *ScanTask) Reset() {
	*x = ScanTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanTask) ProtoMessage() {}

func (x *ScanTask) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanTask.ProtoReflect.Descriptor instead.
func (*ScanTask) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{4}
}

func (x *ScanTask) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ScanTask) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ScanTask) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *ScanTask) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

// TaskProgress - Progression of a task
type TaskProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// @gotags: xml:"percent,attr"
	Percent float32 `protobuf:"fixed32,10,opt,name=Percent,proto3" json:"Percent,omitempty" xml:"percent,attr"`
	// @gotags: xml:"remaining,attr"
	Remaining int32 `protobuf:"varint,11,opt,name=Remaining,proto3" json:"Remaining,omitempty" xml:"remaining,attr"`
	// @gotags: xml:"task,attr"
	Task string `protobuf:"bytes,12,opt,name=Task,proto3" json:"Task,omitempty" xml:"task,attr"`
	// @gotags: xml:"etc,attr"
	Etc int64 `protobuf:"varint,13,opt,name=Etc,proto3" json:"Etc,omitempty" xml:"etc,attr"`
	// @gotags: xml:"time,attr"
	Time int64 `protobuf:"varint,14,opt,name=Time,proto3" json:"Time,omitempty" xml:"time,attr"`
}

func (x *TaskProgress) Reset() {
	*x = TaskProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskProgress) ProtoMessage() {}

func (x *TaskProgress) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskProgress.ProtoReflect.Descriptor instead.
func (*TaskProgress) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{5}
}

func (x *TaskProgress) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskProgress) GetPercent() float32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *TaskProgress) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *TaskProgress) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *TaskProgress) GetEtc() int64 {
	if x != nil {
		return x.Etc
	}
	return 0
}

func (x *TaskProgress) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// Target - This type can be used as an Input object to a scan,
// in which case only the Input fields matter to you
//
// Represents how the target was specified when passed to nmap,
// its status and the reason of its status. Example:
// <target specification="domain.does.not.exist" status="skipped" reason="invalid"/>
type Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// Input ---------------------------
	Address string `protobuf:"bytes,5,opt,name=Address,proto3" json:"Address,omitempty"`
	Domain  string `protobuf:"bytes,6,opt,name=Domain,proto3" json:"Domain,omitempty"`
	Tag     string `protobuf:"bytes,7,opt,name=Tag,proto3" json:"Tag,omitempty"`
	Port    uint32 `protobuf:"varint,8,opt,name=Port,proto3" json:"Port,omitempty"`
	// Output (Nmap) -------------------
	// @gotags: xml:"specification,attr"
	Specification string `protobuf:"bytes,10,opt,name=Specification,proto3" json:"Specification,omitempty" xml:"specification,attr"`
	// @gotags: xml:"status,attr"
	Status string `protobuf:"bytes,11,opt,name=Status,proto3" json:"Status,omitempty" xml:"status,attr"`
	// @gotags: xml:"reason,attr"
	Reason string `protobuf:"bytes,12,opt,name=Reason,proto3" json:"Reason,omitempty" xml:"reason,attr"`
}

func (x *Target) Reset() {
	*x = Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{6}
}

func (x *Target) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Target) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Target) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Target) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Target) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Target) GetSpecification() string {
	if x != nil {
		return x.Specification
	}
	return ""
}

func (x *Target) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Target) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Stats - Contains statistics for a Nmap scan
type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// @gotags: xml:"finished"
	Finished *Finished `protobuf:"bytes,10,opt,name=Finished,proto3" json:"Finished,omitempty" xml:"finished"`
	// @gotags: xml:"hosts"
	Hosts *HostStats `protobuf:"bytes,11,opt,name=Hosts,proto3" json:"Hosts,omitempty" xml:"hosts"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{7}
}

func (x *Stats) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Stats) GetFinished() *Finished {
	if x != nil {
		return x.Finished
	}
	return nil
}

func (x *Stats) GetHosts() *HostStats {
	if x != nil {
		return x.Hosts
	}
	return nil
}

// Finished - Statistics for a Scan after it has run.
type Finished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// @gotags: xml:"time,attr"
	Time int64 `protobuf:"varint,10,opt,name=Time,proto3" json:"Time,omitempty" xml:"time,attr"`
	// @gotags: xml:"timestr,attr"
	TimeStr string `protobuf:"bytes,11,opt,name=TimeStr,proto3" json:"TimeStr,omitempty" xml:"timestr,attr"`
	// @gotags: xml:"elapsed,attr"
	Elapsed float32 `protobuf:"fixed32,12,opt,name=Elapsed,proto3" json:"Elapsed,omitempty" xml:"elapsed,attr"`
	// @gotags: xml:"summary,attr"
	Summary string `protobuf:"bytes,13,opt,name=Summary,proto3" json:"Summary,omitempty" xml:"summary,attr"`
	// @gotags: xml:"exit,attr"
	Exit string `protobuf:"bytes,14,opt,name=Exit,proto3" json:"Exit,omitempty" xml:"exit,attr"`
	// @gotags: xml:"errormsg,attr"
	ErrorMsg string `protobuf:"bytes,15,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty" xml:"errormsg,attr"`
}

func (x *Finished) Reset() {
	*x = Finished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Finished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Finished) ProtoMessage() {}

func (x *Finished) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Finished.ProtoReflect.Descriptor instead.
func (*Finished) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{8}
}

func (x *Finished) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Finished) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Finished) GetTimeStr() string {
	if x != nil {
		return x.TimeStr
	}
	return ""
}

func (x *Finished) GetElapsed() float32 {
	if x != nil {
		return x.Elapsed
	}
	return 0
}

func (x *Finished) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Finished) GetExit() string {
	if x != nil {
		return x.Exit
	}
	return ""
}

func (x *Finished) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// Host - Contains the amount of up/down hosts and total count
type HostStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// @gotags: xml:"up,attr"
	Up int32 `protobuf:"varint,10,opt,name=Up,proto3" json:"Up,omitempty" xml:"up,attr"`
	// @gotags: xml:"down,attr"
	Down int32 `protobuf:"varint,11,opt,name=Down,proto3" json:"Down,omitempty" xml:"down,attr"`
	// @gotags: xml:"total,attr"
	Total int32 `protobuf:"varint,12,opt,name=Total,proto3" json:"Total,omitempty" xml:"total,attr"`
}

func (x *HostStats) Reset() {
	*x = HostStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostStats) ProtoMessage() {}

func (x *HostStats) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostStats.ProtoReflect.Descriptor instead.
func (*HostStats) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{9}
}

func (x *HostStats) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HostStats) GetUp() int32 {
	if x != nil {
		return x.Up
	}
	return 0
}

func (x *HostStats) GetDown() int32 {
	if x != nil {
		return x.Down
	}
	return 0
}

func (x *HostStats) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_scan_scan_proto protoreflect.FileDescriptor

var file_scan_scan_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x73, 0x63, 0x61, 0x6e, 0x1a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x68, 0x6f,
	0x73, 0x74, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x73,
	0x63, 0x61, 0x6e, 0x2f, 0x6e, 0x6d, 0x61, 0x70, 0x2f, 0x6e, 0x6d, 0x61, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x08, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x1e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a,
	0x0a, 0x08, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64, 0x28, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x72, 0x67, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x72, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x74, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x10, 0x58, 0x4d, 0x4c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x58, 0x4d, 0x4c, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x73, 0x63, 0x61, 0x6e, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x06,
	0xba, 0xb9, 0x19, 0x02, 0x22, 0x00, 0x52, 0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x12, 0x29, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x22, 0x00, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x73, 0x63, 0x61,
	0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x22, 0x00, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63,
	0x61, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x22, 0x00, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x68, 0x6f, 0x73,
	0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x32, 0x00, 0x52, 0x05,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x61, 0x6e,
	0x2e, 0x6e, 0x6d, 0x61, 0x70, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x06, 0xba, 0xb9,
	0x19, 0x02, 0x32, 0x00, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73,
	0x12, 0x3b, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x6e, 0x6d, 0x61,
	0x70, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x32, 0x00,
	0x52, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x2e, 0x0a,
	0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x06, 0xba, 0xb9,
	0x19, 0x02, 0x32, 0x00, 0x52, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73,
	0x63, 0x61, 0x6e, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x06, 0xba, 0xb9,
	0x19, 0x02, 0x32, 0x00, 0x52, 0x05, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x63, 0x61, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x32, 0x00, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x32, 0x00, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x4e, 0x6d, 0x61, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x4e, 0x6d, 0x61, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x61, 0x77, 0x58, 0x4d, 0x4c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52,
	0x61, 0x77, 0x58, 0x4d, 0x4c, 0x12, 0x2e, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x32, 0x00, 0x52, 0x07, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xba, 0x01,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x28, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x75, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4e, 0x75, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63, 0x61, 0x6e, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x63, 0x61, 0x6e, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x47, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64, 0x28,
	0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x06, 0xba, 0xb9, 0x19,
	0x02, 0x08, 0x01, 0x22, 0x49, 0x0a, 0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x12, 0x1e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9,
	0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64, 0x28, 0x01, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x78,
	0x0a, 0x08, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x28, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xa8, 0x01, 0x0a, 0x0c, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x28, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x74, 0x63, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x45, 0x74, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19,
	0x02, 0x08, 0x01, 0x22, 0xde, 0x01, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a,
	0x0a, 0x08, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64, 0x28, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54,
	0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x06, 0xba, 0xb9,
	0x19, 0x02, 0x08, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a,
	0x0a, 0x08, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64, 0x28, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x52, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x61, 0x6e,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xc4, 0x01, 0x0a, 0x08, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x28, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x78, 0x69, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x45, 0x78, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01,
	0x22, 0x6d, 0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a,
	0x08, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64, 0x28, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x55, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x55, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x44, 0x6f, 0x77, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x6f, 0x77,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x42,
	0x6b, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x42, 0x09, 0x53, 0x63, 0x61,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x78, 0x6c, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x2f, 0x61,
	0x69, 0x6d, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0xa2, 0x02,
	0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x04, 0x53, 0x63, 0x61, 0x6e, 0xca, 0x02, 0x04, 0x53, 0x63,
	0x61, 0x6e, 0xe2, 0x02, 0x10, 0x53, 0x63, 0x61, 0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x04, 0x53, 0x63, 0x61, 0x6e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scan_scan_proto_rawDescOnce sync.Once
	file_scan_scan_proto_rawDescData = file_scan_scan_proto_rawDesc
)

func file_scan_scan_proto_rawDescGZIP() []byte {
	file_scan_scan_proto_rawDescOnce.Do(func() {
		file_scan_scan_proto_rawDescData = protoimpl.X.CompressGZIP(file_scan_scan_proto_rawDescData)
	})
	return file_scan_scan_proto_rawDescData
}

var file_scan_scan_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_scan_scan_proto_goTypes = []interface{}{
	(*Run)(nil),                   // 0: scan.Run
	(*Info)(nil),                  // 1: scan.Info
	(*Verbose)(nil),               // 2: scan.Verbose
	(*Debugging)(nil),             // 3: scan.Debugging
	(*ScanTask)(nil),              // 4: scan.ScanTask
	(*TaskProgress)(nil),          // 5: scan.TaskProgress
	(*Target)(nil),                // 6: scan.Target
	(*Stats)(nil),                 // 7: scan.Stats
	(*Finished)(nil),              // 8: scan.Finished
	(*HostStats)(nil),             // 9: scan.HostStats
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
	(*host.Host)(nil),             // 11: host.Host
	(*nmap.Script)(nil),           // 12: scan.nmap.Script
	(*Result)(nil),                // 13: scan.Result
}
var file_scan_scan_proto_depIdxs = []int32{
	10, // 0: scan.Run.CreatedAt:type_name -> google.protobuf.Timestamp
	10, // 1: scan.Run.UpdatedAt:type_name -> google.protobuf.Timestamp
	3,  // 2: scan.Run.Debugging:type_name -> scan.Debugging
	7,  // 3: scan.Run.Stats:type_name -> scan.Stats
	1,  // 4: scan.Run.Info:type_name -> scan.Info
	2,  // 5: scan.Run.Verbose:type_name -> scan.Verbose
	11, // 6: scan.Run.Hosts:type_name -> host.Host
	12, // 7: scan.Run.PreScripts:type_name -> scan.nmap.Script
	12, // 8: scan.Run.PostScripts:type_name -> scan.nmap.Script
	6,  // 9: scan.Run.Targets:type_name -> scan.Target
	4,  // 10: scan.Run.Begin:type_name -> scan.ScanTask
	5,  // 11: scan.Run.Progress:type_name -> scan.TaskProgress
	4,  // 12: scan.Run.End:type_name -> scan.ScanTask
	13, // 13: scan.Run.Results:type_name -> scan.Result
	8,  // 14: scan.Stats.Finished:type_name -> scan.Finished
	9,  // 15: scan.Stats.Hosts:type_name -> scan.HostStats
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_scan_scan_proto_init() }
func file_scan_scan_proto_init() {
	if File_scan_scan_proto != nil {
		return
	}
	file_scan_result_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_scan_scan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Run); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Verbose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Debugging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Finished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scan_scan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scan_scan_proto_goTypes,
		DependencyIndexes: file_scan_scan_proto_depIdxs,
		MessageInfos:      file_scan_scan_proto_msgTypes,
	}.Build()
	File_scan_scan_proto = out.File
	file_scan_scan_proto_rawDesc = nil
	file_scan_scan_proto_goTypes = nil
	file_scan_scan_proto_depIdxs = nil
}
