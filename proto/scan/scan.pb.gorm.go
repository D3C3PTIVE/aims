package scan

import (
	context "context"
	fmt "fmt"
	host "github.com/d3c3ptive/aims/proto/host"
	nmap "github.com/d3c3ptive/aims/proto/scan/nmap"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/v2/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	gorm "gorm.io/gorm"
	strings "strings"
	time "time"
)

type RunORM struct {
	Args             string
	Begin            []*ScanTaskORM `gorm:"foreignKey:Id;references:Id;many2many:run_begins;joinForeignKey:RunId;joinReferences:ScanTaskId"`
	CreatedAt        *time.Time
	Debugging        *DebuggingORM `gorm:"foreignKey:DebuggingId;references:Id"`
	DebuggingId      *string
	End              []*ScanTaskORM `gorm:"foreignKey:Id;references:Id;many2many:run_ends;joinForeignKey:RunId;joinReferences:ScanTaskId"`
	HostId           string
	Hosts            []*host.HostORM `gorm:"foreignKey:Id;references:Id;many2many:run_hosts;joinForeignKey:RunId;joinReferences:HostId"`
	Id               string          `gorm:"type:uuid;primaryKey"`
	Info             *InfoORM        `gorm:"foreignKey:InfoId;references:Id"`
	InfoId           *string
	PostScripts      []*nmap.ScriptORM `gorm:"foreignKey:Id;references:Id;many2many:run_post_scripts;joinForeignKey:RunId;joinReferences:ScriptId"`
	PreScripts       []*nmap.ScriptORM `gorm:"foreignKey:Id;references:Id;many2many:run_pre_scripts;joinForeignKey:RunId;joinReferences:ScriptId"`
	ProfileName      string
	Progress         []*TaskProgressORM `gorm:"foreignKey:Id;references:Id;many2many:run_task_progresses;joinForeignKey:RunId;joinReferences:TaskProgressId"`
	RawXML           string
	Results          []*ResultORM `gorm:"foreignKey:Id;references:Id;many2many:run_results;joinForeignKey:RunId;joinReferences:ResultId"`
	Scanner          string
	SessionId        string
	Start            int64
	StartStr         string
	Stats            *StatsORM `gorm:"foreignKey:StatsId;references:Id"`
	StatsId          *string
	Targets          []*TargetORM `gorm:"foreignKey:Id;references:Id;many2many:run_targets;joinForeignKey:RunId;joinReferences:TargetId"`
	UpdatedAt        *time.Time
	Verbose          *VerboseORM `gorm:"foreignKey:VerboseId;references:Id"`
	VerboseId        *string
	Version          string
	XMLOutputVersion string
}

// TableName overrides the default tablename generated by GORM
func (RunORM) TableName() string {
	return "runs"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Run) ToORM(ctx context.Context) (RunORM, error) {
	to := RunORM{}
	var err error
	if prehook, ok := interface{}(m).(RunWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	to.SessionId = m.SessionId
	to.HostId = m.HostId
	to.Args = m.Args
	to.ProfileName = m.ProfileName
	to.Scanner = m.Scanner
	to.StartStr = m.StartStr
	to.Version = m.Version
	to.XMLOutputVersion = m.XMLOutputVersion
	if m.Debugging != nil {
		tempDebugging, err := m.Debugging.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Debugging = &tempDebugging
	}
	if m.Stats != nil {
		tempStats, err := m.Stats.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Stats = &tempStats
	}
	if m.Info != nil {
		tempInfo, err := m.Info.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Info = &tempInfo
	}
	to.Start = m.Start
	if m.Verbose != nil {
		tempVerbose, err := m.Verbose.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Verbose = &tempVerbose
	}
	for _, v := range m.Hosts {
		if v != nil {
			if tempHosts, cErr := v.ToORM(ctx); cErr == nil {
				to.Hosts = append(to.Hosts, &tempHosts)
			} else {
				return to, cErr
			}
		} else {
			to.Hosts = append(to.Hosts, nil)
		}
	}
	for _, v := range m.PreScripts {
		if v != nil {
			if tempPreScripts, cErr := v.ToORM(ctx); cErr == nil {
				to.PreScripts = append(to.PreScripts, &tempPreScripts)
			} else {
				return to, cErr
			}
		} else {
			to.PreScripts = append(to.PreScripts, nil)
		}
	}
	for _, v := range m.PostScripts {
		if v != nil {
			if tempPostScripts, cErr := v.ToORM(ctx); cErr == nil {
				to.PostScripts = append(to.PostScripts, &tempPostScripts)
			} else {
				return to, cErr
			}
		} else {
			to.PostScripts = append(to.PostScripts, nil)
		}
	}
	for _, v := range m.Targets {
		if v != nil {
			if tempTargets, cErr := v.ToORM(ctx); cErr == nil {
				to.Targets = append(to.Targets, &tempTargets)
			} else {
				return to, cErr
			}
		} else {
			to.Targets = append(to.Targets, nil)
		}
	}
	for _, v := range m.Begin {
		if v != nil {
			if tempBegin, cErr := v.ToORM(ctx); cErr == nil {
				to.Begin = append(to.Begin, &tempBegin)
			} else {
				return to, cErr
			}
		} else {
			to.Begin = append(to.Begin, nil)
		}
	}
	for _, v := range m.Progress {
		if v != nil {
			if tempProgress, cErr := v.ToORM(ctx); cErr == nil {
				to.Progress = append(to.Progress, &tempProgress)
			} else {
				return to, cErr
			}
		} else {
			to.Progress = append(to.Progress, nil)
		}
	}
	for _, v := range m.End {
		if v != nil {
			if tempEnd, cErr := v.ToORM(ctx); cErr == nil {
				to.End = append(to.End, &tempEnd)
			} else {
				return to, cErr
			}
		} else {
			to.End = append(to.End, nil)
		}
	}
	// Repeated type string is not an ORMable message type
	to.RawXML = m.RawXML
	for _, v := range m.Results {
		if v != nil {
			if tempResults, cErr := v.ToORM(ctx); cErr == nil {
				to.Results = append(to.Results, &tempResults)
			} else {
				return to, cErr
			}
		} else {
			to.Results = append(to.Results, nil)
		}
	}
	if posthook, ok := interface{}(m).(RunWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *RunORM) ToPB(ctx context.Context) (Run, error) {
	to := Run{}
	var err error
	if prehook, ok := interface{}(m).(RunWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	to.SessionId = m.SessionId
	to.HostId = m.HostId
	to.Args = m.Args
	to.ProfileName = m.ProfileName
	to.Scanner = m.Scanner
	to.StartStr = m.StartStr
	to.Version = m.Version
	to.XMLOutputVersion = m.XMLOutputVersion
	if m.Debugging != nil {
		tempDebugging, err := m.Debugging.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Debugging = &tempDebugging
	}
	if m.Stats != nil {
		tempStats, err := m.Stats.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Stats = &tempStats
	}
	if m.Info != nil {
		tempInfo, err := m.Info.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Info = &tempInfo
	}
	to.Start = m.Start
	if m.Verbose != nil {
		tempVerbose, err := m.Verbose.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Verbose = &tempVerbose
	}
	for _, v := range m.Hosts {
		if v != nil {
			if tempHosts, cErr := v.ToPB(ctx); cErr == nil {
				to.Hosts = append(to.Hosts, &tempHosts)
			} else {
				return to, cErr
			}
		} else {
			to.Hosts = append(to.Hosts, nil)
		}
	}
	for _, v := range m.PreScripts {
		if v != nil {
			if tempPreScripts, cErr := v.ToPB(ctx); cErr == nil {
				to.PreScripts = append(to.PreScripts, &tempPreScripts)
			} else {
				return to, cErr
			}
		} else {
			to.PreScripts = append(to.PreScripts, nil)
		}
	}
	for _, v := range m.PostScripts {
		if v != nil {
			if tempPostScripts, cErr := v.ToPB(ctx); cErr == nil {
				to.PostScripts = append(to.PostScripts, &tempPostScripts)
			} else {
				return to, cErr
			}
		} else {
			to.PostScripts = append(to.PostScripts, nil)
		}
	}
	for _, v := range m.Targets {
		if v != nil {
			if tempTargets, cErr := v.ToPB(ctx); cErr == nil {
				to.Targets = append(to.Targets, &tempTargets)
			} else {
				return to, cErr
			}
		} else {
			to.Targets = append(to.Targets, nil)
		}
	}
	for _, v := range m.Begin {
		if v != nil {
			if tempBegin, cErr := v.ToPB(ctx); cErr == nil {
				to.Begin = append(to.Begin, &tempBegin)
			} else {
				return to, cErr
			}
		} else {
			to.Begin = append(to.Begin, nil)
		}
	}
	for _, v := range m.Progress {
		if v != nil {
			if tempProgress, cErr := v.ToPB(ctx); cErr == nil {
				to.Progress = append(to.Progress, &tempProgress)
			} else {
				return to, cErr
			}
		} else {
			to.Progress = append(to.Progress, nil)
		}
	}
	for _, v := range m.End {
		if v != nil {
			if tempEnd, cErr := v.ToPB(ctx); cErr == nil {
				to.End = append(to.End, &tempEnd)
			} else {
				return to, cErr
			}
		} else {
			to.End = append(to.End, nil)
		}
	}
	// Repeated type string is not an ORMable message type
	to.RawXML = m.RawXML
	for _, v := range m.Results {
		if v != nil {
			if tempResults, cErr := v.ToPB(ctx); cErr == nil {
				to.Results = append(to.Results, &tempResults)
			} else {
				return to, cErr
			}
		} else {
			to.Results = append(to.Results, nil)
		}
	}
	if posthook, ok := interface{}(m).(RunWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Run the arg will be the target, the caller the one being converted from

// RunBeforeToORM called before default ToORM code
type RunWithBeforeToORM interface {
	BeforeToORM(context.Context, *RunORM) error
}

// RunAfterToORM called after default ToORM code
type RunWithAfterToORM interface {
	AfterToORM(context.Context, *RunORM) error
}

// RunBeforeToPB called before default ToPB code
type RunWithBeforeToPB interface {
	BeforeToPB(context.Context, *Run) error
}

// RunAfterToPB called after default ToPB code
type RunWithAfterToPB interface {
	AfterToPB(context.Context, *Run) error
}

type InfoORM struct {
	Id          string `gorm:"type:uuid;primaryKey"`
	NumServices int32
	Protocol    string
	ScanFlags   string
	Services    string
	Type        string
}

// TableName overrides the default tablename generated by GORM
func (InfoORM) TableName() string {
	return "infos"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Info) ToORM(ctx context.Context) (InfoORM, error) {
	to := InfoORM{}
	var err error
	if prehook, ok := interface{}(m).(InfoWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.NumServices = m.NumServices
	to.Protocol = m.Protocol
	to.ScanFlags = m.ScanFlags
	to.Services = m.Services
	to.Type = m.Type
	if posthook, ok := interface{}(m).(InfoWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *InfoORM) ToPB(ctx context.Context) (Info, error) {
	to := Info{}
	var err error
	if prehook, ok := interface{}(m).(InfoWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.NumServices = m.NumServices
	to.Protocol = m.Protocol
	to.ScanFlags = m.ScanFlags
	to.Services = m.Services
	to.Type = m.Type
	if posthook, ok := interface{}(m).(InfoWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Info the arg will be the target, the caller the one being converted from

// InfoBeforeToORM called before default ToORM code
type InfoWithBeforeToORM interface {
	BeforeToORM(context.Context, *InfoORM) error
}

// InfoAfterToORM called after default ToORM code
type InfoWithAfterToORM interface {
	AfterToORM(context.Context, *InfoORM) error
}

// InfoBeforeToPB called before default ToPB code
type InfoWithBeforeToPB interface {
	BeforeToPB(context.Context, *Info) error
}

// InfoAfterToPB called after default ToPB code
type InfoWithAfterToPB interface {
	AfterToPB(context.Context, *Info) error
}

type VerboseORM struct {
	Id    string `gorm:"type:uuid;primaryKey"`
	Level int32
}

// TableName overrides the default tablename generated by GORM
func (VerboseORM) TableName() string {
	return "verboses"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Verbose) ToORM(ctx context.Context) (VerboseORM, error) {
	to := VerboseORM{}
	var err error
	if prehook, ok := interface{}(m).(VerboseWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Level = m.Level
	if posthook, ok := interface{}(m).(VerboseWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *VerboseORM) ToPB(ctx context.Context) (Verbose, error) {
	to := Verbose{}
	var err error
	if prehook, ok := interface{}(m).(VerboseWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Level = m.Level
	if posthook, ok := interface{}(m).(VerboseWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Verbose the arg will be the target, the caller the one being converted from

// VerboseBeforeToORM called before default ToORM code
type VerboseWithBeforeToORM interface {
	BeforeToORM(context.Context, *VerboseORM) error
}

// VerboseAfterToORM called after default ToORM code
type VerboseWithAfterToORM interface {
	AfterToORM(context.Context, *VerboseORM) error
}

// VerboseBeforeToPB called before default ToPB code
type VerboseWithBeforeToPB interface {
	BeforeToPB(context.Context, *Verbose) error
}

// VerboseAfterToPB called after default ToPB code
type VerboseWithAfterToPB interface {
	AfterToPB(context.Context, *Verbose) error
}

type DebuggingORM struct {
	Id    string `gorm:"type:uuid;primaryKey"`
	Level int32
}

// TableName overrides the default tablename generated by GORM
func (DebuggingORM) TableName() string {
	return "debuggings"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Debugging) ToORM(ctx context.Context) (DebuggingORM, error) {
	to := DebuggingORM{}
	var err error
	if prehook, ok := interface{}(m).(DebuggingWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Level = m.Level
	if posthook, ok := interface{}(m).(DebuggingWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *DebuggingORM) ToPB(ctx context.Context) (Debugging, error) {
	to := Debugging{}
	var err error
	if prehook, ok := interface{}(m).(DebuggingWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Level = m.Level
	if posthook, ok := interface{}(m).(DebuggingWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Debugging the arg will be the target, the caller the one being converted from

// DebuggingBeforeToORM called before default ToORM code
type DebuggingWithBeforeToORM interface {
	BeforeToORM(context.Context, *DebuggingORM) error
}

// DebuggingAfterToORM called after default ToORM code
type DebuggingWithAfterToORM interface {
	AfterToORM(context.Context, *DebuggingORM) error
}

// DebuggingBeforeToPB called before default ToPB code
type DebuggingWithBeforeToPB interface {
	BeforeToPB(context.Context, *Debugging) error
}

// DebuggingAfterToPB called after default ToPB code
type DebuggingWithAfterToPB interface {
	AfterToPB(context.Context, *Debugging) error
}

type ScanTaskORM struct {
	ExtraInfo string
	Id        string `gorm:"type:uuid;primaryKey"`
	Task      string
	Time      int64
}

// TableName overrides the default tablename generated by GORM
func (ScanTaskORM) TableName() string {
	return "scan_tasks"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *ScanTask) ToORM(ctx context.Context) (ScanTaskORM, error) {
	to := ScanTaskORM{}
	var err error
	if prehook, ok := interface{}(m).(ScanTaskWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Time = m.Time
	to.Task = m.Task
	to.ExtraInfo = m.ExtraInfo
	if posthook, ok := interface{}(m).(ScanTaskWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ScanTaskORM) ToPB(ctx context.Context) (ScanTask, error) {
	to := ScanTask{}
	var err error
	if prehook, ok := interface{}(m).(ScanTaskWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Time = m.Time
	to.Task = m.Task
	to.ExtraInfo = m.ExtraInfo
	if posthook, ok := interface{}(m).(ScanTaskWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type ScanTask the arg will be the target, the caller the one being converted from

// ScanTaskBeforeToORM called before default ToORM code
type ScanTaskWithBeforeToORM interface {
	BeforeToORM(context.Context, *ScanTaskORM) error
}

// ScanTaskAfterToORM called after default ToORM code
type ScanTaskWithAfterToORM interface {
	AfterToORM(context.Context, *ScanTaskORM) error
}

// ScanTaskBeforeToPB called before default ToPB code
type ScanTaskWithBeforeToPB interface {
	BeforeToPB(context.Context, *ScanTask) error
}

// ScanTaskAfterToPB called after default ToPB code
type ScanTaskWithAfterToPB interface {
	AfterToPB(context.Context, *ScanTask) error
}

type TaskProgressORM struct {
	Etc       int64
	Id        string `gorm:"type:uuid;primaryKey"`
	Percent   float32
	Remaining int32
	Task      string
	Time      int64
}

// TableName overrides the default tablename generated by GORM
func (TaskProgressORM) TableName() string {
	return "task_progresses"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *TaskProgress) ToORM(ctx context.Context) (TaskProgressORM, error) {
	to := TaskProgressORM{}
	var err error
	if prehook, ok := interface{}(m).(TaskProgressWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Percent = m.Percent
	to.Remaining = m.Remaining
	to.Task = m.Task
	to.Etc = m.Etc
	to.Time = m.Time
	if posthook, ok := interface{}(m).(TaskProgressWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TaskProgressORM) ToPB(ctx context.Context) (TaskProgress, error) {
	to := TaskProgress{}
	var err error
	if prehook, ok := interface{}(m).(TaskProgressWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Percent = m.Percent
	to.Remaining = m.Remaining
	to.Task = m.Task
	to.Etc = m.Etc
	to.Time = m.Time
	if posthook, ok := interface{}(m).(TaskProgressWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type TaskProgress the arg will be the target, the caller the one being converted from

// TaskProgressBeforeToORM called before default ToORM code
type TaskProgressWithBeforeToORM interface {
	BeforeToORM(context.Context, *TaskProgressORM) error
}

// TaskProgressAfterToORM called after default ToORM code
type TaskProgressWithAfterToORM interface {
	AfterToORM(context.Context, *TaskProgressORM) error
}

// TaskProgressBeforeToPB called before default ToPB code
type TaskProgressWithBeforeToPB interface {
	BeforeToPB(context.Context, *TaskProgress) error
}

// TaskProgressAfterToPB called after default ToPB code
type TaskProgressWithAfterToPB interface {
	AfterToPB(context.Context, *TaskProgress) error
}

type TargetORM struct {
	Address       string
	Domain        string
	Id            string `gorm:"type:uuid;primaryKey"`
	Port          uint32
	Reason        string
	Specification string
	Status        string
	Tag           string
}

// TableName overrides the default tablename generated by GORM
func (TargetORM) TableName() string {
	return "targets"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Target) ToORM(ctx context.Context) (TargetORM, error) {
	to := TargetORM{}
	var err error
	if prehook, ok := interface{}(m).(TargetWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Address = m.Address
	to.Domain = m.Domain
	to.Tag = m.Tag
	to.Port = m.Port
	to.Specification = m.Specification
	to.Status = m.Status
	to.Reason = m.Reason
	if posthook, ok := interface{}(m).(TargetWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TargetORM) ToPB(ctx context.Context) (Target, error) {
	to := Target{}
	var err error
	if prehook, ok := interface{}(m).(TargetWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Address = m.Address
	to.Domain = m.Domain
	to.Tag = m.Tag
	to.Port = m.Port
	to.Specification = m.Specification
	to.Status = m.Status
	to.Reason = m.Reason
	if posthook, ok := interface{}(m).(TargetWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Target the arg will be the target, the caller the one being converted from

// TargetBeforeToORM called before default ToORM code
type TargetWithBeforeToORM interface {
	BeforeToORM(context.Context, *TargetORM) error
}

// TargetAfterToORM called after default ToORM code
type TargetWithAfterToORM interface {
	AfterToORM(context.Context, *TargetORM) error
}

// TargetBeforeToPB called before default ToPB code
type TargetWithBeforeToPB interface {
	BeforeToPB(context.Context, *Target) error
}

// TargetAfterToPB called after default ToPB code
type TargetWithAfterToPB interface {
	AfterToPB(context.Context, *Target) error
}

type StatsORM struct {
	Finished *FinishedORM  `gorm:"foreignKey:StatsId;references:Id"`
	Hosts    *HostStatsORM `gorm:"foreignKey:StatsId;references:Id"`
	Id       string        `gorm:"type:uuid;primaryKey"`
}

// TableName overrides the default tablename generated by GORM
func (StatsORM) TableName() string {
	return "stats"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Stats) ToORM(ctx context.Context) (StatsORM, error) {
	to := StatsORM{}
	var err error
	if prehook, ok := interface{}(m).(StatsWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.Finished != nil {
		tempFinished, err := m.Finished.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Finished = &tempFinished
	}
	if m.Hosts != nil {
		tempHosts, err := m.Hosts.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Hosts = &tempHosts
	}
	if posthook, ok := interface{}(m).(StatsWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *StatsORM) ToPB(ctx context.Context) (Stats, error) {
	to := Stats{}
	var err error
	if prehook, ok := interface{}(m).(StatsWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.Finished != nil {
		tempFinished, err := m.Finished.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Finished = &tempFinished
	}
	if m.Hosts != nil {
		tempHosts, err := m.Hosts.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Hosts = &tempHosts
	}
	if posthook, ok := interface{}(m).(StatsWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Stats the arg will be the target, the caller the one being converted from

// StatsBeforeToORM called before default ToORM code
type StatsWithBeforeToORM interface {
	BeforeToORM(context.Context, *StatsORM) error
}

// StatsAfterToORM called after default ToORM code
type StatsWithAfterToORM interface {
	AfterToORM(context.Context, *StatsORM) error
}

// StatsBeforeToPB called before default ToPB code
type StatsWithBeforeToPB interface {
	BeforeToPB(context.Context, *Stats) error
}

// StatsAfterToPB called after default ToPB code
type StatsWithAfterToPB interface {
	AfterToPB(context.Context, *Stats) error
}

type FinishedORM struct {
	Elapsed  float32
	ErrorMsg string
	Exit     string
	Id       string `gorm:"type:uuid;primaryKey"`
	StatsId  *string
	Summary  string
	Time     int64
	TimeStr  string
}

// TableName overrides the default tablename generated by GORM
func (FinishedORM) TableName() string {
	return "finisheds"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Finished) ToORM(ctx context.Context) (FinishedORM, error) {
	to := FinishedORM{}
	var err error
	if prehook, ok := interface{}(m).(FinishedWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Time = m.Time
	to.TimeStr = m.TimeStr
	to.Elapsed = m.Elapsed
	to.Summary = m.Summary
	to.Exit = m.Exit
	to.ErrorMsg = m.ErrorMsg
	if posthook, ok := interface{}(m).(FinishedWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *FinishedORM) ToPB(ctx context.Context) (Finished, error) {
	to := Finished{}
	var err error
	if prehook, ok := interface{}(m).(FinishedWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Time = m.Time
	to.TimeStr = m.TimeStr
	to.Elapsed = m.Elapsed
	to.Summary = m.Summary
	to.Exit = m.Exit
	to.ErrorMsg = m.ErrorMsg
	if posthook, ok := interface{}(m).(FinishedWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Finished the arg will be the target, the caller the one being converted from

// FinishedBeforeToORM called before default ToORM code
type FinishedWithBeforeToORM interface {
	BeforeToORM(context.Context, *FinishedORM) error
}

// FinishedAfterToORM called after default ToORM code
type FinishedWithAfterToORM interface {
	AfterToORM(context.Context, *FinishedORM) error
}

// FinishedBeforeToPB called before default ToPB code
type FinishedWithBeforeToPB interface {
	BeforeToPB(context.Context, *Finished) error
}

// FinishedAfterToPB called after default ToPB code
type FinishedWithAfterToPB interface {
	AfterToPB(context.Context, *Finished) error
}

type HostStatsORM struct {
	Down    int32
	Id      string `gorm:"type:uuid;primaryKey"`
	StatsId *string
	Total   int32
	Up      int32
}

// TableName overrides the default tablename generated by GORM
func (HostStatsORM) TableName() string {
	return "host_stats"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *HostStats) ToORM(ctx context.Context) (HostStatsORM, error) {
	to := HostStatsORM{}
	var err error
	if prehook, ok := interface{}(m).(HostStatsWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Up = m.Up
	to.Down = m.Down
	to.Total = m.Total
	if posthook, ok := interface{}(m).(HostStatsWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *HostStatsORM) ToPB(ctx context.Context) (HostStats, error) {
	to := HostStats{}
	var err error
	if prehook, ok := interface{}(m).(HostStatsWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Up = m.Up
	to.Down = m.Down
	to.Total = m.Total
	if posthook, ok := interface{}(m).(HostStatsWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type HostStats the arg will be the target, the caller the one being converted from

// HostStatsBeforeToORM called before default ToORM code
type HostStatsWithBeforeToORM interface {
	BeforeToORM(context.Context, *HostStatsORM) error
}

// HostStatsAfterToORM called after default ToORM code
type HostStatsWithAfterToORM interface {
	AfterToORM(context.Context, *HostStatsORM) error
}

// HostStatsBeforeToPB called before default ToPB code
type HostStatsWithBeforeToPB interface {
	BeforeToPB(context.Context, *HostStats) error
}

// HostStatsAfterToPB called after default ToPB code
type HostStatsWithAfterToPB interface {
	AfterToPB(context.Context, *HostStats) error
}

// DefaultCreateRun executes a basic gorm create call
func DefaultCreateRun(ctx context.Context, in *Run, db *gorm.DB) (*Run, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RunORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RunORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type RunORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RunORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadRun(ctx context.Context, in *Run, db *gorm.DB) (*Run, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(RunORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(RunORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := RunORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(RunORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type RunORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RunORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RunORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteRun(ctx context.Context, in *Run, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(RunORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&RunORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(RunORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type RunORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RunORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteRunSet(ctx context.Context, in []*Run, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&RunORM{})).(RunORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&RunORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&RunORM{})).(RunORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type RunORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Run, *gorm.DB) (*gorm.DB, error)
}
type RunORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Run, *gorm.DB) error
}

// DefaultStrictUpdateRun clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateRun(ctx context.Context, in *Run, db *gorm.DB) (*Run, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateRun")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &RunORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(RunORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Model(&ormObj).Association("Begin").Replace(ormObj.Begin); err != nil {
		return nil, err
	}
	ormObj.Begin = nil
	if err = db.Model(&ormObj).Association("End").Replace(ormObj.End); err != nil {
		return nil, err
	}
	ormObj.End = nil
	if err = db.Model(&ormObj).Association("Hosts").Replace(ormObj.Hosts); err != nil {
		return nil, err
	}
	ormObj.Hosts = nil
	if err = db.Model(&ormObj).Association("PostScripts").Replace(ormObj.PostScripts); err != nil {
		return nil, err
	}
	ormObj.PostScripts = nil
	if err = db.Model(&ormObj).Association("PreScripts").Replace(ormObj.PreScripts); err != nil {
		return nil, err
	}
	ormObj.PreScripts = nil
	if err = db.Model(&ormObj).Association("Progress").Replace(ormObj.Progress); err != nil {
		return nil, err
	}
	ormObj.Progress = nil
	if err = db.Model(&ormObj).Association("Results").Replace(ormObj.Results); err != nil {
		return nil, err
	}
	ormObj.Results = nil
	if err = db.Model(&ormObj).Association("Targets").Replace(ormObj.Targets); err != nil {
		return nil, err
	}
	ormObj.Targets = nil
	if hook, ok := interface{}(&ormObj).(RunORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RunORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type RunORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RunORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RunORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchRun executes a basic gorm update call with patch behavior
func DefaultPatchRun(ctx context.Context, in *Run, updateMask *field_mask.FieldMask, db *gorm.DB) (*Run, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Run
	var err error
	if hook, ok := interface{}(&pbObj).(RunWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadRun(ctx, &Run{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(RunWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskRun(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(RunWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateRun(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(RunWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type RunWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Run, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RunWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Run, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RunWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Run, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RunWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Run, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetRun executes a bulk gorm update call with patch behavior
func DefaultPatchSetRun(ctx context.Context, objects []*Run, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Run, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Run, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchRun(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskRun patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskRun(ctx context.Context, patchee *Run, patcher *Run, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Run, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	var updatedDebugging bool
	var updatedStats bool
	var updatedInfo bool
	var updatedVerbose bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"SessionId" {
			patchee.SessionId = patcher.SessionId
			continue
		}
		if f == prefix+"HostId" {
			patchee.HostId = patcher.HostId
			continue
		}
		if f == prefix+"Args" {
			patchee.Args = patcher.Args
			continue
		}
		if f == prefix+"ProfileName" {
			patchee.ProfileName = patcher.ProfileName
			continue
		}
		if f == prefix+"Scanner" {
			patchee.Scanner = patcher.Scanner
			continue
		}
		if f == prefix+"StartStr" {
			patchee.StartStr = patcher.StartStr
			continue
		}
		if f == prefix+"Version" {
			patchee.Version = patcher.Version
			continue
		}
		if f == prefix+"XMLOutputVersion" {
			patchee.XMLOutputVersion = patcher.XMLOutputVersion
			continue
		}
		if !updatedDebugging && strings.HasPrefix(f, prefix+"Debugging.") {
			updatedDebugging = true
			if patcher.Debugging == nil {
				patchee.Debugging = nil
				continue
			}
			if patchee.Debugging == nil {
				patchee.Debugging = &Debugging{}
			}
			if o, err := DefaultApplyFieldMaskDebugging(ctx, patchee.Debugging, patcher.Debugging, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Debugging.", db); err != nil {
				return nil, err
			} else {
				patchee.Debugging = o
			}
			continue
		}
		if f == prefix+"Debugging" {
			updatedDebugging = true
			patchee.Debugging = patcher.Debugging
			continue
		}
		if !updatedStats && strings.HasPrefix(f, prefix+"Stats.") {
			updatedStats = true
			if patcher.Stats == nil {
				patchee.Stats = nil
				continue
			}
			if patchee.Stats == nil {
				patchee.Stats = &Stats{}
			}
			if o, err := DefaultApplyFieldMaskStats(ctx, patchee.Stats, patcher.Stats, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Stats.", db); err != nil {
				return nil, err
			} else {
				patchee.Stats = o
			}
			continue
		}
		if f == prefix+"Stats" {
			updatedStats = true
			patchee.Stats = patcher.Stats
			continue
		}
		if !updatedInfo && strings.HasPrefix(f, prefix+"Info.") {
			updatedInfo = true
			if patcher.Info == nil {
				patchee.Info = nil
				continue
			}
			if patchee.Info == nil {
				patchee.Info = &Info{}
			}
			if o, err := DefaultApplyFieldMaskInfo(ctx, patchee.Info, patcher.Info, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Info.", db); err != nil {
				return nil, err
			} else {
				patchee.Info = o
			}
			continue
		}
		if f == prefix+"Info" {
			updatedInfo = true
			patchee.Info = patcher.Info
			continue
		}
		if f == prefix+"Start" {
			patchee.Start = patcher.Start
			continue
		}
		if !updatedVerbose && strings.HasPrefix(f, prefix+"Verbose.") {
			updatedVerbose = true
			if patcher.Verbose == nil {
				patchee.Verbose = nil
				continue
			}
			if patchee.Verbose == nil {
				patchee.Verbose = &Verbose{}
			}
			if o, err := DefaultApplyFieldMaskVerbose(ctx, patchee.Verbose, patcher.Verbose, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Verbose.", db); err != nil {
				return nil, err
			} else {
				patchee.Verbose = o
			}
			continue
		}
		if f == prefix+"Verbose" {
			updatedVerbose = true
			patchee.Verbose = patcher.Verbose
			continue
		}
		if f == prefix+"Hosts" {
			patchee.Hosts = patcher.Hosts
			continue
		}
		if f == prefix+"PreScripts" {
			patchee.PreScripts = patcher.PreScripts
			continue
		}
		if f == prefix+"PostScripts" {
			patchee.PostScripts = patcher.PostScripts
			continue
		}
		if f == prefix+"Targets" {
			patchee.Targets = patcher.Targets
			continue
		}
		if f == prefix+"Begin" {
			patchee.Begin = patcher.Begin
			continue
		}
		if f == prefix+"Progress" {
			patchee.Progress = patcher.Progress
			continue
		}
		if f == prefix+"End" {
			patchee.End = patcher.End
			continue
		}
		if f == prefix+"NmapErrors" {
			patchee.NmapErrors = patcher.NmapErrors
			continue
		}
		if f == prefix+"RawXML" {
			patchee.RawXML = patcher.RawXML
			continue
		}
		if f == prefix+"Results" {
			patchee.Results = patcher.Results
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListRun executes a gorm list call
func DefaultListRun(ctx context.Context, db *gorm.DB) ([]*Run, error) {
	in := Run{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RunORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(RunORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []RunORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RunORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Run{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type RunORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RunORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RunORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]RunORM) error
}

// DefaultCreateInfo executes a basic gorm create call
func DefaultCreateInfo(ctx context.Context, in *Info, db *gorm.DB) (*Info, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type InfoORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InfoORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadInfo(ctx context.Context, in *Info, db *gorm.DB) (*Info, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := InfoORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(InfoORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type InfoORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InfoORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InfoORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteInfo(ctx context.Context, in *Info, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&InfoORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type InfoORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InfoORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteInfoSet(ctx context.Context, in []*Info, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&InfoORM{})).(InfoORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&InfoORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&InfoORM{})).(InfoORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type InfoORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Info, *gorm.DB) (*gorm.DB, error)
}
type InfoORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Info, *gorm.DB) error
}

// DefaultStrictUpdateInfo clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateInfo(ctx context.Context, in *Info, db *gorm.DB) (*Info, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateInfo")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &InfoORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(InfoORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type InfoORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InfoORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InfoORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchInfo executes a basic gorm update call with patch behavior
func DefaultPatchInfo(ctx context.Context, in *Info, updateMask *field_mask.FieldMask, db *gorm.DB) (*Info, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Info
	var err error
	if hook, ok := interface{}(&pbObj).(InfoWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadInfo(ctx, &Info{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(InfoWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskInfo(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(InfoWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateInfo(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(InfoWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type InfoWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Info, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type InfoWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Info, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type InfoWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Info, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type InfoWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Info, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetInfo executes a bulk gorm update call with patch behavior
func DefaultPatchSetInfo(ctx context.Context, objects []*Info, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Info, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Info, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchInfo(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskInfo patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskInfo(ctx context.Context, patchee *Info, patcher *Info, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Info, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"NumServices" {
			patchee.NumServices = patcher.NumServices
			continue
		}
		if f == prefix+"Protocol" {
			patchee.Protocol = patcher.Protocol
			continue
		}
		if f == prefix+"ScanFlags" {
			patchee.ScanFlags = patcher.ScanFlags
			continue
		}
		if f == prefix+"Services" {
			patchee.Services = patcher.Services
			continue
		}
		if f == prefix+"Type" {
			patchee.Type = patcher.Type
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListInfo executes a gorm list call
func DefaultListInfo(ctx context.Context, db *gorm.DB) ([]*Info, error) {
	in := Info{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []InfoORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Info{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type InfoORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InfoORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InfoORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]InfoORM) error
}

// DefaultCreateVerbose executes a basic gorm create call
func DefaultCreateVerbose(ctx context.Context, in *Verbose, db *gorm.DB) (*Verbose, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type VerboseORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type VerboseORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadVerbose(ctx context.Context, in *Verbose, db *gorm.DB) (*Verbose, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := VerboseORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(VerboseORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type VerboseORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type VerboseORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type VerboseORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteVerbose(ctx context.Context, in *Verbose, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&VerboseORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type VerboseORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type VerboseORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteVerboseSet(ctx context.Context, in []*Verbose, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&VerboseORM{})).(VerboseORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&VerboseORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&VerboseORM{})).(VerboseORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type VerboseORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Verbose, *gorm.DB) (*gorm.DB, error)
}
type VerboseORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Verbose, *gorm.DB) error
}

// DefaultStrictUpdateVerbose clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateVerbose(ctx context.Context, in *Verbose, db *gorm.DB) (*Verbose, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateVerbose")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &VerboseORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(VerboseORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type VerboseORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type VerboseORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type VerboseORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchVerbose executes a basic gorm update call with patch behavior
func DefaultPatchVerbose(ctx context.Context, in *Verbose, updateMask *field_mask.FieldMask, db *gorm.DB) (*Verbose, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Verbose
	var err error
	if hook, ok := interface{}(&pbObj).(VerboseWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadVerbose(ctx, &Verbose{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(VerboseWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskVerbose(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(VerboseWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateVerbose(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(VerboseWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type VerboseWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Verbose, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type VerboseWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Verbose, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type VerboseWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Verbose, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type VerboseWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Verbose, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetVerbose executes a bulk gorm update call with patch behavior
func DefaultPatchSetVerbose(ctx context.Context, objects []*Verbose, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Verbose, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Verbose, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchVerbose(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskVerbose patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskVerbose(ctx context.Context, patchee *Verbose, patcher *Verbose, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Verbose, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Level" {
			patchee.Level = patcher.Level
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListVerbose executes a gorm list call
func DefaultListVerbose(ctx context.Context, db *gorm.DB) ([]*Verbose, error) {
	in := Verbose{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []VerboseORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Verbose{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type VerboseORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type VerboseORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type VerboseORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]VerboseORM) error
}

// DefaultCreateDebugging executes a basic gorm create call
func DefaultCreateDebugging(ctx context.Context, in *Debugging, db *gorm.DB) (*Debugging, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type DebuggingORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DebuggingORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadDebugging(ctx context.Context, in *Debugging, db *gorm.DB) (*Debugging, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := DebuggingORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(DebuggingORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type DebuggingORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DebuggingORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DebuggingORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteDebugging(ctx context.Context, in *Debugging, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&DebuggingORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type DebuggingORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DebuggingORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteDebuggingSet(ctx context.Context, in []*Debugging, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&DebuggingORM{})).(DebuggingORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&DebuggingORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&DebuggingORM{})).(DebuggingORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type DebuggingORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Debugging, *gorm.DB) (*gorm.DB, error)
}
type DebuggingORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Debugging, *gorm.DB) error
}

// DefaultStrictUpdateDebugging clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateDebugging(ctx context.Context, in *Debugging, db *gorm.DB) (*Debugging, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateDebugging")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &DebuggingORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type DebuggingORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DebuggingORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DebuggingORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchDebugging executes a basic gorm update call with patch behavior
func DefaultPatchDebugging(ctx context.Context, in *Debugging, updateMask *field_mask.FieldMask, db *gorm.DB) (*Debugging, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Debugging
	var err error
	if hook, ok := interface{}(&pbObj).(DebuggingWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadDebugging(ctx, &Debugging{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(DebuggingWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskDebugging(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(DebuggingWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateDebugging(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(DebuggingWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type DebuggingWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Debugging, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type DebuggingWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Debugging, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type DebuggingWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Debugging, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type DebuggingWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Debugging, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetDebugging executes a bulk gorm update call with patch behavior
func DefaultPatchSetDebugging(ctx context.Context, objects []*Debugging, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Debugging, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Debugging, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchDebugging(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskDebugging patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskDebugging(ctx context.Context, patchee *Debugging, patcher *Debugging, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Debugging, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Level" {
			patchee.Level = patcher.Level
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListDebugging executes a gorm list call
func DefaultListDebugging(ctx context.Context, db *gorm.DB) ([]*Debugging, error) {
	in := Debugging{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []DebuggingORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Debugging{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type DebuggingORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DebuggingORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DebuggingORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]DebuggingORM) error
}

// DefaultCreateScanTask executes a basic gorm create call
func DefaultCreateScanTask(ctx context.Context, in *ScanTask, db *gorm.DB) (*ScanTask, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ScanTaskORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ScanTaskORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ScanTaskORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ScanTaskORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadScanTask(ctx context.Context, in *ScanTask, db *gorm.DB) (*ScanTask, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ScanTaskORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ScanTaskORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ScanTaskORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ScanTaskORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ScanTaskORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ScanTaskORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ScanTaskORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteScanTask(ctx context.Context, in *ScanTask, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ScanTaskORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ScanTaskORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ScanTaskORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ScanTaskORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ScanTaskORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteScanTaskSet(ctx context.Context, in []*ScanTask, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ScanTaskORM{})).(ScanTaskORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ScanTaskORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ScanTaskORM{})).(ScanTaskORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ScanTaskORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*ScanTask, *gorm.DB) (*gorm.DB, error)
}
type ScanTaskORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*ScanTask, *gorm.DB) error
}

// DefaultStrictUpdateScanTask clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateScanTask(ctx context.Context, in *ScanTask, db *gorm.DB) (*ScanTask, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateScanTask")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ScanTaskORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ScanTaskORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ScanTaskORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ScanTaskORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ScanTaskORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ScanTaskORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ScanTaskORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchScanTask executes a basic gorm update call with patch behavior
func DefaultPatchScanTask(ctx context.Context, in *ScanTask, updateMask *field_mask.FieldMask, db *gorm.DB) (*ScanTask, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj ScanTask
	var err error
	if hook, ok := interface{}(&pbObj).(ScanTaskWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadScanTask(ctx, &ScanTask{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ScanTaskWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskScanTask(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ScanTaskWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateScanTask(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ScanTaskWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ScanTaskWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *ScanTask, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ScanTaskWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *ScanTask, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ScanTaskWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *ScanTask, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ScanTaskWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *ScanTask, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetScanTask executes a bulk gorm update call with patch behavior
func DefaultPatchSetScanTask(ctx context.Context, objects []*ScanTask, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*ScanTask, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*ScanTask, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchScanTask(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskScanTask patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskScanTask(ctx context.Context, patchee *ScanTask, patcher *ScanTask, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*ScanTask, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Time" {
			patchee.Time = patcher.Time
			continue
		}
		if f == prefix+"Task" {
			patchee.Task = patcher.Task
			continue
		}
		if f == prefix+"ExtraInfo" {
			patchee.ExtraInfo = patcher.ExtraInfo
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListScanTask executes a gorm list call
func DefaultListScanTask(ctx context.Context, db *gorm.DB) ([]*ScanTask, error) {
	in := ScanTask{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ScanTaskORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ScanTaskORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ScanTaskORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ScanTaskORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*ScanTask{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ScanTaskORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ScanTaskORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ScanTaskORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]ScanTaskORM) error
}

// DefaultCreateTaskProgress executes a basic gorm create call
func DefaultCreateTaskProgress(ctx context.Context, in *TaskProgress, db *gorm.DB) (*TaskProgress, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TaskProgressORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadTaskProgress(ctx context.Context, in *TaskProgress, db *gorm.DB) (*TaskProgress, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := TaskProgressORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(TaskProgressORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type TaskProgressORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteTaskProgress(ctx context.Context, in *TaskProgress, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&TaskProgressORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type TaskProgressORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteTaskProgressSet(ctx context.Context, in []*TaskProgress, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&TaskProgressORM{})).(TaskProgressORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&TaskProgressORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&TaskProgressORM{})).(TaskProgressORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type TaskProgressORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*TaskProgress, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*TaskProgress, *gorm.DB) error
}

// DefaultStrictUpdateTaskProgress clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTaskProgress(ctx context.Context, in *TaskProgress, db *gorm.DB) (*TaskProgress, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateTaskProgress")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &TaskProgressORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type TaskProgressORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchTaskProgress executes a basic gorm update call with patch behavior
func DefaultPatchTaskProgress(ctx context.Context, in *TaskProgress, updateMask *field_mask.FieldMask, db *gorm.DB) (*TaskProgress, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj TaskProgress
	var err error
	if hook, ok := interface{}(&pbObj).(TaskProgressWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadTaskProgress(ctx, &TaskProgress{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(TaskProgressWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskTaskProgress(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(TaskProgressWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateTaskProgress(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(TaskProgressWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type TaskProgressWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *TaskProgress, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *TaskProgress, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *TaskProgress, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *TaskProgress, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetTaskProgress executes a bulk gorm update call with patch behavior
func DefaultPatchSetTaskProgress(ctx context.Context, objects []*TaskProgress, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*TaskProgress, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*TaskProgress, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchTaskProgress(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskTaskProgress patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTaskProgress(ctx context.Context, patchee *TaskProgress, patcher *TaskProgress, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*TaskProgress, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Percent" {
			patchee.Percent = patcher.Percent
			continue
		}
		if f == prefix+"Remaining" {
			patchee.Remaining = patcher.Remaining
			continue
		}
		if f == prefix+"Task" {
			patchee.Task = patcher.Task
			continue
		}
		if f == prefix+"Etc" {
			patchee.Etc = patcher.Etc
			continue
		}
		if f == prefix+"Time" {
			patchee.Time = patcher.Time
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTaskProgress executes a gorm list call
func DefaultListTaskProgress(ctx context.Context, db *gorm.DB) ([]*TaskProgress, error) {
	in := TaskProgress{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []TaskProgressORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*TaskProgress{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TaskProgressORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]TaskProgressORM) error
}

// DefaultCreateTarget executes a basic gorm create call
func DefaultCreateTarget(ctx context.Context, in *Target, db *gorm.DB) (*Target, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TargetORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadTarget(ctx context.Context, in *Target, db *gorm.DB) (*Target, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := TargetORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(TargetORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type TargetORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteTarget(ctx context.Context, in *Target, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&TargetORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type TargetORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteTargetSet(ctx context.Context, in []*Target, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&TargetORM{})).(TargetORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&TargetORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&TargetORM{})).(TargetORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type TargetORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Target, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Target, *gorm.DB) error
}

// DefaultStrictUpdateTarget clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTarget(ctx context.Context, in *Target, db *gorm.DB) (*Target, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateTarget")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &TargetORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type TargetORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchTarget executes a basic gorm update call with patch behavior
func DefaultPatchTarget(ctx context.Context, in *Target, updateMask *field_mask.FieldMask, db *gorm.DB) (*Target, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Target
	var err error
	if hook, ok := interface{}(&pbObj).(TargetWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadTarget(ctx, &Target{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(TargetWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskTarget(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(TargetWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateTarget(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(TargetWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type TargetWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Target, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TargetWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Target, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TargetWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Target, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TargetWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Target, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetTarget executes a bulk gorm update call with patch behavior
func DefaultPatchSetTarget(ctx context.Context, objects []*Target, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Target, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Target, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchTarget(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskTarget patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTarget(ctx context.Context, patchee *Target, patcher *Target, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Target, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Address" {
			patchee.Address = patcher.Address
			continue
		}
		if f == prefix+"Domain" {
			patchee.Domain = patcher.Domain
			continue
		}
		if f == prefix+"Tag" {
			patchee.Tag = patcher.Tag
			continue
		}
		if f == prefix+"Port" {
			patchee.Port = patcher.Port
			continue
		}
		if f == prefix+"Specification" {
			patchee.Specification = patcher.Specification
			continue
		}
		if f == prefix+"Status" {
			patchee.Status = patcher.Status
			continue
		}
		if f == prefix+"Reason" {
			patchee.Reason = patcher.Reason
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTarget executes a gorm list call
func DefaultListTarget(ctx context.Context, db *gorm.DB) ([]*Target, error) {
	in := Target{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []TargetORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Target{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TargetORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]TargetORM) error
}

// DefaultCreateStats executes a basic gorm create call
func DefaultCreateStats(ctx context.Context, in *Stats, db *gorm.DB) (*Stats, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type StatsORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StatsORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadStats(ctx context.Context, in *Stats, db *gorm.DB) (*Stats, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := StatsORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(StatsORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type StatsORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StatsORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StatsORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteStats(ctx context.Context, in *Stats, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&StatsORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type StatsORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StatsORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteStatsSet(ctx context.Context, in []*Stats, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&StatsORM{})).(StatsORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&StatsORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&StatsORM{})).(StatsORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type StatsORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Stats, *gorm.DB) (*gorm.DB, error)
}
type StatsORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Stats, *gorm.DB) error
}

// DefaultStrictUpdateStats clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateStats(ctx context.Context, in *Stats, db *gorm.DB) (*Stats, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateStats")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &StatsORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(StatsORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterFinished := FinishedORM{}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	filterFinished.StatsId = new(string)
	*filterFinished.StatsId = ormObj.Id
	if err = db.Where(filterFinished).Delete(FinishedORM{}).Error; err != nil {
		return nil, err
	}
	filterHosts := HostStatsORM{}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	filterHosts.StatsId = new(string)
	*filterHosts.StatsId = ormObj.Id
	if err = db.Where(filterHosts).Delete(HostStatsORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type StatsORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StatsORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StatsORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchStats executes a basic gorm update call with patch behavior
func DefaultPatchStats(ctx context.Context, in *Stats, updateMask *field_mask.FieldMask, db *gorm.DB) (*Stats, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Stats
	var err error
	if hook, ok := interface{}(&pbObj).(StatsWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadStats(ctx, &Stats{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(StatsWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskStats(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(StatsWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateStats(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(StatsWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type StatsWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Stats, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type StatsWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Stats, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type StatsWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Stats, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type StatsWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Stats, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetStats executes a bulk gorm update call with patch behavior
func DefaultPatchSetStats(ctx context.Context, objects []*Stats, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Stats, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Stats, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchStats(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskStats patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskStats(ctx context.Context, patchee *Stats, patcher *Stats, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Stats, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedFinished bool
	var updatedHosts bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if !updatedFinished && strings.HasPrefix(f, prefix+"Finished.") {
			updatedFinished = true
			if patcher.Finished == nil {
				patchee.Finished = nil
				continue
			}
			if patchee.Finished == nil {
				patchee.Finished = &Finished{}
			}
			if o, err := DefaultApplyFieldMaskFinished(ctx, patchee.Finished, patcher.Finished, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Finished.", db); err != nil {
				return nil, err
			} else {
				patchee.Finished = o
			}
			continue
		}
		if f == prefix+"Finished" {
			updatedFinished = true
			patchee.Finished = patcher.Finished
			continue
		}
		if !updatedHosts && strings.HasPrefix(f, prefix+"Hosts.") {
			updatedHosts = true
			if patcher.Hosts == nil {
				patchee.Hosts = nil
				continue
			}
			if patchee.Hosts == nil {
				patchee.Hosts = &HostStats{}
			}
			if o, err := DefaultApplyFieldMaskHostStats(ctx, patchee.Hosts, patcher.Hosts, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Hosts.", db); err != nil {
				return nil, err
			} else {
				patchee.Hosts = o
			}
			continue
		}
		if f == prefix+"Hosts" {
			updatedHosts = true
			patchee.Hosts = patcher.Hosts
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListStats executes a gorm list call
func DefaultListStats(ctx context.Context, db *gorm.DB) ([]*Stats, error) {
	in := Stats{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []StatsORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Stats{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type StatsORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StatsORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StatsORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]StatsORM) error
}

// DefaultCreateFinished executes a basic gorm create call
func DefaultCreateFinished(ctx context.Context, in *Finished, db *gorm.DB) (*Finished, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type FinishedORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FinishedORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadFinished(ctx context.Context, in *Finished, db *gorm.DB) (*Finished, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := FinishedORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(FinishedORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type FinishedORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FinishedORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FinishedORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteFinished(ctx context.Context, in *Finished, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&FinishedORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type FinishedORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FinishedORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteFinishedSet(ctx context.Context, in []*Finished, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&FinishedORM{})).(FinishedORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&FinishedORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&FinishedORM{})).(FinishedORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type FinishedORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Finished, *gorm.DB) (*gorm.DB, error)
}
type FinishedORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Finished, *gorm.DB) error
}

// DefaultStrictUpdateFinished clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateFinished(ctx context.Context, in *Finished, db *gorm.DB) (*Finished, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateFinished")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &FinishedORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(FinishedORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type FinishedORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FinishedORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FinishedORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchFinished executes a basic gorm update call with patch behavior
func DefaultPatchFinished(ctx context.Context, in *Finished, updateMask *field_mask.FieldMask, db *gorm.DB) (*Finished, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Finished
	var err error
	if hook, ok := interface{}(&pbObj).(FinishedWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadFinished(ctx, &Finished{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(FinishedWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskFinished(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(FinishedWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateFinished(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(FinishedWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type FinishedWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Finished, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type FinishedWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Finished, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type FinishedWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Finished, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type FinishedWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Finished, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetFinished executes a bulk gorm update call with patch behavior
func DefaultPatchSetFinished(ctx context.Context, objects []*Finished, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Finished, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Finished, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchFinished(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskFinished patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskFinished(ctx context.Context, patchee *Finished, patcher *Finished, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Finished, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Time" {
			patchee.Time = patcher.Time
			continue
		}
		if f == prefix+"TimeStr" {
			patchee.TimeStr = patcher.TimeStr
			continue
		}
		if f == prefix+"Elapsed" {
			patchee.Elapsed = patcher.Elapsed
			continue
		}
		if f == prefix+"Summary" {
			patchee.Summary = patcher.Summary
			continue
		}
		if f == prefix+"Exit" {
			patchee.Exit = patcher.Exit
			continue
		}
		if f == prefix+"ErrorMsg" {
			patchee.ErrorMsg = patcher.ErrorMsg
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListFinished executes a gorm list call
func DefaultListFinished(ctx context.Context, db *gorm.DB) ([]*Finished, error) {
	in := Finished{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []FinishedORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Finished{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type FinishedORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FinishedORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FinishedORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]FinishedORM) error
}

// DefaultCreateHostStats executes a basic gorm create call
func DefaultCreateHostStats(ctx context.Context, in *HostStats, db *gorm.DB) (*HostStats, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type HostStatsORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HostStatsORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadHostStats(ctx context.Context, in *HostStats, db *gorm.DB) (*HostStats, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := HostStatsORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(HostStatsORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type HostStatsORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HostStatsORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HostStatsORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteHostStats(ctx context.Context, in *HostStats, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&HostStatsORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type HostStatsORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HostStatsORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteHostStatsSet(ctx context.Context, in []*HostStats, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&HostStatsORM{})).(HostStatsORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&HostStatsORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&HostStatsORM{})).(HostStatsORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type HostStatsORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*HostStats, *gorm.DB) (*gorm.DB, error)
}
type HostStatsORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*HostStats, *gorm.DB) error
}

// DefaultStrictUpdateHostStats clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateHostStats(ctx context.Context, in *HostStats, db *gorm.DB) (*HostStats, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateHostStats")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &HostStatsORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type HostStatsORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HostStatsORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HostStatsORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchHostStats executes a basic gorm update call with patch behavior
func DefaultPatchHostStats(ctx context.Context, in *HostStats, updateMask *field_mask.FieldMask, db *gorm.DB) (*HostStats, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj HostStats
	var err error
	if hook, ok := interface{}(&pbObj).(HostStatsWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadHostStats(ctx, &HostStats{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(HostStatsWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskHostStats(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(HostStatsWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateHostStats(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(HostStatsWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type HostStatsWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *HostStats, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type HostStatsWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *HostStats, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type HostStatsWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *HostStats, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type HostStatsWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *HostStats, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetHostStats executes a bulk gorm update call with patch behavior
func DefaultPatchSetHostStats(ctx context.Context, objects []*HostStats, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*HostStats, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*HostStats, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchHostStats(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskHostStats patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskHostStats(ctx context.Context, patchee *HostStats, patcher *HostStats, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*HostStats, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Up" {
			patchee.Up = patcher.Up
			continue
		}
		if f == prefix+"Down" {
			patchee.Down = patcher.Down
			continue
		}
		if f == prefix+"Total" {
			patchee.Total = patcher.Total
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListHostStats executes a gorm list call
func DefaultListHostStats(ctx context.Context, db *gorm.DB) ([]*HostStats, error) {
	in := HostStats{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []HostStatsORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*HostStats{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type HostStatsORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HostStatsORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HostStatsORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]HostStatsORM) error
}
