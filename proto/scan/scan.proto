syntax = "proto3";

package scan;

// DB -----------
import "options/gorm.proto";
import "types/types.proto";
import "google/protobuf/timestamp.proto";

import "host/host.proto";
import "scan/nmap/nmap.proto";
import "scan/result.proto";


// Run - Represents a scan before, after or while being run. 
// This run can be the one of any scanner: fields are not mandatorily used
// by all scanners for all scans, but this type gives a common tree in which
// to store hosts, ports, services, statistics and various other information.
message Run {
  option (gorm.opts).ormable = true;
  // @gotags: display:"ID" readonly:"true"
  gorm.types.UUID Id = 1 [(gorm.field).tag = {type:"uuid" primary_key: true}];
  // @gotags: display:"Created at" readonly:"true"
  google.protobuf.Timestamp CreatedAt = 4;
  // @gotags: display:"Updated at" readonly:"true"
  google.protobuf.Timestamp UpdatedAt = 5;

  // An optional session from which the scan runs.
  gorm.types.UUID SessionId = 8;
  // An optional host (on which is a session/beacon) from which the scan runs.
  gorm.types.UUID HostId = 9;

  // Nmap --------------------------------
  // @gotags: xml:"args,attr" 
  string Args = 10;
  // @gotags: xml:"profile_name,attr" 
  string ProfileName = 11;
  // @gotags: xml:"scanner,attr" 
  string Scanner = 12;
  // @gotags: xml:"startstr,attr" 
  string StartStr = 13;
  // @gotags: xml:"version,attr" 
  string Version = 14;
  // @gotags: xml:"xmloutputversion,attr" 
  string XMLOutputVersion = 15;
  // @gotags: xml:"debugging" 
  Debugging Debugging = 16 [(gorm.field).belongs_to = {}];
  // @gotags: xml:"runstats" 
  Stats Stats = 17 [(gorm.field).belongs_to = {}];
  // @gotags: xml:"scaninfo" 
  Info Info = 18 [(gorm.field).belongs_to = {}];
  // @gotags: xml:"start,attr" 
  int64 Start = 19;
  //google.protobuf.Timestamp Start = 19;
  // @gotags: xml:"verbose" 
  Verbose Verbose = 20 [(gorm.field).belongs_to = {}];
  // @gotags: xml:"host" 
  repeated host.Host Hosts = 21 [(gorm.field).many_to_many = {}];          
  // @gotags: xml:"prescript>script" 
  repeated scan.nmap.Script PreScripts = 22 [(gorm.field).many_to_many = {}];
  // @gotags: xml:"postscript>script" 
  repeated scan.nmap.Script PostScripts = 23 [(gorm.field).many_to_many = {}];
  // @gotags: xml:"target" 
  repeated Target Targets = 24 [(gorm.field).many_to_many = {}];
  // @gotags: xml:"taskbegin" 
  repeated Task Begin = 25 [(gorm.field).many_to_many = {}];
  // @gotags: xml:"taskprogress" 
  repeated TaskProgress Progress = 26 [(gorm.field).many_to_many = {}];
  // @gotags: xml:"taskend" 
  repeated Task End = 27 [(gorm.field).many_to_many = {}];

  repeated string NmapErrors = 28;
  string RawXML = 30;

  // Results - Generally, scans other than Nmap can produce 
  // asynchronous results, which has a few implications:
  // - We can make the scan push its results to caller
  // - We must however build any entity tree ourselves,
  //   with most of the nmap population not done for us,
  //   for things like traceroutes. 
  //
  // The scan.Run has methods and internal logic to deal
  // with populating and/or pushing and/or validating results
  // as they come during a scan.
  repeated Result Results = 40;
}

// Info - A general overview of a Scan, with basic information
// on targeted/found services, protocols and flags.
message Info {
  option (gorm.opts).ormable = true;
  gorm.types.UUID Id = 1 [(gorm.field).tag = {type:"uuid" primary_key: true}];

  // @gotags: xml:"numservices,attr"
  int32 NumServices = 10;
  // @gotags: xml:"protocol,attr"
  string Protocol = 11;
  // @gotags: xml:"scanflags,attr"
  string ScanFlags = 12;
  // @gotags: xml:"services,attr"
  string Services = 13;
  // @gotags: xml:"type,attr"
  string Type = 14;
}

// Verbose - Contains the verbosity level of the scan
message Verbose {
  option (gorm.opts).ormable = true;
  gorm.types.UUID Id = 1 [(gorm.field).tag = {type:"uuid" primary_key: true}];

  // @gotags: xml:"level,attr"
  int32 Level = 10;
}

// Debugging - Contains the debugging level of the scan
message Debugging {
  option (gorm.opts).ormable = true;
  gorm.types.UUID Id = 1 [(gorm.field).tag = {type:"uuid" primary_key: true}];
  // @gotags: xml:"level,attr"
  int32 Level = 10;
}

// Task - Information about a task
message Task {
  option (gorm.opts).ormable = true;
  gorm.types.UUID Id = 1 [(gorm.field).tag = {type:"uuid" primary_key: true}];

  // @gotags: xml:"time,attr"
  google.protobuf.Timestamp Time = 10;
  // @gotags: xml:"task,attr"
  string Task = 11;
  // @gotags: xml:"extrainfo,attr"
  string ExtraInfo = 12;
}

// TaskProgress - Progression of a task
message TaskProgress {
  option (gorm.opts).ormable = true;
  gorm.types.UUID Id = 1 [(gorm.field).tag = {type:"uuid" primary_key: true}];

  // @gotags: xml:"percent,attr"
  float Percent = 10;
  // @gotags: xml:"remaining,attr"
  int32 Remaining = 11;
  // @gotags: xml:"task,attr"
  string Task = 12;
  // @gotags: xml:"etc,attr"
  google.protobuf.Timestamp Etc = 13;
  // @gotags: xml:"time,attr"
  google.protobuf.Timestamp Time = 14;
}

// Target - This type can be used as an Input object to a scan, 
// in which case only the Input fields matter to you 
//
// Represents how the target was specified when passed to nmap,
// its status and the reason of its status. Example:
// <target specification="domain.does.not.exist" status="skipped" reason="invalid"/>
message Target {
  option (gorm.opts).ormable = true;
  gorm.types.UUID Id = 1 [(gorm.field).tag = {type:"uuid" primary_key: true}];

  // Input ---------------------------
  string Address = 5;
  string Domain = 6;
  string Tag = 7;
  uint32 Port = 8;

  // Output (Nmap) -------------------
  // @gotags: xml:"specification,attr"
  string Specification = 10;
  // @gotags: xml:"status,attr"
  string Status = 11;
  // @gotags: xml:"reason,attr"
  string Reason = 12;
}

// Stats - Contains statistics for a Nmap scan
message Stats {
  option (gorm.opts).ormable = true;
  gorm.types.UUID Id = 1 [(gorm.field).tag = {type:"uuid" primary_key: true}];

  // @gotags: xml:"finished"
  Finished Finished = 10;
  // @gotags: xml:"hosts"
  HostStats Hosts = 11;
}

// Finished - Statistics for a Scan after it has run.
message Finished {
  option (gorm.opts).ormable = true;
  gorm.types.UUID Id = 1 [(gorm.field).tag = {type:"uuid" primary_key: true}];

  // @gotags: xml:"time,attr"
  google.protobuf.Timestamp Time = 10;
  // @gotags: xml:"timestr,attr"
  string TimeStr = 11;
  // @gotags: xml:"elapsed,attr"
  float Elapsed = 12;
  // @gotags: xml:"summary,attr"
  string Summary = 13;
  // @gotags: xml:"exit,attr"
  string Exit = 14;
  // @gotags: xml:"errormsg,attr"
  string ErrorMsg = 15;
}

// Host - Contains the amount of up/down hosts and total count
message HostStats {
  option (gorm.opts).ormable = true;
  gorm.types.UUID Id = 1 [(gorm.field).tag = {type:"uuid" primary_key: true}];

  // @gotags: xml:"up,attr"
  int32 Up = 10;
  // @gotags: xml:"down,attr"
  int32 Down = 11;
  // @gotags: xml:"total,attr"
  int32 Total = 12;
}

// message Timestamp {
//   int64 Time = 1;
// }
