// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: credential/login.proto

package credential

import (
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	types "github.com/infobloxopen/protoc-gen-gorm/types"
	network "github.com/maxlandon/aims/proto/gen/go/network"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// LoginStatus - The state of a credential.Login.
type LoginStatus int32

const (
	LoginStatus_Untried         LoginStatus = 0
	LoginStatus_DeniedAccess    LoginStatus = 1
	LoginStatus_Disabled        LoginStatus = 2
	LoginStatus_LockedOut       LoginStatus = 3
	LoginStatus_Sucessful       LoginStatus = 4
	LoginStatus_UnableToConnect LoginStatus = 5
)

// Enum value maps for LoginStatus.
var (
	LoginStatus_name = map[int32]string{
		0: "Untried",
		1: "DeniedAccess",
		2: "Disabled",
		3: "LockedOut",
		4: "Sucessful",
		5: "UnableToConnect",
	}
	LoginStatus_value = map[string]int32{
		"Untried":         0,
		"DeniedAccess":    1,
		"Disabled":        2,
		"LockedOut":       3,
		"Sucessful":       4,
		"UnableToConnect": 5,
	}
)

func (x LoginStatus) Enum() *LoginStatus {
	p := new(LoginStatus)
	*p = x
	return p
}

func (x LoginStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_credential_login_proto_enumTypes[0].Descriptor()
}

func (LoginStatus) Type() protoreflect.EnumType {
	return &file_credential_login_proto_enumTypes[0]
}

func (x LoginStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginStatus.Descriptor instead.
func (LoginStatus) EnumDescriptor() ([]byte, []int) {
	return file_credential_login_proto_rawDescGZIP(), []int{0}
}

// Login - The use of a credential.Core against a service.
type Login struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *types.UUID            `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	// gorm.types.UUID CoreId = 10 [(gorm.field).tag = {type:"uuid" primary_key: true}];
	LastAttemptedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=LastAttemptedAt,proto3" json:"LastAttemptedAt,omitempty"`
	AccessLevel     string                 `protobuf:"bytes,20,opt,name=AccessLevel,proto3" json:"AccessLevel,omitempty"`
	Status          LoginStatus            `protobuf:"varint,21,opt,name=Status,proto3,enum=credential.LoginStatus" json:"Status,omitempty"`
	// Core - The credential.Core used to authenticate to Service
	Core *Core `protobuf:"bytes,13,opt,name=Core,proto3" json:"Core,omitempty"`
	// Service - The service that either accepted the credential.Core as valid, invalid,
	// or on which the credential.Core should be tested to see if it is valid.
	Service *network.Service `protobuf:"bytes,22,opt,name=Service,proto3" json:"Service,omitempty"`
	// The host on which Service runs
	HostId *types.UUID `protobuf:"bytes,23,opt,name=HostId,proto3" json:"HostId,omitempty"`
}

func (x *Login) Reset() {
	*x = Login{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credential_login_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Login) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Login) ProtoMessage() {}

func (x *Login) ProtoReflect() protoreflect.Message {
	mi := &file_credential_login_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Login.ProtoReflect.Descriptor instead.
func (*Login) Descriptor() ([]byte, []int) {
	return file_credential_login_proto_rawDescGZIP(), []int{0}
}

func (x *Login) GetId() *types.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Login) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Login) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Login) GetLastAttemptedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAttemptedAt
	}
	return nil
}

func (x *Login) GetAccessLevel() string {
	if x != nil {
		return x.AccessLevel
	}
	return ""
}

func (x *Login) GetStatus() LoginStatus {
	if x != nil {
		return x.Status
	}
	return LoginStatus_Untried
}

func (x *Login) GetCore() *Core {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *Login) GetService() *network.Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Login) GetHostId() *types.UUID {
	if x != nil {
		return x.HostId
	}
	return nil
}

var File_credential_login_proto protoreflect.FileDescriptor

var file_credential_login_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xec, 0x03, 0x0a, 0x05, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x28, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x4c, 0x61,
	0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x43, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x43,
	0x6f, 0x72, 0x65, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x04, 0x43,
	0x6f, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x22, 0x00, 0x52, 0x07,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a,
	0x08, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64, 0x40, 0x01, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x2a, 0x6d, 0x0a, 0x0b, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4f,
	0x75, 0x74, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x05, 0x42, 0x97, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x0a, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x78, 0x6c, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x2f,
	0x61, 0x69, 0x6d, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0xa2, 0x02, 0x03, 0x43,
	0x58, 0x58, 0xaa, 0x02, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0xca,
	0x02, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0xe2, 0x02, 0x16, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_credential_login_proto_rawDescOnce sync.Once
	file_credential_login_proto_rawDescData = file_credential_login_proto_rawDesc
)

func file_credential_login_proto_rawDescGZIP() []byte {
	file_credential_login_proto_rawDescOnce.Do(func() {
		file_credential_login_proto_rawDescData = protoimpl.X.CompressGZIP(file_credential_login_proto_rawDescData)
	})
	return file_credential_login_proto_rawDescData
}

var file_credential_login_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_credential_login_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_credential_login_proto_goTypes = []interface{}{
	(LoginStatus)(0),              // 0: credential.LoginStatus
	(*Login)(nil),                 // 1: credential.Login
	(*types.UUID)(nil),            // 2: gorm.types.UUID
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
	(*Core)(nil),                  // 4: credential.Core
	(*network.Service)(nil),       // 5: network.Service
}
var file_credential_login_proto_depIdxs = []int32{
	2, // 0: credential.Login.Id:type_name -> gorm.types.UUID
	3, // 1: credential.Login.CreatedAt:type_name -> google.protobuf.Timestamp
	3, // 2: credential.Login.UpdatedAt:type_name -> google.protobuf.Timestamp
	3, // 3: credential.Login.LastAttemptedAt:type_name -> google.protobuf.Timestamp
	0, // 4: credential.Login.Status:type_name -> credential.LoginStatus
	4, // 5: credential.Login.Core:type_name -> credential.Core
	5, // 6: credential.Login.Service:type_name -> network.Service
	2, // 7: credential.Login.HostId:type_name -> gorm.types.UUID
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_credential_login_proto_init() }
func file_credential_login_proto_init() {
	if File_credential_login_proto != nil {
		return
	}
	file_credential_core_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_credential_login_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Login); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_credential_login_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_credential_login_proto_goTypes,
		DependencyIndexes: file_credential_login_proto_depIdxs,
		EnumInfos:         file_credential_login_proto_enumTypes,
		MessageInfos:      file_credential_login_proto_msgTypes,
	}.Build()
	File_credential_login_proto = out.File
	file_credential_login_proto_rawDesc = nil
	file_credential_login_proto_goTypes = nil
	file_credential_login_proto_depIdxs = nil
}
