// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: credential/public.proto

package credential

import (
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	types "github.com/infobloxopen/protoc-gen-gorm/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PublicType - The type of a Public credential. Each of these types might
// trigger different validations when using fetching/creating Private in DB.
type PublicType int32

const (
	// A Username is the default type, such that if the Public.Username is
	// empty, the type will not be able to save itself in DB without
	// explicitely specifying either its .Username field, or by creating a
	// credential.BlankUsername type first.
	PublicType_Username      PublicType = 0
	PublicType_BlankUsername PublicType = 1
	// PublicKey - Some types of Public credentials are cryptographic public keys.
	// Regardless of their cyphers, algos and other tails, they are stored
	// in the .Key field of the credential.Public, and specialized "subtypes"
	// provide methods for manipulating the key, in/for various formats/purposes.
	// As well, various methods are provided to get cipher and fingerprints.
	PublicType_PublicKey PublicType = 3
	// Certificate - An x509 certificate that can contain additional information
	// to an (optional) key (a certificate needs a key for encryption, but can be
	// empty).
	PublicType_Certificate PublicType = 4
)

// Enum value maps for PublicType.
var (
	PublicType_name = map[int32]string{
		0: "Username",
		1: "BlankUsername",
		3: "PublicKey",
		4: "Certificate",
	}
	PublicType_value = map[string]int32{
		"Username":      0,
		"BlankUsername": 1,
		"PublicKey":     3,
		"Certificate":   4,
	}
)

func (x PublicType) Enum() *PublicType {
	p := new(PublicType)
	*p = x
	return p
}

func (x PublicType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicType) Descriptor() protoreflect.EnumDescriptor {
	return file_credential_public_proto_enumTypes[0].Descriptor()
}

func (PublicType) Type() protoreflect.EnumType {
	return &file_credential_public_proto_enumTypes[0]
}

func (x PublicType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicType.Descriptor instead.
func (PublicType) EnumDescriptor() ([]byte, []int) {
	return file_credential_public_proto_rawDescGZIP(), []int{0}
}

// Public - A publicly disclosed credential (ex: username)
type Public struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *types.UUID `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// @gotags: display:"Created at" readonly:"true"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	// @gotags: display:"Updated at" readonly:"true"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	// @gotags: display:"Type" readonly:"true"
	Type PublicType `protobuf:"varint,10,opt,name=Type,proto3,enum=credential.PublicType" json:"Type,omitempty"`
	// @gotags: display:"Username" readonly:"true"
	Username string `protobuf:"bytes,11,opt,name=Username,proto3" json:"Username,omitempty"`
	// Data - When the Public credential is a cryptographic key/certificate
	// rather than a username, the key/certificate data is stored in this field.
	// @gotags: display:"Data" readonly:"true"
	Data string `protobuf:"bytes,12,opt,name=Data,proto3" json:"Data,omitempty"`
	// Claims - Some public credentials, such as JSON Web Tokens,
	// can bear claims, which are a list of key-value pairs. These
	// claims are stored as the bytes of a JSON-marshalled map[string]interface{}
	// A method is provided for credentials to get this map.
	// @gotags: display:"Claims" readonly:"true"
	Claims string `protobuf:"bytes,13,opt,name=Claims,proto3" json:"Claims,omitempty"`
}

func (x *Public) Reset() {
	*x = Public{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credential_public_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Public) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Public) ProtoMessage() {}

func (x *Public) ProtoReflect() protoreflect.Message {
	mi := &file_credential_public_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Public.ProtoReflect.Descriptor instead.
func (*Public) Descriptor() ([]byte, []int) {
	return file_credential_public_proto_rawDescGZIP(), []int{0}
}

func (x *Public) GetId() *types.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Public) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Public) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Public) GetType() PublicType {
	if x != nil {
		return x.Type
	}
	return PublicType_Username
}

func (x *Public) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Public) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Public) GetClaims() string {
	if x != nil {
		return x.Claims
	}
	return ""
}

var File_credential_public_proto protoreflect.FileDescriptor

var file_credential_public_proto_rawDesc = []byte{
	0x0a, 0x17, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x02,
	0x0a, 0x06, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x28, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x2a, 0x4d, 0x0a, 0x0a, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x10, 0x04, 0x42, 0x98, 0x01, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x0b, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x31, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x78, 0x6c, 0x61, 0x6e, 0x64, 0x6f,
	0x6e, 0x2f, 0x61, 0x69, 0x6d, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0xa2, 0x02,
	0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0xca, 0x02, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0xe2, 0x02,
	0x16, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_credential_public_proto_rawDescOnce sync.Once
	file_credential_public_proto_rawDescData = file_credential_public_proto_rawDesc
)

func file_credential_public_proto_rawDescGZIP() []byte {
	file_credential_public_proto_rawDescOnce.Do(func() {
		file_credential_public_proto_rawDescData = protoimpl.X.CompressGZIP(file_credential_public_proto_rawDescData)
	})
	return file_credential_public_proto_rawDescData
}

var file_credential_public_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_credential_public_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_credential_public_proto_goTypes = []interface{}{
	(PublicType)(0),               // 0: credential.PublicType
	(*Public)(nil),                // 1: credential.Public
	(*types.UUID)(nil),            // 2: gorm.types.UUID
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_credential_public_proto_depIdxs = []int32{
	2, // 0: credential.Public.Id:type_name -> gorm.types.UUID
	3, // 1: credential.Public.CreatedAt:type_name -> google.protobuf.Timestamp
	3, // 2: credential.Public.UpdatedAt:type_name -> google.protobuf.Timestamp
	0, // 3: credential.Public.Type:type_name -> credential.PublicType
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_credential_public_proto_init() }
func file_credential_public_proto_init() {
	if File_credential_public_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_credential_public_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Public); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_credential_public_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_credential_public_proto_goTypes,
		DependencyIndexes: file_credential_public_proto_depIdxs,
		EnumInfos:         file_credential_public_proto_enumTypes,
		MessageInfos:      file_credential_public_proto_msgTypes,
	}.Build()
	File_credential_public_proto = out.File
	file_credential_public_proto_rawDesc = nil
	file_credential_public_proto_goTypes = nil
	file_credential_public_proto_depIdxs = nil
}
