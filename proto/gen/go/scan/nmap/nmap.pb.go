// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: scan/nmap/nmap.proto

package nmap

import (
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	types "github.com/infobloxopen/protoc-gen-gorm/types"
	host "github.com/maxlandon/aims/proto/gen/go/host"
	scan "github.com/maxlandon/aims/proto/gen/go/scan"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Run - Represents a Nmap scan before, after or while being run.
// As long as we cannot import db.Host objects (circular imports), we will
// declare a similar NmapScan type in the Go code, and use it when needed.
type Run struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: display:"ID" readonly:"true"
	Id *types.UUID `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty" display:"ID" readonly:"true"`
	// @gotags: display:"Created at" readonly:"true"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" display:"Created at" readonly:"true"`
	// @gotags: display:"Updated at" readonly:"true"
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" display:"Updated at" readonly:"true"` // -------------------------------------
	Args             string                 `protobuf:"bytes,10,opt,name=Args,proto3" json:"Args,omitempty"`
	ProfileName      string                 `protobuf:"bytes,11,opt,name=ProfileName,proto3" json:"ProfileName,omitempty"`
	Scanner          string                 `protobuf:"bytes,12,opt,name=Scanner,proto3" json:"Scanner,omitempty"`
	StartStr         string                 `protobuf:"bytes,13,opt,name=StartStr,proto3" json:"StartStr,omitempty"`
	Version          string                 `protobuf:"bytes,14,opt,name=Version,proto3" json:"Version,omitempty"`
	XMLOutputVersion string                 `protobuf:"bytes,15,opt,name=XMLOutputVersion,proto3" json:"XMLOutputVersion,omitempty"`
	Debugging        *scan.Debugging        `protobuf:"bytes,16,opt,name=Debugging,proto3" json:"Debugging,omitempty"`
	Stats            *scan.Stats            `protobuf:"bytes,17,opt,name=Stats,proto3" json:"Stats,omitempty"`
	ScanInfo         *scan.Info             `protobuf:"bytes,18,opt,name=ScanInfo,proto3" json:"ScanInfo,omitempty"`
	Start            *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=Start,proto3" json:"Start,omitempty"`
	Verbose          *scan.Verbose          `protobuf:"bytes,20,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	Hosts            []*host.Host           `protobuf:"bytes,21,rep,name=Hosts,proto3" json:"Hosts,omitempty"`
	PreScripts       []*scan.NmapScript     `protobuf:"bytes,22,rep,name=PreScripts,proto3" json:"PreScripts,omitempty"`
	PostScripts      []*scan.NmapScript     `protobuf:"bytes,23,rep,name=PostScripts,proto3" json:"PostScripts,omitempty"`
	Targets          []*scan.Target         `protobuf:"bytes,24,rep,name=Targets,proto3" json:"Targets,omitempty"`
	TaskBegin        []*scan.Task           `protobuf:"bytes,25,rep,name=TaskBegin,proto3" json:"TaskBegin,omitempty"`
	TaskProgress     []*scan.TaskProgress   `protobuf:"bytes,26,rep,name=TaskProgress,proto3" json:"TaskProgress,omitempty"`
	TaskEnd          []*scan.Task           `protobuf:"bytes,27,rep,name=TaskEnd,proto3" json:"TaskEnd,omitempty"`
	NmapErrors       []string               `protobuf:"bytes,28,rep,name=NmapErrors,proto3" json:"NmapErrors,omitempty"` // bytes rawXML = 30;
}

func (x *Run) Reset() {
	*x = Run{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_nmap_nmap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Run) ProtoMessage() {}

func (x *Run) ProtoReflect() protoreflect.Message {
	mi := &file_scan_nmap_nmap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Run.ProtoReflect.Descriptor instead.
func (*Run) Descriptor() ([]byte, []int) {
	return file_scan_nmap_nmap_proto_rawDescGZIP(), []int{0}
}

func (x *Run) GetId() *types.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Run) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Run) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Run) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *Run) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *Run) GetScanner() string {
	if x != nil {
		return x.Scanner
	}
	return ""
}

func (x *Run) GetStartStr() string {
	if x != nil {
		return x.StartStr
	}
	return ""
}

func (x *Run) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Run) GetXMLOutputVersion() string {
	if x != nil {
		return x.XMLOutputVersion
	}
	return ""
}

func (x *Run) GetDebugging() *scan.Debugging {
	if x != nil {
		return x.Debugging
	}
	return nil
}

func (x *Run) GetStats() *scan.Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Run) GetScanInfo() *scan.Info {
	if x != nil {
		return x.ScanInfo
	}
	return nil
}

func (x *Run) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Run) GetVerbose() *scan.Verbose {
	if x != nil {
		return x.Verbose
	}
	return nil
}

func (x *Run) GetHosts() []*host.Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *Run) GetPreScripts() []*scan.NmapScript {
	if x != nil {
		return x.PreScripts
	}
	return nil
}

func (x *Run) GetPostScripts() []*scan.NmapScript {
	if x != nil {
		return x.PostScripts
	}
	return nil
}

func (x *Run) GetTargets() []*scan.Target {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *Run) GetTaskBegin() []*scan.Task {
	if x != nil {
		return x.TaskBegin
	}
	return nil
}

func (x *Run) GetTaskProgress() []*scan.TaskProgress {
	if x != nil {
		return x.TaskProgress
	}
	return nil
}

func (x *Run) GetTaskEnd() []*scan.Task {
	if x != nil {
		return x.TaskEnd
	}
	return nil
}

func (x *Run) GetNmapErrors() []string {
	if x != nil {
		return x.NmapErrors
	}
	return nil
}

var File_scan_nmap_nmap_proto protoreflect.FileDescriptor

var file_scan_nmap_nmap_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x6e, 0x6d, 0x61, 0x70, 0x2f, 0x6e, 0x6d, 0x61, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6e, 0x6d, 0x61, 0x70, 0x1a, 0x12, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x68, 0x6f, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xea, 0x07, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x30,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x72,
	0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x42, 0x0e, 0xba, 0xb9,
	0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64, 0x28, 0x01, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x72, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x41, 0x72, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x63, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x58, 0x4d,
	0x4c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x58, 0x4d, 0x4c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x61, 0x6e,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x22, 0x00, 0x52, 0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73,
	0x63, 0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x22,
	0x00, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x53, 0x63, 0x61, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x73, 0x63, 0x61,
	0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x22, 0x00, 0x52, 0x08,
	0x53, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63,
	0x61, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x22, 0x00, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x68, 0x6f, 0x73,
	0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x32, 0x00, 0x52, 0x05,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x61, 0x6e,
	0x2e, 0x4e, 0x6d, 0x61, 0x70, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x06, 0xba, 0xb9, 0x19,
	0x02, 0x32, 0x00, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12,
	0x3a, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x4e, 0x6d, 0x61, 0x70,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x32, 0x00, 0x52, 0x0b,
	0x50, 0x6f, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73,
	0x63, 0x61, 0x6e, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x32, 0x00, 0x52, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x54,
	0x61, 0x73, 0x6b, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x32, 0x00, 0x52, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x3e, 0x0a,
	0x0c, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x32, 0x00, 0x52,
	0x0c, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a,
	0x07, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x64, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x32, 0x00, 0x52, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4e,
	0x6d, 0x61, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x4e, 0x6d, 0x61, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19,
	0x02, 0x08, 0x01, 0x42, 0x77, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6d, 0x61, 0x70, 0x42,
	0x09, 0x4e, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x78, 0x6c, 0x61, 0x6e, 0x64,
	0x6f, 0x6e, 0x2f, 0x61, 0x69, 0x6d, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x6e, 0x6d, 0x61, 0x70, 0xa2, 0x02,
	0x03, 0x4e, 0x58, 0x58, 0xaa, 0x02, 0x04, 0x4e, 0x6d, 0x61, 0x70, 0xca, 0x02, 0x04, 0x4e, 0x6d,
	0x61, 0x70, 0xe2, 0x02, 0x10, 0x4e, 0x6d, 0x61, 0x70, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x04, 0x4e, 0x6d, 0x61, 0x70, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scan_nmap_nmap_proto_rawDescOnce sync.Once
	file_scan_nmap_nmap_proto_rawDescData = file_scan_nmap_nmap_proto_rawDesc
)

func file_scan_nmap_nmap_proto_rawDescGZIP() []byte {
	file_scan_nmap_nmap_proto_rawDescOnce.Do(func() {
		file_scan_nmap_nmap_proto_rawDescData = protoimpl.X.CompressGZIP(file_scan_nmap_nmap_proto_rawDescData)
	})
	return file_scan_nmap_nmap_proto_rawDescData
}

var file_scan_nmap_nmap_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_scan_nmap_nmap_proto_goTypes = []interface{}{
	(*Run)(nil),                   // 0: nmap.Run
	(*types.UUID)(nil),            // 1: gorm.types.UUID
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
	(*scan.Debugging)(nil),        // 3: scan.Debugging
	(*scan.Stats)(nil),            // 4: scan.Stats
	(*scan.Info)(nil),             // 5: scan.Info
	(*scan.Verbose)(nil),          // 6: scan.Verbose
	(*host.Host)(nil),             // 7: host.Host
	(*scan.NmapScript)(nil),       // 8: scan.NmapScript
	(*scan.Target)(nil),           // 9: scan.Target
	(*scan.Task)(nil),             // 10: scan.Task
	(*scan.TaskProgress)(nil),     // 11: scan.TaskProgress
}
var file_scan_nmap_nmap_proto_depIdxs = []int32{
	1,  // 0: nmap.Run.Id:type_name -> gorm.types.UUID
	2,  // 1: nmap.Run.CreatedAt:type_name -> google.protobuf.Timestamp
	2,  // 2: nmap.Run.UpdatedAt:type_name -> google.protobuf.Timestamp
	3,  // 3: nmap.Run.Debugging:type_name -> scan.Debugging
	4,  // 4: nmap.Run.Stats:type_name -> scan.Stats
	5,  // 5: nmap.Run.ScanInfo:type_name -> scan.Info
	2,  // 6: nmap.Run.Start:type_name -> google.protobuf.Timestamp
	6,  // 7: nmap.Run.Verbose:type_name -> scan.Verbose
	7,  // 8: nmap.Run.Hosts:type_name -> host.Host
	8,  // 9: nmap.Run.PreScripts:type_name -> scan.NmapScript
	8,  // 10: nmap.Run.PostScripts:type_name -> scan.NmapScript
	9,  // 11: nmap.Run.Targets:type_name -> scan.Target
	10, // 12: nmap.Run.TaskBegin:type_name -> scan.Task
	11, // 13: nmap.Run.TaskProgress:type_name -> scan.TaskProgress
	10, // 14: nmap.Run.TaskEnd:type_name -> scan.Task
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_scan_nmap_nmap_proto_init() }
func file_scan_nmap_nmap_proto_init() {
	if File_scan_nmap_nmap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scan_nmap_nmap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Run); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scan_nmap_nmap_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scan_nmap_nmap_proto_goTypes,
		DependencyIndexes: file_scan_nmap_nmap_proto_depIdxs,
		MessageInfos:      file_scan_nmap_nmap_proto_msgTypes,
	}.Build()
	File_scan_nmap_nmap_proto = out.File
	file_scan_nmap_nmap_proto_rawDesc = nil
	file_scan_nmap_nmap_proto_goTypes = nil
	file_scan_nmap_nmap_proto_depIdxs = nil
}
