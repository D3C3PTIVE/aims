package nmap

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	types "github.com/infobloxopen/protoc-gen-gorm/types"
	gorm "github.com/jinzhu/gorm"
	host "github.com/maxlandon/aims/proto/gen/go/host"
	scan "github.com/maxlandon/aims/proto/gen/go/scan"
	go_uuid "github.com/satori/go.uuid"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
	time "time"
)

type RunORM struct {
	Args             string
	CreatedAt        *time.Time
	Hosts            []*host.HostORM       `gorm:"foreignkey:Id;association_foreignkey:Id;many2many:run_hosts;jointable_foreignkey:RunId;association_jointable_foreignkey:HostId"`
	Id               go_uuid.UUID          `gorm:"type:uuid;primary_key"`
	PostScripts      []*scan.NmapScriptORM `gorm:"foreignkey:Id;association_foreignkey:Id;many2many:run_post_scripts;jointable_foreignkey:RunId;association_jointable_foreignkey:NmapScriptId"`
	PreScripts       []*scan.NmapScriptORM `gorm:"foreignkey:Id;association_foreignkey:Id;many2many:run_pre_scripts;jointable_foreignkey:RunId;association_jointable_foreignkey:NmapScriptId"`
	ProfileName      string
	Scanner          string
	Start            *time.Time
	StartStr         string
	Targets          []*scan.TargetORM `gorm:"foreignkey:Id;association_foreignkey:Id;many2many:run_targets;jointable_foreignkey:RunId;association_jointable_foreignkey:TargetId"`
	UpdatedAt        *time.Time
	Version          string
	XMLOutputVersion string
}

// TableName overrides the default tablename generated by GORM
func (RunORM) TableName() string {
	return "runs"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Run) ToORM(ctx context.Context) (RunORM, error) {
	to := RunORM{}
	var err error
	if prehook, ok := interface{}(m).(RunWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	to.Args = m.Args
	to.ProfileName = m.ProfileName
	to.Scanner = m.Scanner
	to.StartStr = m.StartStr
	to.Version = m.Version
	to.XMLOutputVersion = m.XMLOutputVersion
	if m.Start != nil {
		t := m.Start.AsTime()
		to.Start = &t
	}
	for _, v := range m.Hosts {
		if v != nil {
			if tempHosts, cErr := v.ToORM(ctx); cErr == nil {
				to.Hosts = append(to.Hosts, &tempHosts)
			} else {
				return to, cErr
			}
		} else {
			to.Hosts = append(to.Hosts, nil)
		}
	}
	for _, v := range m.PreScripts {
		if v != nil {
			if tempPreScripts, cErr := v.ToORM(ctx); cErr == nil {
				to.PreScripts = append(to.PreScripts, &tempPreScripts)
			} else {
				return to, cErr
			}
		} else {
			to.PreScripts = append(to.PreScripts, nil)
		}
	}
	for _, v := range m.PostScripts {
		if v != nil {
			if tempPostScripts, cErr := v.ToORM(ctx); cErr == nil {
				to.PostScripts = append(to.PostScripts, &tempPostScripts)
			} else {
				return to, cErr
			}
		} else {
			to.PostScripts = append(to.PostScripts, nil)
		}
	}
	for _, v := range m.Targets {
		if v != nil {
			if tempTargets, cErr := v.ToORM(ctx); cErr == nil {
				to.Targets = append(to.Targets, &tempTargets)
			} else {
				return to, cErr
			}
		} else {
			to.Targets = append(to.Targets, nil)
		}
	}
	// Repeated type Task is not an ORMable message type
	// Repeated type TaskProgress is not an ORMable message type
	// Repeated type Task is not an ORMable message type
	// Repeated type string is not an ORMable message type
	if posthook, ok := interface{}(m).(RunWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *RunORM) ToPB(ctx context.Context) (Run, error) {
	to := Run{}
	var err error
	if prehook, ok := interface{}(m).(RunWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	to.Args = m.Args
	to.ProfileName = m.ProfileName
	to.Scanner = m.Scanner
	to.StartStr = m.StartStr
	to.Version = m.Version
	to.XMLOutputVersion = m.XMLOutputVersion
	if m.Start != nil {
		to.Start = timestamppb.New(*m.Start)
	}
	for _, v := range m.Hosts {
		if v != nil {
			if tempHosts, cErr := v.ToPB(ctx); cErr == nil {
				to.Hosts = append(to.Hosts, &tempHosts)
			} else {
				return to, cErr
			}
		} else {
			to.Hosts = append(to.Hosts, nil)
		}
	}
	for _, v := range m.PreScripts {
		if v != nil {
			if tempPreScripts, cErr := v.ToPB(ctx); cErr == nil {
				to.PreScripts = append(to.PreScripts, &tempPreScripts)
			} else {
				return to, cErr
			}
		} else {
			to.PreScripts = append(to.PreScripts, nil)
		}
	}
	for _, v := range m.PostScripts {
		if v != nil {
			if tempPostScripts, cErr := v.ToPB(ctx); cErr == nil {
				to.PostScripts = append(to.PostScripts, &tempPostScripts)
			} else {
				return to, cErr
			}
		} else {
			to.PostScripts = append(to.PostScripts, nil)
		}
	}
	for _, v := range m.Targets {
		if v != nil {
			if tempTargets, cErr := v.ToPB(ctx); cErr == nil {
				to.Targets = append(to.Targets, &tempTargets)
			} else {
				return to, cErr
			}
		} else {
			to.Targets = append(to.Targets, nil)
		}
	}
	// Repeated type Task is not an ORMable message type
	// Repeated type TaskProgress is not an ORMable message type
	// Repeated type Task is not an ORMable message type
	// Repeated type string is not an ORMable message type
	if posthook, ok := interface{}(m).(RunWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Run the arg will be the target, the caller the one being converted from

// RunBeforeToORM called before default ToORM code
type RunWithBeforeToORM interface {
	BeforeToORM(context.Context, *RunORM) error
}

// RunAfterToORM called after default ToORM code
type RunWithAfterToORM interface {
	AfterToORM(context.Context, *RunORM) error
}

// RunBeforeToPB called before default ToPB code
type RunWithBeforeToPB interface {
	BeforeToPB(context.Context, *Run) error
}

// RunAfterToPB called after default ToPB code
type RunWithAfterToPB interface {
	AfterToPB(context.Context, *Run) error
}

// DefaultCreateRun executes a basic gorm create call
func DefaultCreateRun(ctx context.Context, in *Run, db *gorm.DB) (*Run, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RunORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RunORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type RunORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RunORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadRun(ctx context.Context, in *Run, db *gorm.DB) (*Run, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(RunORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &RunORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RunORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := RunORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(RunORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type RunORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RunORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RunORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteRun(ctx context.Context, in *Run, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(RunORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&RunORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(RunORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type RunORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RunORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteRunSet(ctx context.Context, in []*Run, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&RunORM{})).(RunORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&RunORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&RunORM{})).(RunORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type RunORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Run, *gorm.DB) (*gorm.DB, error)
}
type RunORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Run, *gorm.DB) error
}

// DefaultStrictUpdateRun clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateRun(ctx context.Context, in *Run, db *gorm.DB) (*Run, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateRun")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &RunORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(RunORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Model(&ormObj).Association("Hosts").Replace(ormObj.Hosts).Error; err != nil {
		return nil, err
	}
	ormObj.Hosts = nil
	if err = db.Model(&ormObj).Association("PostScripts").Replace(ormObj.PostScripts).Error; err != nil {
		return nil, err
	}
	ormObj.PostScripts = nil
	if err = db.Model(&ormObj).Association("PreScripts").Replace(ormObj.PreScripts).Error; err != nil {
		return nil, err
	}
	ormObj.PreScripts = nil
	if err = db.Model(&ormObj).Association("Targets").Replace(ormObj.Targets).Error; err != nil {
		return nil, err
	}
	ormObj.Targets = nil
	if hook, ok := interface{}(&ormObj).(RunORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RunORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type RunORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RunORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RunORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchRun executes a basic gorm update call with patch behavior
func DefaultPatchRun(ctx context.Context, in *Run, updateMask *field_mask.FieldMask, db *gorm.DB) (*Run, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Run
	var err error
	if hook, ok := interface{}(&pbObj).(RunWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadRun(ctx, &Run{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(RunWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskRun(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(RunWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateRun(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(RunWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type RunWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Run, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RunWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Run, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RunWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Run, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RunWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Run, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetRun executes a bulk gorm update call with patch behavior
func DefaultPatchSetRun(ctx context.Context, objects []*Run, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Run, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Run, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchRun(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskRun patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskRun(ctx context.Context, patchee *Run, patcher *Run, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Run, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	var updatedDebugging bool
	var updatedStats bool
	var updatedScanInfo bool
	var updatedStart bool
	var updatedVerbose bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"Args" {
			patchee.Args = patcher.Args
			continue
		}
		if f == prefix+"ProfileName" {
			patchee.ProfileName = patcher.ProfileName
			continue
		}
		if f == prefix+"Scanner" {
			patchee.Scanner = patcher.Scanner
			continue
		}
		if f == prefix+"StartStr" {
			patchee.StartStr = patcher.StartStr
			continue
		}
		if f == prefix+"Version" {
			patchee.Version = patcher.Version
			continue
		}
		if f == prefix+"XMLOutputVersion" {
			patchee.XMLOutputVersion = patcher.XMLOutputVersion
			continue
		}
		if !updatedDebugging && strings.HasPrefix(f, prefix+"Debugging.") {
			if patcher.Debugging == nil {
				patchee.Debugging = nil
				continue
			}
			if patchee.Debugging == nil {
				patchee.Debugging = &scan.Debugging{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"Debugging."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.Debugging, patchee.Debugging, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"Debugging" {
			updatedDebugging = true
			patchee.Debugging = patcher.Debugging
			continue
		}
		if !updatedStats && strings.HasPrefix(f, prefix+"Stats.") {
			if patcher.Stats == nil {
				patchee.Stats = nil
				continue
			}
			if patchee.Stats == nil {
				patchee.Stats = &scan.Stats{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"Stats."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.Stats, patchee.Stats, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"Stats" {
			updatedStats = true
			patchee.Stats = patcher.Stats
			continue
		}
		if !updatedScanInfo && strings.HasPrefix(f, prefix+"ScanInfo.") {
			if patcher.ScanInfo == nil {
				patchee.ScanInfo = nil
				continue
			}
			if patchee.ScanInfo == nil {
				patchee.ScanInfo = &scan.Info{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"ScanInfo."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.ScanInfo, patchee.ScanInfo, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"ScanInfo" {
			updatedScanInfo = true
			patchee.ScanInfo = patcher.ScanInfo
			continue
		}
		if !updatedStart && strings.HasPrefix(f, prefix+"Start.") {
			if patcher.Start == nil {
				patchee.Start = nil
				continue
			}
			if patchee.Start == nil {
				patchee.Start = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"Start."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.Start, patchee.Start, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"Start" {
			updatedStart = true
			patchee.Start = patcher.Start
			continue
		}
		if !updatedVerbose && strings.HasPrefix(f, prefix+"Verbose.") {
			if patcher.Verbose == nil {
				patchee.Verbose = nil
				continue
			}
			if patchee.Verbose == nil {
				patchee.Verbose = &scan.Verbose{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"Verbose."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.Verbose, patchee.Verbose, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"Verbose" {
			updatedVerbose = true
			patchee.Verbose = patcher.Verbose
			continue
		}
		if f == prefix+"Hosts" {
			patchee.Hosts = patcher.Hosts
			continue
		}
		if f == prefix+"PreScripts" {
			patchee.PreScripts = patcher.PreScripts
			continue
		}
		if f == prefix+"PostScripts" {
			patchee.PostScripts = patcher.PostScripts
			continue
		}
		if f == prefix+"Targets" {
			patchee.Targets = patcher.Targets
			continue
		}
		if f == prefix+"TaskBegin" {
			patchee.TaskBegin = patcher.TaskBegin
			continue
		}
		if f == prefix+"TaskProgress" {
			patchee.TaskProgress = patcher.TaskProgress
			continue
		}
		if f == prefix+"TaskEnd" {
			patchee.TaskEnd = patcher.TaskEnd
			continue
		}
		if f == prefix+"NmapErrors" {
			patchee.NmapErrors = patcher.NmapErrors
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListRun executes a gorm list call
func DefaultListRun(ctx context.Context, db *gorm.DB) ([]*Run, error) {
	in := Run{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RunORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &RunORM{}, &Run{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RunORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []RunORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RunORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Run{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type RunORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RunORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RunORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]RunORM) error
}
