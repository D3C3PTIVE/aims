// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: scan/scan.proto

package scan

import (
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	types "github.com/infobloxopen/protoc-gen-gorm/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Info - A general overview of a Scan, with basic information
// on targeted/found services, protocols and flags.
type Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *types.UUID `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// @gotags: xml:"numservices,attr"
	NumServices int32 `protobuf:"varint,10,opt,name=NumServices,proto3" json:"NumServices,omitempty" xml:"numservices,attr"`
	// @gotags: xml:"protocol,attr"
	Protocol string `protobuf:"bytes,11,opt,name=Protocol,proto3" json:"Protocol,omitempty" xml:"protocol,attr"`
	// @gotags: xml:"scanflags,attr"
	ScanFlags string `protobuf:"bytes,12,opt,name=ScanFlags,proto3" json:"ScanFlags,omitempty" xml:"scanflags,attr"`
	// @gotags: xml:"services,attr"
	Services string `protobuf:"bytes,13,opt,name=Services,proto3" json:"Services,omitempty" xml:"services,attr"`
	// @gotags: xml:"type,attr"
	Type string `protobuf:"bytes,14,opt,name=Type,proto3" json:"Type,omitempty" xml:"type,attr"`
}

func (x *Info) Reset() {
	*x = Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info) ProtoMessage() {}

func (x *Info) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Info.ProtoReflect.Descriptor instead.
func (*Info) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{0}
}

func (x *Info) GetId() *types.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Info) GetNumServices() int32 {
	if x != nil {
		return x.NumServices
	}
	return 0
}

func (x *Info) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Info) GetScanFlags() string {
	if x != nil {
		return x.ScanFlags
	}
	return ""
}

func (x *Info) GetServices() string {
	if x != nil {
		return x.Services
	}
	return ""
}

func (x *Info) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Verbose - Contains the verbosity level of the scan
type Verbose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *types.UUID `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// @gotags: xml:"level,attr"
	Level int32 `protobuf:"varint,10,opt,name=Level,proto3" json:"Level,omitempty" xml:"level,attr"`
}

func (x *Verbose) Reset() {
	*x = Verbose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Verbose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verbose) ProtoMessage() {}

func (x *Verbose) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verbose.ProtoReflect.Descriptor instead.
func (*Verbose) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{1}
}

func (x *Verbose) GetId() *types.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Verbose) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

// Debugging - Contains the debugging level of the scan
type Debugging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *types.UUID `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// @gotags: xml:"level,attr"
	Level int32 `protobuf:"varint,10,opt,name=Level,proto3" json:"Level,omitempty" xml:"level,attr"`
}

func (x *Debugging) Reset() {
	*x = Debugging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Debugging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Debugging) ProtoMessage() {}

func (x *Debugging) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Debugging.ProtoReflect.Descriptor instead.
func (*Debugging) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{2}
}

func (x *Debugging) GetId() *types.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Debugging) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

// Task - Information about a task
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *types.UUID `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// @gotags: xml:"time,attr"
	Time *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=Time,proto3" json:"Time,omitempty" xml:"time,attr"`
	// @gotags: xml:"task,attr"
	Task string `protobuf:"bytes,11,opt,name=Task,proto3" json:"Task,omitempty" xml:"task,attr"`
	// @gotags: xml:"extrainfo,attr"
	ExtraInfo string `protobuf:"bytes,12,opt,name=ExtraInfo,proto3" json:"ExtraInfo,omitempty" xml:"extrainfo,attr"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{3}
}

func (x *Task) GetId() *types.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Task) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Task) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *Task) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

// TaskProgress - Progression of a task
type TaskProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *types.UUID `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// @gotags: xml:"percent,attr"
	Percent float32 `protobuf:"fixed32,10,opt,name=Percent,proto3" json:"Percent,omitempty" xml:"percent,attr"`
	// @gotags: xml:"remaining,attr"
	Remaining int32 `protobuf:"varint,11,opt,name=Remaining,proto3" json:"Remaining,omitempty" xml:"remaining,attr"`
	// @gotags: xml:"task,attr"
	Task string `protobuf:"bytes,12,opt,name=Task,proto3" json:"Task,omitempty" xml:"task,attr"`
	// @gotags: xml:"etc,attr"
	Etc *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=Etc,proto3" json:"Etc,omitempty" xml:"etc,attr"`
	// @gotags: xml:"time,attr"
	Time *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=Time,proto3" json:"Time,omitempty" xml:"time,attr"`
}

func (x *TaskProgress) Reset() {
	*x = TaskProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskProgress) ProtoMessage() {}

func (x *TaskProgress) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskProgress.ProtoReflect.Descriptor instead.
func (*TaskProgress) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{4}
}

func (x *TaskProgress) GetId() *types.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TaskProgress) GetPercent() float32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *TaskProgress) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *TaskProgress) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *TaskProgress) GetEtc() *timestamppb.Timestamp {
	if x != nil {
		return x.Etc
	}
	return nil
}

func (x *TaskProgress) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

// Target - Represents a target, how it was specified when passed to nmap,
// its status and the reason of its status. Example:
// <target specification="domain.does.not.exist" status="skipped" reason="invalid"/>
type Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *types.UUID `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// @gotags: xml:"specification,attr"
	Specification string `protobuf:"bytes,10,opt,name=Specification,proto3" json:"Specification,omitempty" xml:"specification,attr"`
	// @gotags: xml:"status,attr"
	Status string `protobuf:"bytes,11,opt,name=Status,proto3" json:"Status,omitempty" xml:"status,attr"`
	// @gotags: xml:"reason,attr"
	Reason string `protobuf:"bytes,12,opt,name=Reason,proto3" json:"Reason,omitempty" xml:"reason,attr"`
}

func (x *Target) Reset() {
	*x = Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{5}
}

func (x *Target) GetId() *types.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Target) GetSpecification() string {
	if x != nil {
		return x.Specification
	}
	return ""
}

func (x *Target) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Target) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Stats - Contains statistics for a Nmap scan
type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *types.UUID `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// @gotags: xml:"finished"
	Finished *Finished `protobuf:"bytes,10,opt,name=Finished,proto3" json:"Finished,omitempty" xml:"finished"`
	// @gotags: xml:"hosts"
	Hosts *HostStats `protobuf:"bytes,11,opt,name=Hosts,proto3" json:"Hosts,omitempty" xml:"hosts"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{6}
}

func (x *Stats) GetId() *types.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Stats) GetFinished() *Finished {
	if x != nil {
		return x.Finished
	}
	return nil
}

func (x *Stats) GetHosts() *HostStats {
	if x != nil {
		return x.Hosts
	}
	return nil
}

// Finished - Statistics for a Scan after it has run.
type Finished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *types.UUID `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// @gotags: xml:"time,attr"
	Time *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=Time,proto3" json:"Time,omitempty" xml:"time,attr"`
	// @gotags: xml:"timestr,attr"
	TimeStr string `protobuf:"bytes,11,opt,name=TimeStr,proto3" json:"TimeStr,omitempty" xml:"timestr,attr"`
	// @gotags: xml:"elapsed,attr"
	Elapsed float32 `protobuf:"fixed32,12,opt,name=Elapsed,proto3" json:"Elapsed,omitempty" xml:"elapsed,attr"`
	// @gotags: xml:"summary,attr"
	Summary string `protobuf:"bytes,13,opt,name=Summary,proto3" json:"Summary,omitempty" xml:"summary,attr"`
	// @gotags: xml:"exit,attr"
	Exit string `protobuf:"bytes,14,opt,name=Exit,proto3" json:"Exit,omitempty" xml:"exit,attr"`
	// @gotags: xml:"errormsg,attr"
	ErrorMsg string `protobuf:"bytes,15,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty" xml:"errormsg,attr"`
}

func (x *Finished) Reset() {
	*x = Finished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Finished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Finished) ProtoMessage() {}

func (x *Finished) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Finished.ProtoReflect.Descriptor instead.
func (*Finished) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{7}
}

func (x *Finished) GetId() *types.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Finished) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Finished) GetTimeStr() string {
	if x != nil {
		return x.TimeStr
	}
	return ""
}

func (x *Finished) GetElapsed() float32 {
	if x != nil {
		return x.Elapsed
	}
	return 0
}

func (x *Finished) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Finished) GetExit() string {
	if x != nil {
		return x.Exit
	}
	return ""
}

func (x *Finished) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// Host - Contains the amount of up/down hosts and total count
type HostStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *types.UUID `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// @gotags: xml:"up,attr"
	Up int32 `protobuf:"varint,10,opt,name=Up,proto3" json:"Up,omitempty" xml:"up,attr"`
	// @gotags: xml:"down,attr"
	Down int32 `protobuf:"varint,11,opt,name=Down,proto3" json:"Down,omitempty" xml:"down,attr"`
	// @gotags: xml:"total,attr"
	Total int32 `protobuf:"varint,12,opt,name=Total,proto3" json:"Total,omitempty" xml:"total,attr"`
}

func (x *HostStats) Reset() {
	*x = HostStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostStats) ProtoMessage() {}

func (x *HostStats) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostStats.ProtoReflect.Descriptor instead.
func (*HostStats) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{8}
}

func (x *HostStats) GetId() *types.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HostStats) GetUp() int32 {
	if x != nil {
		return x.Up
	}
	return 0
}

func (x *HostStats) GetDown() int32 {
	if x != nil {
		return x.Down
	}
	return 0
}

func (x *HostStats) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// NmapScript - Represents a Nmap Scripting Engine Script.
// The inner elements can be an arbitrary collection of Tables and Elements. They can be empty
type NmapScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: display:"ID" readonly:"true"
	Id *types.UUID `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty" display:"ID" readonly:"true"`
	// @gotags: display:"Created at" readonly:"true"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" display:"Created at" readonly:"true"`
	// @gotags: display:"Updated at" readonly:"true"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" display:"Updated at" readonly:"true"`
	// @gotags: xml:"output,attr"
	Output string `protobuf:"bytes,10,opt,name=Output,proto3" json:"Output,omitempty" xml:"output,attr"`
	// @gotags: xml:"elem,omitempty"
	Elements []*Element `protobuf:"bytes,11,rep,name=Elements,proto3" json:"Elements,omitempty" xml:"elem,omitempty"`
	// @gotags: xml:"table,omitempty"
	Tables []*Table `protobuf:"bytes,12,rep,name=Tables,proto3" json:"Tables,omitempty" xml:"table,omitempty"`
}

func (x *NmapScript) Reset() {
	*x = NmapScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NmapScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NmapScript) ProtoMessage() {}

func (x *NmapScript) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NmapScript.ProtoReflect.Descriptor instead.
func (*NmapScript) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{9}
}

func (x *NmapScript) GetId() *types.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NmapScript) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NmapScript) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NmapScript) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *NmapScript) GetElements() []*Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *NmapScript) GetTables() []*Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

// elements - The smallest building block for scripts/tables. Key is optional
type Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: display:"ID" readonly:"true"
	Id *types.UUID `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty" display:"ID" readonly:"true"`
	// @gotags: xml:"key,attr,omitempty"
	Key string `protobuf:"bytes,10,opt,name=Key,proto3" json:"Key,omitempty" xml:"key,attr,omitempty"`
	// @gotags: xml:",innerxml"
	Value string `protobuf:"bytes,11,opt,name=Value,proto3" json:"Value,omitempty" xml:",innerxml"`
}

func (x *Element) Reset() {
	*x = Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Element) ProtoMessage() {}

func (x *Element) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Element.ProtoReflect.Descriptor instead.
func (*Element) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{10}
}

func (x *Element) GetId() *types.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Element) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Element) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Table - An arbitrary collection of (sub-)Tables and Elements. Can be empty
type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: display:"ID" readonly:"true"
	Id *types.UUID `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty" display:"ID" readonly:"true"`
	// @gotags: xml:"key,attr,omitempty"
	Key string `protobuf:"bytes,10,opt,name=Key,proto3" json:"Key,omitempty" xml:"key,attr,omitempty"`
	// @gotags: xml:"table,omitempty"
	Tables []*Table `protobuf:"bytes,11,rep,name=Tables,proto3" json:"Tables,omitempty" xml:"table,omitempty"`
	// @gotags: xml:"elem,omitempty"
	Elements []*Element `protobuf:"bytes,12,rep,name=Elements,proto3" json:"Elements,omitempty" xml:"elem,omitempty"`
}

func (x *Table) Reset() {
	*x = Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{11}
}

func (x *Table) GetId() *types.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Table) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Table) GetTables() []*Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *Table) GetElements() []*Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

// Times - Contains time statistics for a Nmap scan
type Times struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: display:"ID" readonly:"true"
	Id *types.UUID `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty" display:"ID" readonly:"true"`
	// @gotags: xml:"srtt,attr"
	SRTT string `protobuf:"bytes,10,opt,name=SRTT,proto3" json:"SRTT,omitempty" xml:"srtt,attr"`
	// @gotags: xml:"rttvar,attr"
	RTT string `protobuf:"bytes,11,opt,name=RTT,proto3" json:"RTT,omitempty" xml:"rttvar,attr"`
	// @gotags: xml:"to,attr"
	To string `protobuf:"bytes,12,opt,name=To,proto3" json:"To,omitempty" xml:"to,attr"`
}

func (x *Times) Reset() {
	*x = Times{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Times) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Times) ProtoMessage() {}

func (x *Times) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Times.ProtoReflect.Descriptor instead.
func (*Times) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{12}
}

func (x *Times) GetId() *types.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Times) GetSRTT() string {
	if x != nil {
		return x.SRTT
	}
	return ""
}

func (x *Times) GetRTT() string {
	if x != nil {
		return x.RTT
	}
	return ""
}

func (x *Times) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

// Smurf - COntains responses from a smurf attack
type Smurf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: display:"ID" readonly:"true"
	Id *types.UUID `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty" display:"ID" readonly:"true"`
	// @gotags: xml:"responses,attr"
	Responses string `protobuf:"bytes,10,opt,name=Responses,proto3" json:"Responses,omitempty" xml:"responses,attr"`
}

func (x *Smurf) Reset() {
	*x = Smurf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_scan_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Smurf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Smurf) ProtoMessage() {}

func (x *Smurf) ProtoReflect() protoreflect.Message {
	mi := &file_scan_scan_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Smurf.ProtoReflect.Descriptor instead.
func (*Smurf) Descriptor() ([]byte, []int) {
	return file_scan_scan_proto_rawDescGZIP(), []int{13}
}

func (x *Smurf) GetId() *types.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Smurf) GetResponses() string {
	if x != nil {
		return x.Responses
	}
	return ""
}

var File_scan_scan_proto protoreflect.FileDescriptor

var file_scan_scan_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x73, 0x63, 0x61, 0x6e, 0x1a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xcc, 0x01, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x28, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x75,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x4e, 0x75, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63, 0x61, 0x6e,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x63, 0x61,
	0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x59,
	0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x28, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x5b, 0x0a, 0x09, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x28, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x06,
	0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f,
	0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x42, 0x0e, 0xba,
	0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64, 0x28, 0x01, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xf2, 0x01, 0x0a, 0x0c,
	0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a,
	0x0a, 0x08, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64, 0x28, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2c, 0x0a, 0x03, 0x45, 0x74,
	0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x03, 0x45, 0x74, 0x63, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01,
	0x22, 0x98, 0x01, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a,
	0x08, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64, 0x28, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x94, 0x01, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x28, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x63, 0x61, 0x6e,
	0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x08, 0x01, 0x22, 0xf2, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12,
	0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f,
	0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x42, 0x0e, 0xba,
	0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64, 0x28, 0x01, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x45, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x45, 0x78, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x45,
	0x78, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x3a,
	0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x7f, 0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x28, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x55, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x55, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x6f, 0x77, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xa2, 0x02, 0x0a, 0x0a, 0x4e, 0x6d, 0x61,
	0x70, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x28, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x23, 0x0a, 0x06, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x6b, 0x0a,
	0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x28, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xa3, 0x01, 0x0a, 0x05, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x28, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x06, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x08, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01,
	0x22, 0x77, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x28, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x52, 0x54, 0x54, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x52, 0x54, 0x54, 0x12,
	0x10, 0x0a, 0x03, 0x52, 0x54, 0x54, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x52, 0x54,
	0x54, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x54,
	0x6f, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x5f, 0x0a, 0x05, 0x53, 0x6d, 0x75,
	0x72, 0x66, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64, 0x28, 0x01,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x42, 0x72, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x42, 0x09, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6d, 0x61, 0x78, 0x6c, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x2f, 0x61, 0x69, 0x6d, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x63, 0x61, 0x6e,
	0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x04, 0x53, 0x63, 0x61, 0x6e, 0xca, 0x02, 0x04,
	0x53, 0x63, 0x61, 0x6e, 0xe2, 0x02, 0x10, 0x53, 0x63, 0x61, 0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x04, 0x53, 0x63, 0x61, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scan_scan_proto_rawDescOnce sync.Once
	file_scan_scan_proto_rawDescData = file_scan_scan_proto_rawDesc
)

func file_scan_scan_proto_rawDescGZIP() []byte {
	file_scan_scan_proto_rawDescOnce.Do(func() {
		file_scan_scan_proto_rawDescData = protoimpl.X.CompressGZIP(file_scan_scan_proto_rawDescData)
	})
	return file_scan_scan_proto_rawDescData
}

var file_scan_scan_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_scan_scan_proto_goTypes = []interface{}{
	(*Info)(nil),                  // 0: scan.Info
	(*Verbose)(nil),               // 1: scan.Verbose
	(*Debugging)(nil),             // 2: scan.Debugging
	(*Task)(nil),                  // 3: scan.Task
	(*TaskProgress)(nil),          // 4: scan.TaskProgress
	(*Target)(nil),                // 5: scan.Target
	(*Stats)(nil),                 // 6: scan.Stats
	(*Finished)(nil),              // 7: scan.Finished
	(*HostStats)(nil),             // 8: scan.HostStats
	(*NmapScript)(nil),            // 9: scan.NmapScript
	(*Element)(nil),               // 10: scan.Element
	(*Table)(nil),                 // 11: scan.Table
	(*Times)(nil),                 // 12: scan.Times
	(*Smurf)(nil),                 // 13: scan.Smurf
	(*types.UUID)(nil),            // 14: gorm.types.UUID
	(*timestamppb.Timestamp)(nil), // 15: google.protobuf.Timestamp
}
var file_scan_scan_proto_depIdxs = []int32{
	14, // 0: scan.Info.Id:type_name -> gorm.types.UUID
	14, // 1: scan.Verbose.Id:type_name -> gorm.types.UUID
	14, // 2: scan.Debugging.Id:type_name -> gorm.types.UUID
	14, // 3: scan.Task.Id:type_name -> gorm.types.UUID
	15, // 4: scan.Task.Time:type_name -> google.protobuf.Timestamp
	14, // 5: scan.TaskProgress.Id:type_name -> gorm.types.UUID
	15, // 6: scan.TaskProgress.Etc:type_name -> google.protobuf.Timestamp
	15, // 7: scan.TaskProgress.Time:type_name -> google.protobuf.Timestamp
	14, // 8: scan.Target.Id:type_name -> gorm.types.UUID
	14, // 9: scan.Stats.Id:type_name -> gorm.types.UUID
	7,  // 10: scan.Stats.Finished:type_name -> scan.Finished
	8,  // 11: scan.Stats.Hosts:type_name -> scan.HostStats
	14, // 12: scan.Finished.Id:type_name -> gorm.types.UUID
	15, // 13: scan.Finished.Time:type_name -> google.protobuf.Timestamp
	14, // 14: scan.HostStats.Id:type_name -> gorm.types.UUID
	14, // 15: scan.NmapScript.Id:type_name -> gorm.types.UUID
	15, // 16: scan.NmapScript.CreatedAt:type_name -> google.protobuf.Timestamp
	15, // 17: scan.NmapScript.UpdatedAt:type_name -> google.protobuf.Timestamp
	10, // 18: scan.NmapScript.Elements:type_name -> scan.Element
	11, // 19: scan.NmapScript.Tables:type_name -> scan.Table
	14, // 20: scan.Element.Id:type_name -> gorm.types.UUID
	14, // 21: scan.Table.Id:type_name -> gorm.types.UUID
	11, // 22: scan.Table.Tables:type_name -> scan.Table
	10, // 23: scan.Table.Elements:type_name -> scan.Element
	14, // 24: scan.Times.Id:type_name -> gorm.types.UUID
	14, // 25: scan.Smurf.Id:type_name -> gorm.types.UUID
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_scan_scan_proto_init() }
func file_scan_scan_proto_init() {
	if File_scan_scan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scan_scan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Verbose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Debugging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Finished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NmapScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Times); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_scan_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Smurf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scan_scan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scan_scan_proto_goTypes,
		DependencyIndexes: file_scan_scan_proto_depIdxs,
		MessageInfos:      file_scan_scan_proto_msgTypes,
	}.Build()
	File_scan_scan_proto = out.File
	file_scan_scan_proto_rawDesc = nil
	file_scan_scan_proto_goTypes = nil
	file_scan_scan_proto_depIdxs = nil
}
