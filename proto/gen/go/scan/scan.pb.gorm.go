package scan

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	types "github.com/infobloxopen/protoc-gen-gorm/types"
	gorm "github.com/jinzhu/gorm"
	go_uuid "github.com/satori/go.uuid"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
	time "time"
)

type TargetORM struct {
	Id            go_uuid.UUID `gorm:"type:uuid;primary_key"`
	Reason        string
	Specification string
	Status        string
}

// TableName overrides the default tablename generated by GORM
func (TargetORM) TableName() string {
	return "targets"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Target) ToORM(ctx context.Context) (TargetORM, error) {
	to := TargetORM{}
	var err error
	if prehook, ok := interface{}(m).(TargetWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	to.Specification = m.Specification
	to.Status = m.Status
	to.Reason = m.Reason
	if posthook, ok := interface{}(m).(TargetWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TargetORM) ToPB(ctx context.Context) (Target, error) {
	to := Target{}
	var err error
	if prehook, ok := interface{}(m).(TargetWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	to.Specification = m.Specification
	to.Status = m.Status
	to.Reason = m.Reason
	if posthook, ok := interface{}(m).(TargetWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Target the arg will be the target, the caller the one being converted from

// TargetBeforeToORM called before default ToORM code
type TargetWithBeforeToORM interface {
	BeforeToORM(context.Context, *TargetORM) error
}

// TargetAfterToORM called after default ToORM code
type TargetWithAfterToORM interface {
	AfterToORM(context.Context, *TargetORM) error
}

// TargetBeforeToPB called before default ToPB code
type TargetWithBeforeToPB interface {
	BeforeToPB(context.Context, *Target) error
}

// TargetAfterToPB called after default ToPB code
type TargetWithAfterToPB interface {
	AfterToPB(context.Context, *Target) error
}

type NmapScriptORM struct {
	CreatedAt *time.Time
	Elements  []*ElementORM `gorm:"foreignkey:NmapScriptId;association_foreignkey:Id"`
	Id        go_uuid.UUID  `gorm:"type:uuid;primary_key"`
	Output    string
	Tables    []*TableORM `gorm:"foreignkey:NmapScriptId;association_foreignkey:Id"`
	UpdatedAt *time.Time
}

// TableName overrides the default tablename generated by GORM
func (NmapScriptORM) TableName() string {
	return "nmap_scripts"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *NmapScript) ToORM(ctx context.Context) (NmapScriptORM, error) {
	to := NmapScriptORM{}
	var err error
	if prehook, ok := interface{}(m).(NmapScriptWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	to.Output = m.Output
	for _, v := range m.Elements {
		if v != nil {
			if tempElements, cErr := v.ToORM(ctx); cErr == nil {
				to.Elements = append(to.Elements, &tempElements)
			} else {
				return to, cErr
			}
		} else {
			to.Elements = append(to.Elements, nil)
		}
	}
	for _, v := range m.Tables {
		if v != nil {
			if tempTables, cErr := v.ToORM(ctx); cErr == nil {
				to.Tables = append(to.Tables, &tempTables)
			} else {
				return to, cErr
			}
		} else {
			to.Tables = append(to.Tables, nil)
		}
	}
	if posthook, ok := interface{}(m).(NmapScriptWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *NmapScriptORM) ToPB(ctx context.Context) (NmapScript, error) {
	to := NmapScript{}
	var err error
	if prehook, ok := interface{}(m).(NmapScriptWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	to.Output = m.Output
	for _, v := range m.Elements {
		if v != nil {
			if tempElements, cErr := v.ToPB(ctx); cErr == nil {
				to.Elements = append(to.Elements, &tempElements)
			} else {
				return to, cErr
			}
		} else {
			to.Elements = append(to.Elements, nil)
		}
	}
	for _, v := range m.Tables {
		if v != nil {
			if tempTables, cErr := v.ToPB(ctx); cErr == nil {
				to.Tables = append(to.Tables, &tempTables)
			} else {
				return to, cErr
			}
		} else {
			to.Tables = append(to.Tables, nil)
		}
	}
	if posthook, ok := interface{}(m).(NmapScriptWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type NmapScript the arg will be the target, the caller the one being converted from

// NmapScriptBeforeToORM called before default ToORM code
type NmapScriptWithBeforeToORM interface {
	BeforeToORM(context.Context, *NmapScriptORM) error
}

// NmapScriptAfterToORM called after default ToORM code
type NmapScriptWithAfterToORM interface {
	AfterToORM(context.Context, *NmapScriptORM) error
}

// NmapScriptBeforeToPB called before default ToPB code
type NmapScriptWithBeforeToPB interface {
	BeforeToPB(context.Context, *NmapScript) error
}

// NmapScriptAfterToPB called after default ToPB code
type NmapScriptWithAfterToPB interface {
	AfterToPB(context.Context, *NmapScript) error
}

type ElementORM struct {
	Id           go_uuid.UUID `gorm:"type:uuid;primary_key"`
	Key          string
	NmapScriptId *go_uuid.UUID
	TableId      *go_uuid.UUID
	Value        string
}

// TableName overrides the default tablename generated by GORM
func (ElementORM) TableName() string {
	return "elements"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Element) ToORM(ctx context.Context) (ElementORM, error) {
	to := ElementORM{}
	var err error
	if prehook, ok := interface{}(m).(ElementWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	to.Key = m.Key
	to.Value = m.Value
	if posthook, ok := interface{}(m).(ElementWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ElementORM) ToPB(ctx context.Context) (Element, error) {
	to := Element{}
	var err error
	if prehook, ok := interface{}(m).(ElementWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	to.Key = m.Key
	to.Value = m.Value
	if posthook, ok := interface{}(m).(ElementWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Element the arg will be the target, the caller the one being converted from

// ElementBeforeToORM called before default ToORM code
type ElementWithBeforeToORM interface {
	BeforeToORM(context.Context, *ElementORM) error
}

// ElementAfterToORM called after default ToORM code
type ElementWithAfterToORM interface {
	AfterToORM(context.Context, *ElementORM) error
}

// ElementBeforeToPB called before default ToPB code
type ElementWithBeforeToPB interface {
	BeforeToPB(context.Context, *Element) error
}

// ElementAfterToPB called after default ToPB code
type ElementWithAfterToPB interface {
	AfterToPB(context.Context, *Element) error
}

type TableORM struct {
	Elements     []*ElementORM `gorm:"foreignkey:TableId;association_foreignkey:Id"`
	Id           go_uuid.UUID  `gorm:"type:uuid;primary_key"`
	Key          string
	NmapScriptId *go_uuid.UUID
	TableId      *go_uuid.UUID
	Tables       []*TableORM `gorm:"foreignkey:TableId;association_foreignkey:Id"`
}

// TableName overrides the default tablename generated by GORM
func (TableORM) TableName() string {
	return "tables"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Table) ToORM(ctx context.Context) (TableORM, error) {
	to := TableORM{}
	var err error
	if prehook, ok := interface{}(m).(TableWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	to.Key = m.Key
	for _, v := range m.Tables {
		if v != nil {
			if tempTables, cErr := v.ToORM(ctx); cErr == nil {
				to.Tables = append(to.Tables, &tempTables)
			} else {
				return to, cErr
			}
		} else {
			to.Tables = append(to.Tables, nil)
		}
	}
	for _, v := range m.Elements {
		if v != nil {
			if tempElements, cErr := v.ToORM(ctx); cErr == nil {
				to.Elements = append(to.Elements, &tempElements)
			} else {
				return to, cErr
			}
		} else {
			to.Elements = append(to.Elements, nil)
		}
	}
	if posthook, ok := interface{}(m).(TableWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TableORM) ToPB(ctx context.Context) (Table, error) {
	to := Table{}
	var err error
	if prehook, ok := interface{}(m).(TableWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	to.Key = m.Key
	for _, v := range m.Tables {
		if v != nil {
			if tempTables, cErr := v.ToPB(ctx); cErr == nil {
				to.Tables = append(to.Tables, &tempTables)
			} else {
				return to, cErr
			}
		} else {
			to.Tables = append(to.Tables, nil)
		}
	}
	for _, v := range m.Elements {
		if v != nil {
			if tempElements, cErr := v.ToPB(ctx); cErr == nil {
				to.Elements = append(to.Elements, &tempElements)
			} else {
				return to, cErr
			}
		} else {
			to.Elements = append(to.Elements, nil)
		}
	}
	if posthook, ok := interface{}(m).(TableWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Table the arg will be the target, the caller the one being converted from

// TableBeforeToORM called before default ToORM code
type TableWithBeforeToORM interface {
	BeforeToORM(context.Context, *TableORM) error
}

// TableAfterToORM called after default ToORM code
type TableWithAfterToORM interface {
	AfterToORM(context.Context, *TableORM) error
}

// TableBeforeToPB called before default ToPB code
type TableWithBeforeToPB interface {
	BeforeToPB(context.Context, *Table) error
}

// TableAfterToPB called after default ToPB code
type TableWithAfterToPB interface {
	AfterToPB(context.Context, *Table) error
}

type TimesORM struct {
	Id   go_uuid.UUID `gorm:"type:uuid;primary_key"`
	RTT  string
	SRTT string
	To   string
}

// TableName overrides the default tablename generated by GORM
func (TimesORM) TableName() string {
	return "times"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Times) ToORM(ctx context.Context) (TimesORM, error) {
	to := TimesORM{}
	var err error
	if prehook, ok := interface{}(m).(TimesWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	to.SRTT = m.SRTT
	to.RTT = m.RTT
	to.To = m.To
	if posthook, ok := interface{}(m).(TimesWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TimesORM) ToPB(ctx context.Context) (Times, error) {
	to := Times{}
	var err error
	if prehook, ok := interface{}(m).(TimesWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	to.SRTT = m.SRTT
	to.RTT = m.RTT
	to.To = m.To
	if posthook, ok := interface{}(m).(TimesWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Times the arg will be the target, the caller the one being converted from

// TimesBeforeToORM called before default ToORM code
type TimesWithBeforeToORM interface {
	BeforeToORM(context.Context, *TimesORM) error
}

// TimesAfterToORM called after default ToORM code
type TimesWithAfterToORM interface {
	AfterToORM(context.Context, *TimesORM) error
}

// TimesBeforeToPB called before default ToPB code
type TimesWithBeforeToPB interface {
	BeforeToPB(context.Context, *Times) error
}

// TimesAfterToPB called after default ToPB code
type TimesWithAfterToPB interface {
	AfterToPB(context.Context, *Times) error
}

type SmurfORM struct {
	Id        go_uuid.UUID `gorm:"type:uuid;primary_key"`
	Responses string
}

// TableName overrides the default tablename generated by GORM
func (SmurfORM) TableName() string {
	return "smurves"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Smurf) ToORM(ctx context.Context) (SmurfORM, error) {
	to := SmurfORM{}
	var err error
	if prehook, ok := interface{}(m).(SmurfWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	to.Responses = m.Responses
	if posthook, ok := interface{}(m).(SmurfWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *SmurfORM) ToPB(ctx context.Context) (Smurf, error) {
	to := Smurf{}
	var err error
	if prehook, ok := interface{}(m).(SmurfWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	to.Responses = m.Responses
	if posthook, ok := interface{}(m).(SmurfWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Smurf the arg will be the target, the caller the one being converted from

// SmurfBeforeToORM called before default ToORM code
type SmurfWithBeforeToORM interface {
	BeforeToORM(context.Context, *SmurfORM) error
}

// SmurfAfterToORM called after default ToORM code
type SmurfWithAfterToORM interface {
	AfterToORM(context.Context, *SmurfORM) error
}

// SmurfBeforeToPB called before default ToPB code
type SmurfWithBeforeToPB interface {
	BeforeToPB(context.Context, *Smurf) error
}

// SmurfAfterToPB called after default ToPB code
type SmurfWithAfterToPB interface {
	AfterToPB(context.Context, *Smurf) error
}

// DefaultCreateTarget executes a basic gorm create call
func DefaultCreateTarget(ctx context.Context, in *Target, db *gorm.DB) (*Target, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TargetORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadTarget(ctx context.Context, in *Target, db *gorm.DB) (*Target, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &TargetORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := TargetORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(TargetORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type TargetORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteTarget(ctx context.Context, in *Target, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&TargetORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type TargetORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteTargetSet(ctx context.Context, in []*Target, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&TargetORM{})).(TargetORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&TargetORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&TargetORM{})).(TargetORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type TargetORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Target, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Target, *gorm.DB) error
}

// DefaultStrictUpdateTarget clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTarget(ctx context.Context, in *Target, db *gorm.DB) (*Target, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateTarget")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &TargetORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type TargetORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchTarget executes a basic gorm update call with patch behavior
func DefaultPatchTarget(ctx context.Context, in *Target, updateMask *field_mask.FieldMask, db *gorm.DB) (*Target, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Target
	var err error
	if hook, ok := interface{}(&pbObj).(TargetWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadTarget(ctx, &Target{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(TargetWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskTarget(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(TargetWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateTarget(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(TargetWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type TargetWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Target, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TargetWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Target, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TargetWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Target, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TargetWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Target, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetTarget executes a bulk gorm update call with patch behavior
func DefaultPatchSetTarget(ctx context.Context, objects []*Target, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Target, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Target, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchTarget(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskTarget patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTarget(ctx context.Context, patchee *Target, patcher *Target, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Target, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Specification" {
			patchee.Specification = patcher.Specification
			continue
		}
		if f == prefix+"Status" {
			patchee.Status = patcher.Status
			continue
		}
		if f == prefix+"Reason" {
			patchee.Reason = patcher.Reason
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTarget executes a gorm list call
func DefaultListTarget(ctx context.Context, db *gorm.DB) ([]*Target, error) {
	in := Target{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &TargetORM{}, &Target{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []TargetORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Target{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TargetORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]TargetORM) error
}

// DefaultCreateNmapScript executes a basic gorm create call
func DefaultCreateNmapScript(ctx context.Context, in *NmapScript, db *gorm.DB) (*NmapScript, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type NmapScriptORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadNmapScript(ctx context.Context, in *NmapScript, db *gorm.DB) (*NmapScript, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &NmapScriptORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := NmapScriptORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(NmapScriptORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type NmapScriptORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteNmapScript(ctx context.Context, in *NmapScript, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&NmapScriptORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type NmapScriptORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteNmapScriptSet(ctx context.Context, in []*NmapScript, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&NmapScriptORM{})).(NmapScriptORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&NmapScriptORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&NmapScriptORM{})).(NmapScriptORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type NmapScriptORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*NmapScript, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*NmapScript, *gorm.DB) error
}

// DefaultStrictUpdateNmapScript clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateNmapScript(ctx context.Context, in *NmapScript, db *gorm.DB) (*NmapScript, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateNmapScript")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &NmapScriptORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterElements := ElementORM{}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	filterElements.NmapScriptId = new(go_uuid.UUID)
	*filterElements.NmapScriptId = ormObj.Id
	if err = db.Where(filterElements).Delete(ElementORM{}).Error; err != nil {
		return nil, err
	}
	filterTables := TableORM{}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	filterTables.NmapScriptId = new(go_uuid.UUID)
	*filterTables.NmapScriptId = ormObj.Id
	if err = db.Where(filterTables).Delete(TableORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type NmapScriptORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchNmapScript executes a basic gorm update call with patch behavior
func DefaultPatchNmapScript(ctx context.Context, in *NmapScript, updateMask *field_mask.FieldMask, db *gorm.DB) (*NmapScript, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj NmapScript
	var err error
	if hook, ok := interface{}(&pbObj).(NmapScriptWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadNmapScript(ctx, &NmapScript{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(NmapScriptWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskNmapScript(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(NmapScriptWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateNmapScript(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(NmapScriptWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type NmapScriptWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *NmapScript, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *NmapScript, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *NmapScript, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *NmapScript, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetNmapScript executes a bulk gorm update call with patch behavior
func DefaultPatchSetNmapScript(ctx context.Context, objects []*NmapScript, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*NmapScript, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*NmapScript, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchNmapScript(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskNmapScript patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskNmapScript(ctx context.Context, patchee *NmapScript, patcher *NmapScript, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*NmapScript, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"Output" {
			patchee.Output = patcher.Output
			continue
		}
		if f == prefix+"Elements" {
			patchee.Elements = patcher.Elements
			continue
		}
		if f == prefix+"Tables" {
			patchee.Tables = patcher.Tables
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListNmapScript executes a gorm list call
func DefaultListNmapScript(ctx context.Context, db *gorm.DB) ([]*NmapScript, error) {
	in := NmapScript{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &NmapScriptORM{}, &NmapScript{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []NmapScriptORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*NmapScript{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type NmapScriptORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]NmapScriptORM) error
}

// DefaultCreateElement executes a basic gorm create call
func DefaultCreateElement(ctx context.Context, in *Element, db *gorm.DB) (*Element, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ElementORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadElement(ctx context.Context, in *Element, db *gorm.DB) (*Element, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &ElementORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ElementORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ElementORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ElementORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteElement(ctx context.Context, in *Element, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ElementORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ElementORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteElementSet(ctx context.Context, in []*Element, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ElementORM{})).(ElementORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ElementORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ElementORM{})).(ElementORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ElementORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Element, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Element, *gorm.DB) error
}

// DefaultStrictUpdateElement clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateElement(ctx context.Context, in *Element, db *gorm.DB) (*Element, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateElement")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ElementORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ElementORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchElement executes a basic gorm update call with patch behavior
func DefaultPatchElement(ctx context.Context, in *Element, updateMask *field_mask.FieldMask, db *gorm.DB) (*Element, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Element
	var err error
	if hook, ok := interface{}(&pbObj).(ElementWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadElement(ctx, &Element{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ElementWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskElement(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ElementWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateElement(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ElementWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ElementWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Element, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ElementWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Element, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ElementWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Element, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ElementWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Element, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetElement executes a bulk gorm update call with patch behavior
func DefaultPatchSetElement(ctx context.Context, objects []*Element, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Element, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Element, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchElement(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskElement patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskElement(ctx context.Context, patchee *Element, patcher *Element, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Element, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Key" {
			patchee.Key = patcher.Key
			continue
		}
		if f == prefix+"Value" {
			patchee.Value = patcher.Value
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListElement executes a gorm list call
func DefaultListElement(ctx context.Context, db *gorm.DB) ([]*Element, error) {
	in := Element{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &ElementORM{}, &Element{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ElementORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Element{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ElementORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]ElementORM) error
}

// DefaultCreateTable executes a basic gorm create call
func DefaultCreateTable(ctx context.Context, in *Table, db *gorm.DB) (*Table, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TableORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadTable(ctx context.Context, in *Table, db *gorm.DB) (*Table, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &TableORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := TableORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(TableORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type TableORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteTable(ctx context.Context, in *Table, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&TableORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type TableORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteTableSet(ctx context.Context, in []*Table, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&TableORM{})).(TableORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&TableORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&TableORM{})).(TableORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type TableORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Table, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Table, *gorm.DB) error
}

// DefaultStrictUpdateTable clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTable(ctx context.Context, in *Table, db *gorm.DB) (*Table, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateTable")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &TableORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterElements := ElementORM{}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	filterElements.TableId = new(go_uuid.UUID)
	*filterElements.TableId = ormObj.Id
	if err = db.Where(filterElements).Delete(ElementORM{}).Error; err != nil {
		return nil, err
	}
	filterTables := TableORM{}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	filterTables.TableId = new(go_uuid.UUID)
	*filterTables.TableId = ormObj.Id
	if err = db.Where(filterTables).Delete(TableORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type TableORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchTable executes a basic gorm update call with patch behavior
func DefaultPatchTable(ctx context.Context, in *Table, updateMask *field_mask.FieldMask, db *gorm.DB) (*Table, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Table
	var err error
	if hook, ok := interface{}(&pbObj).(TableWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadTable(ctx, &Table{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(TableWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskTable(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(TableWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateTable(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(TableWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type TableWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Table, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TableWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Table, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TableWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Table, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TableWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Table, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetTable executes a bulk gorm update call with patch behavior
func DefaultPatchSetTable(ctx context.Context, objects []*Table, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Table, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Table, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchTable(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskTable patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTable(ctx context.Context, patchee *Table, patcher *Table, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Table, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Key" {
			patchee.Key = patcher.Key
			continue
		}
		if f == prefix+"Tables" {
			patchee.Tables = patcher.Tables
			continue
		}
		if f == prefix+"Elements" {
			patchee.Elements = patcher.Elements
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTable executes a gorm list call
func DefaultListTable(ctx context.Context, db *gorm.DB) ([]*Table, error) {
	in := Table{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &TableORM{}, &Table{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []TableORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Table{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TableORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]TableORM) error
}

// DefaultCreateTimes executes a basic gorm create call
func DefaultCreateTimes(ctx context.Context, in *Times, db *gorm.DB) (*Times, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TimesORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TimesORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadTimes(ctx context.Context, in *Times, db *gorm.DB) (*Times, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &TimesORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := TimesORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(TimesORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type TimesORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TimesORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TimesORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteTimes(ctx context.Context, in *Times, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&TimesORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type TimesORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TimesORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteTimesSet(ctx context.Context, in []*Times, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&TimesORM{})).(TimesORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&TimesORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&TimesORM{})).(TimesORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type TimesORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Times, *gorm.DB) (*gorm.DB, error)
}
type TimesORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Times, *gorm.DB) error
}

// DefaultStrictUpdateTimes clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTimes(ctx context.Context, in *Times, db *gorm.DB) (*Times, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateTimes")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &TimesORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(TimesORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type TimesORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TimesORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TimesORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchTimes executes a basic gorm update call with patch behavior
func DefaultPatchTimes(ctx context.Context, in *Times, updateMask *field_mask.FieldMask, db *gorm.DB) (*Times, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Times
	var err error
	if hook, ok := interface{}(&pbObj).(TimesWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadTimes(ctx, &Times{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(TimesWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskTimes(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(TimesWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateTimes(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(TimesWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type TimesWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Times, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TimesWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Times, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TimesWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Times, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TimesWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Times, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetTimes executes a bulk gorm update call with patch behavior
func DefaultPatchSetTimes(ctx context.Context, objects []*Times, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Times, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Times, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchTimes(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskTimes patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTimes(ctx context.Context, patchee *Times, patcher *Times, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Times, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"SRTT" {
			patchee.SRTT = patcher.SRTT
			continue
		}
		if f == prefix+"RTT" {
			patchee.RTT = patcher.RTT
			continue
		}
		if f == prefix+"To" {
			patchee.To = patcher.To
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTimes executes a gorm list call
func DefaultListTimes(ctx context.Context, db *gorm.DB) ([]*Times, error) {
	in := Times{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &TimesORM{}, &Times{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []TimesORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Times{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TimesORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TimesORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TimesORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]TimesORM) error
}

// DefaultCreateSmurf executes a basic gorm create call
func DefaultCreateSmurf(ctx context.Context, in *Smurf, db *gorm.DB) (*Smurf, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type SmurfORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadSmurf(ctx context.Context, in *Smurf, db *gorm.DB) (*Smurf, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &SmurfORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := SmurfORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(SmurfORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type SmurfORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteSmurf(ctx context.Context, in *Smurf, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&SmurfORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type SmurfORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteSmurfSet(ctx context.Context, in []*Smurf, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&SmurfORM{})).(SmurfORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&SmurfORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&SmurfORM{})).(SmurfORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type SmurfORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Smurf, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Smurf, *gorm.DB) error
}

// DefaultStrictUpdateSmurf clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateSmurf(ctx context.Context, in *Smurf, db *gorm.DB) (*Smurf, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateSmurf")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &SmurfORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type SmurfORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchSmurf executes a basic gorm update call with patch behavior
func DefaultPatchSmurf(ctx context.Context, in *Smurf, updateMask *field_mask.FieldMask, db *gorm.DB) (*Smurf, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Smurf
	var err error
	if hook, ok := interface{}(&pbObj).(SmurfWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadSmurf(ctx, &Smurf{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(SmurfWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskSmurf(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(SmurfWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateSmurf(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(SmurfWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type SmurfWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Smurf, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SmurfWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Smurf, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SmurfWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Smurf, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SmurfWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Smurf, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetSmurf executes a bulk gorm update call with patch behavior
func DefaultPatchSetSmurf(ctx context.Context, objects []*Smurf, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Smurf, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Smurf, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchSmurf(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskSmurf patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskSmurf(ctx context.Context, patchee *Smurf, patcher *Smurf, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Smurf, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Responses" {
			patchee.Responses = patcher.Responses
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListSmurf executes a gorm list call
func DefaultListSmurf(ctx context.Context, db *gorm.DB) ([]*Smurf, error) {
	in := Smurf{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &SmurfORM{}, &Smurf{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []SmurfORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Smurf{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type SmurfORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]SmurfORM) error
}
