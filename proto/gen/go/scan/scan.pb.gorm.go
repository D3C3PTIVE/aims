package scan

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	types "github.com/infobloxopen/protoc-gen-gorm/types"
	gorm "github.com/jinzhu/gorm"
	go_uuid "github.com/satori/go.uuid"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
	time "time"
)

type InfoORM struct {
	Id          go_uuid.UUID `gorm:"type:uuid;primary_key"`
	NumServices int32
	Protocol    string
	ScanFlags   string
	Services    string
	Type        string
}

// TableName overrides the default tablename generated by GORM
func (InfoORM) TableName() string {
	return "infos"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Info) ToORM(ctx context.Context) (InfoORM, error) {
	to := InfoORM{}
	var err error
	if prehook, ok := interface{}(m).(InfoWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	to.NumServices = m.NumServices
	to.Protocol = m.Protocol
	to.ScanFlags = m.ScanFlags
	to.Services = m.Services
	to.Type = m.Type
	if posthook, ok := interface{}(m).(InfoWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *InfoORM) ToPB(ctx context.Context) (Info, error) {
	to := Info{}
	var err error
	if prehook, ok := interface{}(m).(InfoWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	to.NumServices = m.NumServices
	to.Protocol = m.Protocol
	to.ScanFlags = m.ScanFlags
	to.Services = m.Services
	to.Type = m.Type
	if posthook, ok := interface{}(m).(InfoWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Info the arg will be the target, the caller the one being converted from

// InfoBeforeToORM called before default ToORM code
type InfoWithBeforeToORM interface {
	BeforeToORM(context.Context, *InfoORM) error
}

// InfoAfterToORM called after default ToORM code
type InfoWithAfterToORM interface {
	AfterToORM(context.Context, *InfoORM) error
}

// InfoBeforeToPB called before default ToPB code
type InfoWithBeforeToPB interface {
	BeforeToPB(context.Context, *Info) error
}

// InfoAfterToPB called after default ToPB code
type InfoWithAfterToPB interface {
	AfterToPB(context.Context, *Info) error
}

type VerboseORM struct {
	Id    go_uuid.UUID `gorm:"type:uuid;primary_key"`
	Level int32
}

// TableName overrides the default tablename generated by GORM
func (VerboseORM) TableName() string {
	return "verboses"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Verbose) ToORM(ctx context.Context) (VerboseORM, error) {
	to := VerboseORM{}
	var err error
	if prehook, ok := interface{}(m).(VerboseWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	to.Level = m.Level
	if posthook, ok := interface{}(m).(VerboseWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *VerboseORM) ToPB(ctx context.Context) (Verbose, error) {
	to := Verbose{}
	var err error
	if prehook, ok := interface{}(m).(VerboseWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	to.Level = m.Level
	if posthook, ok := interface{}(m).(VerboseWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Verbose the arg will be the target, the caller the one being converted from

// VerboseBeforeToORM called before default ToORM code
type VerboseWithBeforeToORM interface {
	BeforeToORM(context.Context, *VerboseORM) error
}

// VerboseAfterToORM called after default ToORM code
type VerboseWithAfterToORM interface {
	AfterToORM(context.Context, *VerboseORM) error
}

// VerboseBeforeToPB called before default ToPB code
type VerboseWithBeforeToPB interface {
	BeforeToPB(context.Context, *Verbose) error
}

// VerboseAfterToPB called after default ToPB code
type VerboseWithAfterToPB interface {
	AfterToPB(context.Context, *Verbose) error
}

type DebuggingORM struct {
	Id    go_uuid.UUID `gorm:"type:uuid;primary_key"`
	Level int32
}

// TableName overrides the default tablename generated by GORM
func (DebuggingORM) TableName() string {
	return "debuggings"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Debugging) ToORM(ctx context.Context) (DebuggingORM, error) {
	to := DebuggingORM{}
	var err error
	if prehook, ok := interface{}(m).(DebuggingWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	to.Level = m.Level
	if posthook, ok := interface{}(m).(DebuggingWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *DebuggingORM) ToPB(ctx context.Context) (Debugging, error) {
	to := Debugging{}
	var err error
	if prehook, ok := interface{}(m).(DebuggingWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	to.Level = m.Level
	if posthook, ok := interface{}(m).(DebuggingWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Debugging the arg will be the target, the caller the one being converted from

// DebuggingBeforeToORM called before default ToORM code
type DebuggingWithBeforeToORM interface {
	BeforeToORM(context.Context, *DebuggingORM) error
}

// DebuggingAfterToORM called after default ToORM code
type DebuggingWithAfterToORM interface {
	AfterToORM(context.Context, *DebuggingORM) error
}

// DebuggingBeforeToPB called before default ToPB code
type DebuggingWithBeforeToPB interface {
	BeforeToPB(context.Context, *Debugging) error
}

// DebuggingAfterToPB called after default ToPB code
type DebuggingWithAfterToPB interface {
	AfterToPB(context.Context, *Debugging) error
}

type TaskORM struct {
	ExtraInfo string
	Id        go_uuid.UUID `gorm:"type:uuid;primary_key"`
	Task      string
	Time      *time.Time
}

// TableName overrides the default tablename generated by GORM
func (TaskORM) TableName() string {
	return "tasks"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Task) ToORM(ctx context.Context) (TaskORM, error) {
	to := TaskORM{}
	var err error
	if prehook, ok := interface{}(m).(TaskWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	if m.Time != nil {
		t := m.Time.AsTime()
		to.Time = &t
	}
	to.Task = m.Task
	to.ExtraInfo = m.ExtraInfo
	if posthook, ok := interface{}(m).(TaskWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TaskORM) ToPB(ctx context.Context) (Task, error) {
	to := Task{}
	var err error
	if prehook, ok := interface{}(m).(TaskWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	if m.Time != nil {
		to.Time = timestamppb.New(*m.Time)
	}
	to.Task = m.Task
	to.ExtraInfo = m.ExtraInfo
	if posthook, ok := interface{}(m).(TaskWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Task the arg will be the target, the caller the one being converted from

// TaskBeforeToORM called before default ToORM code
type TaskWithBeforeToORM interface {
	BeforeToORM(context.Context, *TaskORM) error
}

// TaskAfterToORM called after default ToORM code
type TaskWithAfterToORM interface {
	AfterToORM(context.Context, *TaskORM) error
}

// TaskBeforeToPB called before default ToPB code
type TaskWithBeforeToPB interface {
	BeforeToPB(context.Context, *Task) error
}

// TaskAfterToPB called after default ToPB code
type TaskWithAfterToPB interface {
	AfterToPB(context.Context, *Task) error
}

type TaskProgressORM struct {
	Etc       *time.Time
	Id        go_uuid.UUID `gorm:"type:uuid;primary_key"`
	Percent   float32
	Remaining int32
	Task      string
	Time      *time.Time
}

// TableName overrides the default tablename generated by GORM
func (TaskProgressORM) TableName() string {
	return "task_progresses"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *TaskProgress) ToORM(ctx context.Context) (TaskProgressORM, error) {
	to := TaskProgressORM{}
	var err error
	if prehook, ok := interface{}(m).(TaskProgressWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	to.Percent = m.Percent
	to.Remaining = m.Remaining
	to.Task = m.Task
	if m.Etc != nil {
		t := m.Etc.AsTime()
		to.Etc = &t
	}
	if m.Time != nil {
		t := m.Time.AsTime()
		to.Time = &t
	}
	if posthook, ok := interface{}(m).(TaskProgressWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TaskProgressORM) ToPB(ctx context.Context) (TaskProgress, error) {
	to := TaskProgress{}
	var err error
	if prehook, ok := interface{}(m).(TaskProgressWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	to.Percent = m.Percent
	to.Remaining = m.Remaining
	to.Task = m.Task
	if m.Etc != nil {
		to.Etc = timestamppb.New(*m.Etc)
	}
	if m.Time != nil {
		to.Time = timestamppb.New(*m.Time)
	}
	if posthook, ok := interface{}(m).(TaskProgressWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type TaskProgress the arg will be the target, the caller the one being converted from

// TaskProgressBeforeToORM called before default ToORM code
type TaskProgressWithBeforeToORM interface {
	BeforeToORM(context.Context, *TaskProgressORM) error
}

// TaskProgressAfterToORM called after default ToORM code
type TaskProgressWithAfterToORM interface {
	AfterToORM(context.Context, *TaskProgressORM) error
}

// TaskProgressBeforeToPB called before default ToPB code
type TaskProgressWithBeforeToPB interface {
	BeforeToPB(context.Context, *TaskProgress) error
}

// TaskProgressAfterToPB called after default ToPB code
type TaskProgressWithAfterToPB interface {
	AfterToPB(context.Context, *TaskProgress) error
}

type TargetORM struct {
	Id            go_uuid.UUID `gorm:"type:uuid;primary_key"`
	Reason        string
	Specification string
	Status        string
}

// TableName overrides the default tablename generated by GORM
func (TargetORM) TableName() string {
	return "targets"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Target) ToORM(ctx context.Context) (TargetORM, error) {
	to := TargetORM{}
	var err error
	if prehook, ok := interface{}(m).(TargetWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	to.Specification = m.Specification
	to.Status = m.Status
	to.Reason = m.Reason
	if posthook, ok := interface{}(m).(TargetWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TargetORM) ToPB(ctx context.Context) (Target, error) {
	to := Target{}
	var err error
	if prehook, ok := interface{}(m).(TargetWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	to.Specification = m.Specification
	to.Status = m.Status
	to.Reason = m.Reason
	if posthook, ok := interface{}(m).(TargetWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Target the arg will be the target, the caller the one being converted from

// TargetBeforeToORM called before default ToORM code
type TargetWithBeforeToORM interface {
	BeforeToORM(context.Context, *TargetORM) error
}

// TargetAfterToORM called after default ToORM code
type TargetWithAfterToORM interface {
	AfterToORM(context.Context, *TargetORM) error
}

// TargetBeforeToPB called before default ToPB code
type TargetWithBeforeToPB interface {
	BeforeToPB(context.Context, *Target) error
}

// TargetAfterToPB called after default ToPB code
type TargetWithAfterToPB interface {
	AfterToPB(context.Context, *Target) error
}

type StatsORM struct {
	Finished *FinishedORM  `gorm:"foreignkey:StatsId;association_foreignkey:Id"`
	Hosts    *HostStatsORM `gorm:"foreignkey:StatsId;association_foreignkey:Id"`
	Id       go_uuid.UUID  `gorm:"type:uuid;primary_key"`
}

// TableName overrides the default tablename generated by GORM
func (StatsORM) TableName() string {
	return "stats"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Stats) ToORM(ctx context.Context) (StatsORM, error) {
	to := StatsORM{}
	var err error
	if prehook, ok := interface{}(m).(StatsWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	if m.Finished != nil {
		tempFinished, err := m.Finished.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Finished = &tempFinished
	}
	if m.Hosts != nil {
		tempHosts, err := m.Hosts.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Hosts = &tempHosts
	}
	if posthook, ok := interface{}(m).(StatsWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *StatsORM) ToPB(ctx context.Context) (Stats, error) {
	to := Stats{}
	var err error
	if prehook, ok := interface{}(m).(StatsWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	if m.Finished != nil {
		tempFinished, err := m.Finished.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Finished = &tempFinished
	}
	if m.Hosts != nil {
		tempHosts, err := m.Hosts.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Hosts = &tempHosts
	}
	if posthook, ok := interface{}(m).(StatsWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Stats the arg will be the target, the caller the one being converted from

// StatsBeforeToORM called before default ToORM code
type StatsWithBeforeToORM interface {
	BeforeToORM(context.Context, *StatsORM) error
}

// StatsAfterToORM called after default ToORM code
type StatsWithAfterToORM interface {
	AfterToORM(context.Context, *StatsORM) error
}

// StatsBeforeToPB called before default ToPB code
type StatsWithBeforeToPB interface {
	BeforeToPB(context.Context, *Stats) error
}

// StatsAfterToPB called after default ToPB code
type StatsWithAfterToPB interface {
	AfterToPB(context.Context, *Stats) error
}

type FinishedORM struct {
	Elapsed  float32
	ErrorMsg string
	Exit     string
	Id       go_uuid.UUID `gorm:"type:uuid;primary_key"`
	StatsId  *go_uuid.UUID
	Summary  string
	Time     *time.Time
	TimeStr  string
}

// TableName overrides the default tablename generated by GORM
func (FinishedORM) TableName() string {
	return "finisheds"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Finished) ToORM(ctx context.Context) (FinishedORM, error) {
	to := FinishedORM{}
	var err error
	if prehook, ok := interface{}(m).(FinishedWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	if m.Time != nil {
		t := m.Time.AsTime()
		to.Time = &t
	}
	to.TimeStr = m.TimeStr
	to.Elapsed = m.Elapsed
	to.Summary = m.Summary
	to.Exit = m.Exit
	to.ErrorMsg = m.ErrorMsg
	if posthook, ok := interface{}(m).(FinishedWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *FinishedORM) ToPB(ctx context.Context) (Finished, error) {
	to := Finished{}
	var err error
	if prehook, ok := interface{}(m).(FinishedWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	if m.Time != nil {
		to.Time = timestamppb.New(*m.Time)
	}
	to.TimeStr = m.TimeStr
	to.Elapsed = m.Elapsed
	to.Summary = m.Summary
	to.Exit = m.Exit
	to.ErrorMsg = m.ErrorMsg
	if posthook, ok := interface{}(m).(FinishedWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Finished the arg will be the target, the caller the one being converted from

// FinishedBeforeToORM called before default ToORM code
type FinishedWithBeforeToORM interface {
	BeforeToORM(context.Context, *FinishedORM) error
}

// FinishedAfterToORM called after default ToORM code
type FinishedWithAfterToORM interface {
	AfterToORM(context.Context, *FinishedORM) error
}

// FinishedBeforeToPB called before default ToPB code
type FinishedWithBeforeToPB interface {
	BeforeToPB(context.Context, *Finished) error
}

// FinishedAfterToPB called after default ToPB code
type FinishedWithAfterToPB interface {
	AfterToPB(context.Context, *Finished) error
}

type HostStatsORM struct {
	Down    int32
	Id      go_uuid.UUID `gorm:"type:uuid;primary_key"`
	StatsId *go_uuid.UUID
	Total   int32
	Up      int32
}

// TableName overrides the default tablename generated by GORM
func (HostStatsORM) TableName() string {
	return "host_stats"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *HostStats) ToORM(ctx context.Context) (HostStatsORM, error) {
	to := HostStatsORM{}
	var err error
	if prehook, ok := interface{}(m).(HostStatsWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	to.Up = m.Up
	to.Down = m.Down
	to.Total = m.Total
	if posthook, ok := interface{}(m).(HostStatsWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *HostStatsORM) ToPB(ctx context.Context) (HostStats, error) {
	to := HostStats{}
	var err error
	if prehook, ok := interface{}(m).(HostStatsWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	to.Up = m.Up
	to.Down = m.Down
	to.Total = m.Total
	if posthook, ok := interface{}(m).(HostStatsWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type HostStats the arg will be the target, the caller the one being converted from

// HostStatsBeforeToORM called before default ToORM code
type HostStatsWithBeforeToORM interface {
	BeforeToORM(context.Context, *HostStatsORM) error
}

// HostStatsAfterToORM called after default ToORM code
type HostStatsWithAfterToORM interface {
	AfterToORM(context.Context, *HostStatsORM) error
}

// HostStatsBeforeToPB called before default ToPB code
type HostStatsWithBeforeToPB interface {
	BeforeToPB(context.Context, *HostStats) error
}

// HostStatsAfterToPB called after default ToPB code
type HostStatsWithAfterToPB interface {
	AfterToPB(context.Context, *HostStats) error
}

type NmapScriptORM struct {
	CreatedAt *time.Time
	Elements  []*ElementORM `gorm:"foreignkey:NmapScriptId;association_foreignkey:Id"`
	Id        go_uuid.UUID  `gorm:"type:uuid;primary_key"`
	Output    string
	Tables    []*TableORM `gorm:"foreignkey:NmapScriptId;association_foreignkey:Id"`
	UpdatedAt *time.Time
}

// TableName overrides the default tablename generated by GORM
func (NmapScriptORM) TableName() string {
	return "nmap_scripts"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *NmapScript) ToORM(ctx context.Context) (NmapScriptORM, error) {
	to := NmapScriptORM{}
	var err error
	if prehook, ok := interface{}(m).(NmapScriptWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	to.Output = m.Output
	for _, v := range m.Elements {
		if v != nil {
			if tempElements, cErr := v.ToORM(ctx); cErr == nil {
				to.Elements = append(to.Elements, &tempElements)
			} else {
				return to, cErr
			}
		} else {
			to.Elements = append(to.Elements, nil)
		}
	}
	for _, v := range m.Tables {
		if v != nil {
			if tempTables, cErr := v.ToORM(ctx); cErr == nil {
				to.Tables = append(to.Tables, &tempTables)
			} else {
				return to, cErr
			}
		} else {
			to.Tables = append(to.Tables, nil)
		}
	}
	if posthook, ok := interface{}(m).(NmapScriptWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *NmapScriptORM) ToPB(ctx context.Context) (NmapScript, error) {
	to := NmapScript{}
	var err error
	if prehook, ok := interface{}(m).(NmapScriptWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	to.Output = m.Output
	for _, v := range m.Elements {
		if v != nil {
			if tempElements, cErr := v.ToPB(ctx); cErr == nil {
				to.Elements = append(to.Elements, &tempElements)
			} else {
				return to, cErr
			}
		} else {
			to.Elements = append(to.Elements, nil)
		}
	}
	for _, v := range m.Tables {
		if v != nil {
			if tempTables, cErr := v.ToPB(ctx); cErr == nil {
				to.Tables = append(to.Tables, &tempTables)
			} else {
				return to, cErr
			}
		} else {
			to.Tables = append(to.Tables, nil)
		}
	}
	if posthook, ok := interface{}(m).(NmapScriptWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type NmapScript the arg will be the target, the caller the one being converted from

// NmapScriptBeforeToORM called before default ToORM code
type NmapScriptWithBeforeToORM interface {
	BeforeToORM(context.Context, *NmapScriptORM) error
}

// NmapScriptAfterToORM called after default ToORM code
type NmapScriptWithAfterToORM interface {
	AfterToORM(context.Context, *NmapScriptORM) error
}

// NmapScriptBeforeToPB called before default ToPB code
type NmapScriptWithBeforeToPB interface {
	BeforeToPB(context.Context, *NmapScript) error
}

// NmapScriptAfterToPB called after default ToPB code
type NmapScriptWithAfterToPB interface {
	AfterToPB(context.Context, *NmapScript) error
}

type ElementORM struct {
	Id           go_uuid.UUID `gorm:"type:uuid;primary_key"`
	Key          string
	NmapScriptId *go_uuid.UUID
	TableId      *go_uuid.UUID
	Value        string
}

// TableName overrides the default tablename generated by GORM
func (ElementORM) TableName() string {
	return "elements"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Element) ToORM(ctx context.Context) (ElementORM, error) {
	to := ElementORM{}
	var err error
	if prehook, ok := interface{}(m).(ElementWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	to.Key = m.Key
	to.Value = m.Value
	if posthook, ok := interface{}(m).(ElementWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ElementORM) ToPB(ctx context.Context) (Element, error) {
	to := Element{}
	var err error
	if prehook, ok := interface{}(m).(ElementWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	to.Key = m.Key
	to.Value = m.Value
	if posthook, ok := interface{}(m).(ElementWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Element the arg will be the target, the caller the one being converted from

// ElementBeforeToORM called before default ToORM code
type ElementWithBeforeToORM interface {
	BeforeToORM(context.Context, *ElementORM) error
}

// ElementAfterToORM called after default ToORM code
type ElementWithAfterToORM interface {
	AfterToORM(context.Context, *ElementORM) error
}

// ElementBeforeToPB called before default ToPB code
type ElementWithBeforeToPB interface {
	BeforeToPB(context.Context, *Element) error
}

// ElementAfterToPB called after default ToPB code
type ElementWithAfterToPB interface {
	AfterToPB(context.Context, *Element) error
}

type TableORM struct {
	Elements     []*ElementORM `gorm:"foreignkey:TableId;association_foreignkey:Id"`
	Id           go_uuid.UUID  `gorm:"type:uuid;primary_key"`
	Key          string
	NmapScriptId *go_uuid.UUID
	TableId      *go_uuid.UUID
	Tables       []*TableORM `gorm:"foreignkey:TableId;association_foreignkey:Id"`
}

// TableName overrides the default tablename generated by GORM
func (TableORM) TableName() string {
	return "tables"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Table) ToORM(ctx context.Context) (TableORM, error) {
	to := TableORM{}
	var err error
	if prehook, ok := interface{}(m).(TableWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	to.Key = m.Key
	for _, v := range m.Tables {
		if v != nil {
			if tempTables, cErr := v.ToORM(ctx); cErr == nil {
				to.Tables = append(to.Tables, &tempTables)
			} else {
				return to, cErr
			}
		} else {
			to.Tables = append(to.Tables, nil)
		}
	}
	for _, v := range m.Elements {
		if v != nil {
			if tempElements, cErr := v.ToORM(ctx); cErr == nil {
				to.Elements = append(to.Elements, &tempElements)
			} else {
				return to, cErr
			}
		} else {
			to.Elements = append(to.Elements, nil)
		}
	}
	if posthook, ok := interface{}(m).(TableWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TableORM) ToPB(ctx context.Context) (Table, error) {
	to := Table{}
	var err error
	if prehook, ok := interface{}(m).(TableWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	to.Key = m.Key
	for _, v := range m.Tables {
		if v != nil {
			if tempTables, cErr := v.ToPB(ctx); cErr == nil {
				to.Tables = append(to.Tables, &tempTables)
			} else {
				return to, cErr
			}
		} else {
			to.Tables = append(to.Tables, nil)
		}
	}
	for _, v := range m.Elements {
		if v != nil {
			if tempElements, cErr := v.ToPB(ctx); cErr == nil {
				to.Elements = append(to.Elements, &tempElements)
			} else {
				return to, cErr
			}
		} else {
			to.Elements = append(to.Elements, nil)
		}
	}
	if posthook, ok := interface{}(m).(TableWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Table the arg will be the target, the caller the one being converted from

// TableBeforeToORM called before default ToORM code
type TableWithBeforeToORM interface {
	BeforeToORM(context.Context, *TableORM) error
}

// TableAfterToORM called after default ToORM code
type TableWithAfterToORM interface {
	AfterToORM(context.Context, *TableORM) error
}

// TableBeforeToPB called before default ToPB code
type TableWithBeforeToPB interface {
	BeforeToPB(context.Context, *Table) error
}

// TableAfterToPB called after default ToPB code
type TableWithAfterToPB interface {
	AfterToPB(context.Context, *Table) error
}

type TimesORM struct {
	Id   go_uuid.UUID `gorm:"type:uuid;primary_key"`
	RTT  string
	SRTT string
	To   string
}

// TableName overrides the default tablename generated by GORM
func (TimesORM) TableName() string {
	return "times"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Times) ToORM(ctx context.Context) (TimesORM, error) {
	to := TimesORM{}
	var err error
	if prehook, ok := interface{}(m).(TimesWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	to.SRTT = m.SRTT
	to.RTT = m.RTT
	to.To = m.To
	if posthook, ok := interface{}(m).(TimesWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TimesORM) ToPB(ctx context.Context) (Times, error) {
	to := Times{}
	var err error
	if prehook, ok := interface{}(m).(TimesWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	to.SRTT = m.SRTT
	to.RTT = m.RTT
	to.To = m.To
	if posthook, ok := interface{}(m).(TimesWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Times the arg will be the target, the caller the one being converted from

// TimesBeforeToORM called before default ToORM code
type TimesWithBeforeToORM interface {
	BeforeToORM(context.Context, *TimesORM) error
}

// TimesAfterToORM called after default ToORM code
type TimesWithAfterToORM interface {
	AfterToORM(context.Context, *TimesORM) error
}

// TimesBeforeToPB called before default ToPB code
type TimesWithBeforeToPB interface {
	BeforeToPB(context.Context, *Times) error
}

// TimesAfterToPB called after default ToPB code
type TimesWithAfterToPB interface {
	AfterToPB(context.Context, *Times) error
}

type SmurfORM struct {
	Id        go_uuid.UUID `gorm:"type:uuid;primary_key"`
	Responses string
}

// TableName overrides the default tablename generated by GORM
func (SmurfORM) TableName() string {
	return "smurves"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Smurf) ToORM(ctx context.Context) (SmurfORM, error) {
	to := SmurfORM{}
	var err error
	if prehook, ok := interface{}(m).(SmurfWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	to.Responses = m.Responses
	if posthook, ok := interface{}(m).(SmurfWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *SmurfORM) ToPB(ctx context.Context) (Smurf, error) {
	to := Smurf{}
	var err error
	if prehook, ok := interface{}(m).(SmurfWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	to.Responses = m.Responses
	if posthook, ok := interface{}(m).(SmurfWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Smurf the arg will be the target, the caller the one being converted from

// SmurfBeforeToORM called before default ToORM code
type SmurfWithBeforeToORM interface {
	BeforeToORM(context.Context, *SmurfORM) error
}

// SmurfAfterToORM called after default ToORM code
type SmurfWithAfterToORM interface {
	AfterToORM(context.Context, *SmurfORM) error
}

// SmurfBeforeToPB called before default ToPB code
type SmurfWithBeforeToPB interface {
	BeforeToPB(context.Context, *Smurf) error
}

// SmurfAfterToPB called after default ToPB code
type SmurfWithAfterToPB interface {
	AfterToPB(context.Context, *Smurf) error
}

// DefaultCreateInfo executes a basic gorm create call
func DefaultCreateInfo(ctx context.Context, in *Info, db *gorm.DB) (*Info, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type InfoORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InfoORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadInfo(ctx context.Context, in *Info, db *gorm.DB) (*Info, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &InfoORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := InfoORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(InfoORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type InfoORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InfoORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InfoORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteInfo(ctx context.Context, in *Info, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&InfoORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type InfoORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InfoORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteInfoSet(ctx context.Context, in []*Info, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&InfoORM{})).(InfoORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&InfoORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&InfoORM{})).(InfoORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type InfoORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Info, *gorm.DB) (*gorm.DB, error)
}
type InfoORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Info, *gorm.DB) error
}

// DefaultStrictUpdateInfo clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateInfo(ctx context.Context, in *Info, db *gorm.DB) (*Info, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateInfo")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &InfoORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(InfoORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type InfoORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InfoORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InfoORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchInfo executes a basic gorm update call with patch behavior
func DefaultPatchInfo(ctx context.Context, in *Info, updateMask *field_mask.FieldMask, db *gorm.DB) (*Info, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Info
	var err error
	if hook, ok := interface{}(&pbObj).(InfoWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadInfo(ctx, &Info{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(InfoWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskInfo(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(InfoWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateInfo(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(InfoWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type InfoWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Info, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type InfoWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Info, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type InfoWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Info, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type InfoWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Info, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetInfo executes a bulk gorm update call with patch behavior
func DefaultPatchSetInfo(ctx context.Context, objects []*Info, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Info, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Info, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchInfo(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskInfo patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskInfo(ctx context.Context, patchee *Info, patcher *Info, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Info, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"NumServices" {
			patchee.NumServices = patcher.NumServices
			continue
		}
		if f == prefix+"Protocol" {
			patchee.Protocol = patcher.Protocol
			continue
		}
		if f == prefix+"ScanFlags" {
			patchee.ScanFlags = patcher.ScanFlags
			continue
		}
		if f == prefix+"Services" {
			patchee.Services = patcher.Services
			continue
		}
		if f == prefix+"Type" {
			patchee.Type = patcher.Type
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListInfo executes a gorm list call
func DefaultListInfo(ctx context.Context, db *gorm.DB) ([]*Info, error) {
	in := Info{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &InfoORM{}, &Info{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []InfoORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InfoORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Info{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type InfoORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InfoORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InfoORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]InfoORM) error
}

// DefaultCreateVerbose executes a basic gorm create call
func DefaultCreateVerbose(ctx context.Context, in *Verbose, db *gorm.DB) (*Verbose, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type VerboseORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type VerboseORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadVerbose(ctx context.Context, in *Verbose, db *gorm.DB) (*Verbose, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &VerboseORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := VerboseORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(VerboseORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type VerboseORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type VerboseORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type VerboseORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteVerbose(ctx context.Context, in *Verbose, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&VerboseORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type VerboseORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type VerboseORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteVerboseSet(ctx context.Context, in []*Verbose, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&VerboseORM{})).(VerboseORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&VerboseORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&VerboseORM{})).(VerboseORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type VerboseORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Verbose, *gorm.DB) (*gorm.DB, error)
}
type VerboseORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Verbose, *gorm.DB) error
}

// DefaultStrictUpdateVerbose clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateVerbose(ctx context.Context, in *Verbose, db *gorm.DB) (*Verbose, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateVerbose")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &VerboseORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(VerboseORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type VerboseORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type VerboseORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type VerboseORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchVerbose executes a basic gorm update call with patch behavior
func DefaultPatchVerbose(ctx context.Context, in *Verbose, updateMask *field_mask.FieldMask, db *gorm.DB) (*Verbose, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Verbose
	var err error
	if hook, ok := interface{}(&pbObj).(VerboseWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadVerbose(ctx, &Verbose{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(VerboseWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskVerbose(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(VerboseWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateVerbose(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(VerboseWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type VerboseWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Verbose, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type VerboseWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Verbose, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type VerboseWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Verbose, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type VerboseWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Verbose, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetVerbose executes a bulk gorm update call with patch behavior
func DefaultPatchSetVerbose(ctx context.Context, objects []*Verbose, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Verbose, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Verbose, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchVerbose(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskVerbose patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskVerbose(ctx context.Context, patchee *Verbose, patcher *Verbose, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Verbose, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Level" {
			patchee.Level = patcher.Level
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListVerbose executes a gorm list call
func DefaultListVerbose(ctx context.Context, db *gorm.DB) ([]*Verbose, error) {
	in := Verbose{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &VerboseORM{}, &Verbose{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []VerboseORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(VerboseORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Verbose{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type VerboseORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type VerboseORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type VerboseORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]VerboseORM) error
}

// DefaultCreateDebugging executes a basic gorm create call
func DefaultCreateDebugging(ctx context.Context, in *Debugging, db *gorm.DB) (*Debugging, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type DebuggingORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DebuggingORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadDebugging(ctx context.Context, in *Debugging, db *gorm.DB) (*Debugging, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &DebuggingORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := DebuggingORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(DebuggingORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type DebuggingORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DebuggingORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DebuggingORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteDebugging(ctx context.Context, in *Debugging, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&DebuggingORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type DebuggingORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DebuggingORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteDebuggingSet(ctx context.Context, in []*Debugging, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&DebuggingORM{})).(DebuggingORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&DebuggingORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&DebuggingORM{})).(DebuggingORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type DebuggingORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Debugging, *gorm.DB) (*gorm.DB, error)
}
type DebuggingORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Debugging, *gorm.DB) error
}

// DefaultStrictUpdateDebugging clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateDebugging(ctx context.Context, in *Debugging, db *gorm.DB) (*Debugging, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateDebugging")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &DebuggingORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type DebuggingORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DebuggingORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DebuggingORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchDebugging executes a basic gorm update call with patch behavior
func DefaultPatchDebugging(ctx context.Context, in *Debugging, updateMask *field_mask.FieldMask, db *gorm.DB) (*Debugging, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Debugging
	var err error
	if hook, ok := interface{}(&pbObj).(DebuggingWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadDebugging(ctx, &Debugging{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(DebuggingWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskDebugging(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(DebuggingWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateDebugging(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(DebuggingWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type DebuggingWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Debugging, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type DebuggingWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Debugging, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type DebuggingWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Debugging, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type DebuggingWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Debugging, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetDebugging executes a bulk gorm update call with patch behavior
func DefaultPatchSetDebugging(ctx context.Context, objects []*Debugging, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Debugging, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Debugging, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchDebugging(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskDebugging patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskDebugging(ctx context.Context, patchee *Debugging, patcher *Debugging, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Debugging, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Level" {
			patchee.Level = patcher.Level
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListDebugging executes a gorm list call
func DefaultListDebugging(ctx context.Context, db *gorm.DB) ([]*Debugging, error) {
	in := Debugging{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &DebuggingORM{}, &Debugging{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []DebuggingORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DebuggingORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Debugging{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type DebuggingORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DebuggingORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DebuggingORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]DebuggingORM) error
}

// DefaultCreateTask executes a basic gorm create call
func DefaultCreateTask(ctx context.Context, in *Task, db *gorm.DB) (*Task, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TaskORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadTask(ctx context.Context, in *Task, db *gorm.DB) (*Task, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &TaskORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := TaskORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(TaskORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type TaskORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteTask(ctx context.Context, in *Task, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&TaskORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type TaskORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteTaskSet(ctx context.Context, in []*Task, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&TaskORM{})).(TaskORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&TaskORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&TaskORM{})).(TaskORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type TaskORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Task, *gorm.DB) (*gorm.DB, error)
}
type TaskORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Task, *gorm.DB) error
}

// DefaultStrictUpdateTask clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTask(ctx context.Context, in *Task, db *gorm.DB) (*Task, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateTask")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &TaskORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(TaskORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type TaskORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchTask executes a basic gorm update call with patch behavior
func DefaultPatchTask(ctx context.Context, in *Task, updateMask *field_mask.FieldMask, db *gorm.DB) (*Task, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Task
	var err error
	if hook, ok := interface{}(&pbObj).(TaskWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadTask(ctx, &Task{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(TaskWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskTask(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(TaskWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateTask(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(TaskWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type TaskWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Task, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TaskWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Task, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TaskWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Task, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TaskWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Task, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetTask executes a bulk gorm update call with patch behavior
func DefaultPatchSetTask(ctx context.Context, objects []*Task, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Task, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Task, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchTask(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskTask patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTask(ctx context.Context, patchee *Task, patcher *Task, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Task, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedTime bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if !updatedTime && strings.HasPrefix(f, prefix+"Time.") {
			if patcher.Time == nil {
				patchee.Time = nil
				continue
			}
			if patchee.Time == nil {
				patchee.Time = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"Time."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.Time, patchee.Time, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"Time" {
			updatedTime = true
			patchee.Time = patcher.Time
			continue
		}
		if f == prefix+"Task" {
			patchee.Task = patcher.Task
			continue
		}
		if f == prefix+"ExtraInfo" {
			patchee.ExtraInfo = patcher.ExtraInfo
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTask executes a gorm list call
func DefaultListTask(ctx context.Context, db *gorm.DB) ([]*Task, error) {
	in := Task{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &TaskORM{}, &Task{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []TaskORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Task{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TaskORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]TaskORM) error
}

// DefaultCreateTaskProgress executes a basic gorm create call
func DefaultCreateTaskProgress(ctx context.Context, in *TaskProgress, db *gorm.DB) (*TaskProgress, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TaskProgressORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadTaskProgress(ctx context.Context, in *TaskProgress, db *gorm.DB) (*TaskProgress, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &TaskProgressORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := TaskProgressORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(TaskProgressORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type TaskProgressORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteTaskProgress(ctx context.Context, in *TaskProgress, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&TaskProgressORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type TaskProgressORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteTaskProgressSet(ctx context.Context, in []*TaskProgress, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&TaskProgressORM{})).(TaskProgressORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&TaskProgressORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&TaskProgressORM{})).(TaskProgressORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type TaskProgressORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*TaskProgress, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*TaskProgress, *gorm.DB) error
}

// DefaultStrictUpdateTaskProgress clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTaskProgress(ctx context.Context, in *TaskProgress, db *gorm.DB) (*TaskProgress, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateTaskProgress")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &TaskProgressORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type TaskProgressORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchTaskProgress executes a basic gorm update call with patch behavior
func DefaultPatchTaskProgress(ctx context.Context, in *TaskProgress, updateMask *field_mask.FieldMask, db *gorm.DB) (*TaskProgress, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj TaskProgress
	var err error
	if hook, ok := interface{}(&pbObj).(TaskProgressWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadTaskProgress(ctx, &TaskProgress{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(TaskProgressWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskTaskProgress(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(TaskProgressWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateTaskProgress(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(TaskProgressWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type TaskProgressWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *TaskProgress, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *TaskProgress, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *TaskProgress, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *TaskProgress, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetTaskProgress executes a bulk gorm update call with patch behavior
func DefaultPatchSetTaskProgress(ctx context.Context, objects []*TaskProgress, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*TaskProgress, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*TaskProgress, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchTaskProgress(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskTaskProgress patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTaskProgress(ctx context.Context, patchee *TaskProgress, patcher *TaskProgress, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*TaskProgress, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedEtc bool
	var updatedTime bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Percent" {
			patchee.Percent = patcher.Percent
			continue
		}
		if f == prefix+"Remaining" {
			patchee.Remaining = patcher.Remaining
			continue
		}
		if f == prefix+"Task" {
			patchee.Task = patcher.Task
			continue
		}
		if !updatedEtc && strings.HasPrefix(f, prefix+"Etc.") {
			if patcher.Etc == nil {
				patchee.Etc = nil
				continue
			}
			if patchee.Etc == nil {
				patchee.Etc = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"Etc."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.Etc, patchee.Etc, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"Etc" {
			updatedEtc = true
			patchee.Etc = patcher.Etc
			continue
		}
		if !updatedTime && strings.HasPrefix(f, prefix+"Time.") {
			if patcher.Time == nil {
				patchee.Time = nil
				continue
			}
			if patchee.Time == nil {
				patchee.Time = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"Time."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.Time, patchee.Time, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"Time" {
			updatedTime = true
			patchee.Time = patcher.Time
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTaskProgress executes a gorm list call
func DefaultListTaskProgress(ctx context.Context, db *gorm.DB) ([]*TaskProgress, error) {
	in := TaskProgress{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &TaskProgressORM{}, &TaskProgress{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []TaskProgressORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskProgressORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*TaskProgress{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TaskProgressORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TaskProgressORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]TaskProgressORM) error
}

// DefaultCreateTarget executes a basic gorm create call
func DefaultCreateTarget(ctx context.Context, in *Target, db *gorm.DB) (*Target, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TargetORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadTarget(ctx context.Context, in *Target, db *gorm.DB) (*Target, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &TargetORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := TargetORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(TargetORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type TargetORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteTarget(ctx context.Context, in *Target, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&TargetORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type TargetORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteTargetSet(ctx context.Context, in []*Target, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&TargetORM{})).(TargetORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&TargetORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&TargetORM{})).(TargetORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type TargetORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Target, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Target, *gorm.DB) error
}

// DefaultStrictUpdateTarget clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTarget(ctx context.Context, in *Target, db *gorm.DB) (*Target, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateTarget")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &TargetORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type TargetORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchTarget executes a basic gorm update call with patch behavior
func DefaultPatchTarget(ctx context.Context, in *Target, updateMask *field_mask.FieldMask, db *gorm.DB) (*Target, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Target
	var err error
	if hook, ok := interface{}(&pbObj).(TargetWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadTarget(ctx, &Target{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(TargetWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskTarget(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(TargetWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateTarget(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(TargetWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type TargetWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Target, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TargetWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Target, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TargetWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Target, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TargetWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Target, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetTarget executes a bulk gorm update call with patch behavior
func DefaultPatchSetTarget(ctx context.Context, objects []*Target, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Target, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Target, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchTarget(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskTarget patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTarget(ctx context.Context, patchee *Target, patcher *Target, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Target, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Specification" {
			patchee.Specification = patcher.Specification
			continue
		}
		if f == prefix+"Status" {
			patchee.Status = patcher.Status
			continue
		}
		if f == prefix+"Reason" {
			patchee.Reason = patcher.Reason
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTarget executes a gorm list call
func DefaultListTarget(ctx context.Context, db *gorm.DB) ([]*Target, error) {
	in := Target{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &TargetORM{}, &Target{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []TargetORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TargetORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Target{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TargetORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TargetORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]TargetORM) error
}

// DefaultCreateStats executes a basic gorm create call
func DefaultCreateStats(ctx context.Context, in *Stats, db *gorm.DB) (*Stats, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type StatsORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StatsORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadStats(ctx context.Context, in *Stats, db *gorm.DB) (*Stats, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &StatsORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := StatsORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(StatsORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type StatsORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StatsORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StatsORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteStats(ctx context.Context, in *Stats, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&StatsORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type StatsORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StatsORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteStatsSet(ctx context.Context, in []*Stats, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&StatsORM{})).(StatsORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&StatsORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&StatsORM{})).(StatsORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type StatsORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Stats, *gorm.DB) (*gorm.DB, error)
}
type StatsORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Stats, *gorm.DB) error
}

// DefaultStrictUpdateStats clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateStats(ctx context.Context, in *Stats, db *gorm.DB) (*Stats, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateStats")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &StatsORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(StatsORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterFinished := FinishedORM{}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	filterFinished.StatsId = new(go_uuid.UUID)
	*filterFinished.StatsId = ormObj.Id
	if err = db.Where(filterFinished).Delete(FinishedORM{}).Error; err != nil {
		return nil, err
	}
	filterHosts := HostStatsORM{}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	filterHosts.StatsId = new(go_uuid.UUID)
	*filterHosts.StatsId = ormObj.Id
	if err = db.Where(filterHosts).Delete(HostStatsORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type StatsORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StatsORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StatsORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchStats executes a basic gorm update call with patch behavior
func DefaultPatchStats(ctx context.Context, in *Stats, updateMask *field_mask.FieldMask, db *gorm.DB) (*Stats, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Stats
	var err error
	if hook, ok := interface{}(&pbObj).(StatsWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadStats(ctx, &Stats{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(StatsWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskStats(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(StatsWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateStats(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(StatsWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type StatsWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Stats, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type StatsWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Stats, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type StatsWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Stats, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type StatsWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Stats, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetStats executes a bulk gorm update call with patch behavior
func DefaultPatchSetStats(ctx context.Context, objects []*Stats, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Stats, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Stats, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchStats(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskStats patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskStats(ctx context.Context, patchee *Stats, patcher *Stats, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Stats, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedFinished bool
	var updatedHosts bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if !updatedFinished && strings.HasPrefix(f, prefix+"Finished.") {
			updatedFinished = true
			if patcher.Finished == nil {
				patchee.Finished = nil
				continue
			}
			if patchee.Finished == nil {
				patchee.Finished = &Finished{}
			}
			if o, err := DefaultApplyFieldMaskFinished(ctx, patchee.Finished, patcher.Finished, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Finished.", db); err != nil {
				return nil, err
			} else {
				patchee.Finished = o
			}
			continue
		}
		if f == prefix+"Finished" {
			updatedFinished = true
			patchee.Finished = patcher.Finished
			continue
		}
		if !updatedHosts && strings.HasPrefix(f, prefix+"Hosts.") {
			updatedHosts = true
			if patcher.Hosts == nil {
				patchee.Hosts = nil
				continue
			}
			if patchee.Hosts == nil {
				patchee.Hosts = &HostStats{}
			}
			if o, err := DefaultApplyFieldMaskHostStats(ctx, patchee.Hosts, patcher.Hosts, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Hosts.", db); err != nil {
				return nil, err
			} else {
				patchee.Hosts = o
			}
			continue
		}
		if f == prefix+"Hosts" {
			updatedHosts = true
			patchee.Hosts = patcher.Hosts
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListStats executes a gorm list call
func DefaultListStats(ctx context.Context, db *gorm.DB) ([]*Stats, error) {
	in := Stats{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &StatsORM{}, &Stats{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []StatsORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StatsORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Stats{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type StatsORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StatsORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StatsORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]StatsORM) error
}

// DefaultCreateFinished executes a basic gorm create call
func DefaultCreateFinished(ctx context.Context, in *Finished, db *gorm.DB) (*Finished, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type FinishedORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FinishedORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadFinished(ctx context.Context, in *Finished, db *gorm.DB) (*Finished, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &FinishedORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := FinishedORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(FinishedORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type FinishedORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FinishedORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FinishedORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteFinished(ctx context.Context, in *Finished, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&FinishedORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type FinishedORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FinishedORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteFinishedSet(ctx context.Context, in []*Finished, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&FinishedORM{})).(FinishedORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&FinishedORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&FinishedORM{})).(FinishedORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type FinishedORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Finished, *gorm.DB) (*gorm.DB, error)
}
type FinishedORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Finished, *gorm.DB) error
}

// DefaultStrictUpdateFinished clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateFinished(ctx context.Context, in *Finished, db *gorm.DB) (*Finished, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateFinished")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &FinishedORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(FinishedORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type FinishedORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FinishedORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FinishedORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchFinished executes a basic gorm update call with patch behavior
func DefaultPatchFinished(ctx context.Context, in *Finished, updateMask *field_mask.FieldMask, db *gorm.DB) (*Finished, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Finished
	var err error
	if hook, ok := interface{}(&pbObj).(FinishedWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadFinished(ctx, &Finished{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(FinishedWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskFinished(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(FinishedWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateFinished(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(FinishedWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type FinishedWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Finished, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type FinishedWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Finished, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type FinishedWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Finished, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type FinishedWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Finished, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetFinished executes a bulk gorm update call with patch behavior
func DefaultPatchSetFinished(ctx context.Context, objects []*Finished, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Finished, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Finished, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchFinished(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskFinished patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskFinished(ctx context.Context, patchee *Finished, patcher *Finished, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Finished, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedTime bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if !updatedTime && strings.HasPrefix(f, prefix+"Time.") {
			if patcher.Time == nil {
				patchee.Time = nil
				continue
			}
			if patchee.Time == nil {
				patchee.Time = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"Time."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.Time, patchee.Time, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"Time" {
			updatedTime = true
			patchee.Time = patcher.Time
			continue
		}
		if f == prefix+"TimeStr" {
			patchee.TimeStr = patcher.TimeStr
			continue
		}
		if f == prefix+"Elapsed" {
			patchee.Elapsed = patcher.Elapsed
			continue
		}
		if f == prefix+"Summary" {
			patchee.Summary = patcher.Summary
			continue
		}
		if f == prefix+"Exit" {
			patchee.Exit = patcher.Exit
			continue
		}
		if f == prefix+"ErrorMsg" {
			patchee.ErrorMsg = patcher.ErrorMsg
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListFinished executes a gorm list call
func DefaultListFinished(ctx context.Context, db *gorm.DB) ([]*Finished, error) {
	in := Finished{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &FinishedORM{}, &Finished{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []FinishedORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FinishedORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Finished{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type FinishedORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FinishedORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FinishedORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]FinishedORM) error
}

// DefaultCreateHostStats executes a basic gorm create call
func DefaultCreateHostStats(ctx context.Context, in *HostStats, db *gorm.DB) (*HostStats, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type HostStatsORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HostStatsORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadHostStats(ctx context.Context, in *HostStats, db *gorm.DB) (*HostStats, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &HostStatsORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := HostStatsORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(HostStatsORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type HostStatsORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HostStatsORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HostStatsORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteHostStats(ctx context.Context, in *HostStats, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&HostStatsORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type HostStatsORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HostStatsORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteHostStatsSet(ctx context.Context, in []*HostStats, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&HostStatsORM{})).(HostStatsORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&HostStatsORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&HostStatsORM{})).(HostStatsORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type HostStatsORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*HostStats, *gorm.DB) (*gorm.DB, error)
}
type HostStatsORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*HostStats, *gorm.DB) error
}

// DefaultStrictUpdateHostStats clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateHostStats(ctx context.Context, in *HostStats, db *gorm.DB) (*HostStats, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateHostStats")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &HostStatsORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type HostStatsORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HostStatsORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HostStatsORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchHostStats executes a basic gorm update call with patch behavior
func DefaultPatchHostStats(ctx context.Context, in *HostStats, updateMask *field_mask.FieldMask, db *gorm.DB) (*HostStats, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj HostStats
	var err error
	if hook, ok := interface{}(&pbObj).(HostStatsWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadHostStats(ctx, &HostStats{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(HostStatsWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskHostStats(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(HostStatsWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateHostStats(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(HostStatsWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type HostStatsWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *HostStats, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type HostStatsWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *HostStats, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type HostStatsWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *HostStats, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type HostStatsWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *HostStats, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetHostStats executes a bulk gorm update call with patch behavior
func DefaultPatchSetHostStats(ctx context.Context, objects []*HostStats, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*HostStats, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*HostStats, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchHostStats(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskHostStats patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskHostStats(ctx context.Context, patchee *HostStats, patcher *HostStats, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*HostStats, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Up" {
			patchee.Up = patcher.Up
			continue
		}
		if f == prefix+"Down" {
			patchee.Down = patcher.Down
			continue
		}
		if f == prefix+"Total" {
			patchee.Total = patcher.Total
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListHostStats executes a gorm list call
func DefaultListHostStats(ctx context.Context, db *gorm.DB) ([]*HostStats, error) {
	in := HostStats{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &HostStatsORM{}, &HostStats{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []HostStatsORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HostStatsORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*HostStats{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type HostStatsORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HostStatsORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HostStatsORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]HostStatsORM) error
}

// DefaultCreateNmapScript executes a basic gorm create call
func DefaultCreateNmapScript(ctx context.Context, in *NmapScript, db *gorm.DB) (*NmapScript, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type NmapScriptORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadNmapScript(ctx context.Context, in *NmapScript, db *gorm.DB) (*NmapScript, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &NmapScriptORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := NmapScriptORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(NmapScriptORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type NmapScriptORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteNmapScript(ctx context.Context, in *NmapScript, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&NmapScriptORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type NmapScriptORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteNmapScriptSet(ctx context.Context, in []*NmapScript, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&NmapScriptORM{})).(NmapScriptORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&NmapScriptORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&NmapScriptORM{})).(NmapScriptORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type NmapScriptORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*NmapScript, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*NmapScript, *gorm.DB) error
}

// DefaultStrictUpdateNmapScript clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateNmapScript(ctx context.Context, in *NmapScript, db *gorm.DB) (*NmapScript, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateNmapScript")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &NmapScriptORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterElements := ElementORM{}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	filterElements.NmapScriptId = new(go_uuid.UUID)
	*filterElements.NmapScriptId = ormObj.Id
	if err = db.Where(filterElements).Delete(ElementORM{}).Error; err != nil {
		return nil, err
	}
	filterTables := TableORM{}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	filterTables.NmapScriptId = new(go_uuid.UUID)
	*filterTables.NmapScriptId = ormObj.Id
	if err = db.Where(filterTables).Delete(TableORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type NmapScriptORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchNmapScript executes a basic gorm update call with patch behavior
func DefaultPatchNmapScript(ctx context.Context, in *NmapScript, updateMask *field_mask.FieldMask, db *gorm.DB) (*NmapScript, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj NmapScript
	var err error
	if hook, ok := interface{}(&pbObj).(NmapScriptWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadNmapScript(ctx, &NmapScript{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(NmapScriptWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskNmapScript(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(NmapScriptWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateNmapScript(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(NmapScriptWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type NmapScriptWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *NmapScript, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *NmapScript, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *NmapScript, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *NmapScript, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetNmapScript executes a bulk gorm update call with patch behavior
func DefaultPatchSetNmapScript(ctx context.Context, objects []*NmapScript, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*NmapScript, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*NmapScript, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchNmapScript(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskNmapScript patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskNmapScript(ctx context.Context, patchee *NmapScript, patcher *NmapScript, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*NmapScript, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"Output" {
			patchee.Output = patcher.Output
			continue
		}
		if f == prefix+"Elements" {
			patchee.Elements = patcher.Elements
			continue
		}
		if f == prefix+"Tables" {
			patchee.Tables = patcher.Tables
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListNmapScript executes a gorm list call
func DefaultListNmapScript(ctx context.Context, db *gorm.DB) ([]*NmapScript, error) {
	in := NmapScript{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &NmapScriptORM{}, &NmapScript{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []NmapScriptORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NmapScriptORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*NmapScript{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type NmapScriptORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type NmapScriptORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]NmapScriptORM) error
}

// DefaultCreateElement executes a basic gorm create call
func DefaultCreateElement(ctx context.Context, in *Element, db *gorm.DB) (*Element, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ElementORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadElement(ctx context.Context, in *Element, db *gorm.DB) (*Element, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &ElementORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ElementORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ElementORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ElementORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteElement(ctx context.Context, in *Element, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ElementORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ElementORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteElementSet(ctx context.Context, in []*Element, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ElementORM{})).(ElementORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ElementORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ElementORM{})).(ElementORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ElementORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Element, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Element, *gorm.DB) error
}

// DefaultStrictUpdateElement clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateElement(ctx context.Context, in *Element, db *gorm.DB) (*Element, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateElement")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ElementORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ElementORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchElement executes a basic gorm update call with patch behavior
func DefaultPatchElement(ctx context.Context, in *Element, updateMask *field_mask.FieldMask, db *gorm.DB) (*Element, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Element
	var err error
	if hook, ok := interface{}(&pbObj).(ElementWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadElement(ctx, &Element{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ElementWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskElement(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ElementWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateElement(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ElementWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ElementWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Element, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ElementWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Element, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ElementWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Element, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ElementWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Element, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetElement executes a bulk gorm update call with patch behavior
func DefaultPatchSetElement(ctx context.Context, objects []*Element, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Element, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Element, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchElement(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskElement patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskElement(ctx context.Context, patchee *Element, patcher *Element, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Element, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Key" {
			patchee.Key = patcher.Key
			continue
		}
		if f == prefix+"Value" {
			patchee.Value = patcher.Value
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListElement executes a gorm list call
func DefaultListElement(ctx context.Context, db *gorm.DB) ([]*Element, error) {
	in := Element{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &ElementORM{}, &Element{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ElementORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ElementORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Element{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ElementORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ElementORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]ElementORM) error
}

// DefaultCreateTable executes a basic gorm create call
func DefaultCreateTable(ctx context.Context, in *Table, db *gorm.DB) (*Table, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TableORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadTable(ctx context.Context, in *Table, db *gorm.DB) (*Table, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &TableORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := TableORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(TableORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type TableORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteTable(ctx context.Context, in *Table, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&TableORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type TableORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteTableSet(ctx context.Context, in []*Table, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&TableORM{})).(TableORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&TableORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&TableORM{})).(TableORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type TableORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Table, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Table, *gorm.DB) error
}

// DefaultStrictUpdateTable clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTable(ctx context.Context, in *Table, db *gorm.DB) (*Table, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateTable")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &TableORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterElements := ElementORM{}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	filterElements.TableId = new(go_uuid.UUID)
	*filterElements.TableId = ormObj.Id
	if err = db.Where(filterElements).Delete(ElementORM{}).Error; err != nil {
		return nil, err
	}
	filterTables := TableORM{}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	filterTables.TableId = new(go_uuid.UUID)
	*filterTables.TableId = ormObj.Id
	if err = db.Where(filterTables).Delete(TableORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type TableORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchTable executes a basic gorm update call with patch behavior
func DefaultPatchTable(ctx context.Context, in *Table, updateMask *field_mask.FieldMask, db *gorm.DB) (*Table, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Table
	var err error
	if hook, ok := interface{}(&pbObj).(TableWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadTable(ctx, &Table{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(TableWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskTable(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(TableWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateTable(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(TableWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type TableWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Table, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TableWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Table, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TableWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Table, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TableWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Table, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetTable executes a bulk gorm update call with patch behavior
func DefaultPatchSetTable(ctx context.Context, objects []*Table, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Table, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Table, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchTable(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskTable patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTable(ctx context.Context, patchee *Table, patcher *Table, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Table, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Key" {
			patchee.Key = patcher.Key
			continue
		}
		if f == prefix+"Tables" {
			patchee.Tables = patcher.Tables
			continue
		}
		if f == prefix+"Elements" {
			patchee.Elements = patcher.Elements
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTable executes a gorm list call
func DefaultListTable(ctx context.Context, db *gorm.DB) ([]*Table, error) {
	in := Table{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &TableORM{}, &Table{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []TableORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TableORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Table{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TableORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TableORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]TableORM) error
}

// DefaultCreateTimes executes a basic gorm create call
func DefaultCreateTimes(ctx context.Context, in *Times, db *gorm.DB) (*Times, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TimesORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TimesORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadTimes(ctx context.Context, in *Times, db *gorm.DB) (*Times, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &TimesORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := TimesORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(TimesORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type TimesORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TimesORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TimesORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteTimes(ctx context.Context, in *Times, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&TimesORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type TimesORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TimesORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteTimesSet(ctx context.Context, in []*Times, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&TimesORM{})).(TimesORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&TimesORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&TimesORM{})).(TimesORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type TimesORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Times, *gorm.DB) (*gorm.DB, error)
}
type TimesORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Times, *gorm.DB) error
}

// DefaultStrictUpdateTimes clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTimes(ctx context.Context, in *Times, db *gorm.DB) (*Times, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateTimes")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &TimesORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(TimesORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type TimesORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TimesORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TimesORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchTimes executes a basic gorm update call with patch behavior
func DefaultPatchTimes(ctx context.Context, in *Times, updateMask *field_mask.FieldMask, db *gorm.DB) (*Times, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Times
	var err error
	if hook, ok := interface{}(&pbObj).(TimesWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadTimes(ctx, &Times{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(TimesWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskTimes(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(TimesWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateTimes(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(TimesWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type TimesWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Times, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TimesWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Times, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TimesWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Times, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TimesWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Times, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetTimes executes a bulk gorm update call with patch behavior
func DefaultPatchSetTimes(ctx context.Context, objects []*Times, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Times, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Times, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchTimes(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskTimes patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTimes(ctx context.Context, patchee *Times, patcher *Times, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Times, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"SRTT" {
			patchee.SRTT = patcher.SRTT
			continue
		}
		if f == prefix+"RTT" {
			patchee.RTT = patcher.RTT
			continue
		}
		if f == prefix+"To" {
			patchee.To = patcher.To
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTimes executes a gorm list call
func DefaultListTimes(ctx context.Context, db *gorm.DB) ([]*Times, error) {
	in := Times{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &TimesORM{}, &Times{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []TimesORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TimesORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Times{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TimesORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TimesORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TimesORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]TimesORM) error
}

// DefaultCreateSmurf executes a basic gorm create call
func DefaultCreateSmurf(ctx context.Context, in *Smurf, db *gorm.DB) (*Smurf, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type SmurfORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadSmurf(ctx context.Context, in *Smurf, db *gorm.DB) (*Smurf, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &SmurfORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := SmurfORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(SmurfORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type SmurfORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteSmurf(ctx context.Context, in *Smurf, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&SmurfORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type SmurfORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteSmurfSet(ctx context.Context, in []*Smurf, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&SmurfORM{})).(SmurfORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&SmurfORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&SmurfORM{})).(SmurfORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type SmurfORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Smurf, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Smurf, *gorm.DB) error
}

// DefaultStrictUpdateSmurf clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateSmurf(ctx context.Context, in *Smurf, db *gorm.DB) (*Smurf, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateSmurf")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &SmurfORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type SmurfORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchSmurf executes a basic gorm update call with patch behavior
func DefaultPatchSmurf(ctx context.Context, in *Smurf, updateMask *field_mask.FieldMask, db *gorm.DB) (*Smurf, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Smurf
	var err error
	if hook, ok := interface{}(&pbObj).(SmurfWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadSmurf(ctx, &Smurf{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(SmurfWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskSmurf(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(SmurfWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateSmurf(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(SmurfWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type SmurfWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Smurf, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SmurfWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Smurf, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SmurfWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Smurf, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SmurfWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Smurf, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetSmurf executes a bulk gorm update call with patch behavior
func DefaultPatchSetSmurf(ctx context.Context, objects []*Smurf, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Smurf, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Smurf, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchSmurf(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskSmurf patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskSmurf(ctx context.Context, patchee *Smurf, patcher *Smurf, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Smurf, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Responses" {
			patchee.Responses = patcher.Responses
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListSmurf executes a gorm list call
func DefaultListSmurf(ctx context.Context, db *gorm.DB) ([]*Smurf, error) {
	in := Smurf{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &SmurfORM{}, &Smurf{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []SmurfORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SmurfORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Smurf{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type SmurfORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SmurfORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]SmurfORM) error
}
