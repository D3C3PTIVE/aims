// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: rpc/credentials/credentials.proto

package credentials

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Credentials_CreateCredential_FullMethodName  = "/credentials.Credentials/CreateCredential"
	Credentials_GetCredential_FullMethodName     = "/credentials.Credentials/GetCredential"
	Credentials_GetCredentialMany_FullMethodName = "/credentials.Credentials/GetCredentialMany"
	Credentials_UpsertCredential_FullMethodName  = "/credentials.Credentials/UpsertCredential"
	Credentials_DeleteCredential_FullMethodName  = "/credentials.Credentials/DeleteCredential"
)

// CredentialsClient is the client API for Credentials service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CredentialsClient interface {
	CreateCredential(ctx context.Context, in *CreateCredentialRequest, opts ...grpc.CallOption) (*CreateCredentialResponse, error)
	GetCredential(ctx context.Context, in *ReadCredentialRequest, opts ...grpc.CallOption) (*ReadCredentialResponse, error)
	GetCredentialMany(ctx context.Context, in *ReadCredentialRequest, opts ...grpc.CallOption) (*ReadCredentialResponse, error)
	UpsertCredential(ctx context.Context, in *UpsertCredentialRequest, opts ...grpc.CallOption) (*UpsertCredentialResponse, error)
	DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*DeleteCredentialResponse, error)
}

type credentialsClient struct {
	cc grpc.ClientConnInterface
}

func NewCredentialsClient(cc grpc.ClientConnInterface) CredentialsClient {
	return &credentialsClient{cc}
}

func (c *credentialsClient) CreateCredential(ctx context.Context, in *CreateCredentialRequest, opts ...grpc.CallOption) (*CreateCredentialResponse, error) {
	out := new(CreateCredentialResponse)
	err := c.cc.Invoke(ctx, Credentials_CreateCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialsClient) GetCredential(ctx context.Context, in *ReadCredentialRequest, opts ...grpc.CallOption) (*ReadCredentialResponse, error) {
	out := new(ReadCredentialResponse)
	err := c.cc.Invoke(ctx, Credentials_GetCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialsClient) GetCredentialMany(ctx context.Context, in *ReadCredentialRequest, opts ...grpc.CallOption) (*ReadCredentialResponse, error) {
	out := new(ReadCredentialResponse)
	err := c.cc.Invoke(ctx, Credentials_GetCredentialMany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialsClient) UpsertCredential(ctx context.Context, in *UpsertCredentialRequest, opts ...grpc.CallOption) (*UpsertCredentialResponse, error) {
	out := new(UpsertCredentialResponse)
	err := c.cc.Invoke(ctx, Credentials_UpsertCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialsClient) DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*DeleteCredentialResponse, error) {
	out := new(DeleteCredentialResponse)
	err := c.cc.Invoke(ctx, Credentials_DeleteCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CredentialsServer is the server API for Credentials service.
// All implementations must embed UnimplementedCredentialsServer
// for forward compatibility
type CredentialsServer interface {
	CreateCredential(context.Context, *CreateCredentialRequest) (*CreateCredentialResponse, error)
	GetCredential(context.Context, *ReadCredentialRequest) (*ReadCredentialResponse, error)
	GetCredentialMany(context.Context, *ReadCredentialRequest) (*ReadCredentialResponse, error)
	UpsertCredential(context.Context, *UpsertCredentialRequest) (*UpsertCredentialResponse, error)
	DeleteCredential(context.Context, *DeleteCredentialRequest) (*DeleteCredentialResponse, error)
	mustEmbedUnimplementedCredentialsServer()
}

// UnimplementedCredentialsServer must be embedded to have forward compatible implementations.
type UnimplementedCredentialsServer struct {
}

func (UnimplementedCredentialsServer) CreateCredential(context.Context, *CreateCredentialRequest) (*CreateCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredential not implemented")
}
func (UnimplementedCredentialsServer) GetCredential(context.Context, *ReadCredentialRequest) (*ReadCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (UnimplementedCredentialsServer) GetCredentialMany(context.Context, *ReadCredentialRequest) (*ReadCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialMany not implemented")
}
func (UnimplementedCredentialsServer) UpsertCredential(context.Context, *UpsertCredentialRequest) (*UpsertCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCredential not implemented")
}
func (UnimplementedCredentialsServer) DeleteCredential(context.Context, *DeleteCredentialRequest) (*DeleteCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (UnimplementedCredentialsServer) mustEmbedUnimplementedCredentialsServer() {}

// UnsafeCredentialsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CredentialsServer will
// result in compilation errors.
type UnsafeCredentialsServer interface {
	mustEmbedUnimplementedCredentialsServer()
}

func RegisterCredentialsServer(s grpc.ServiceRegistrar, srv CredentialsServer) {
	s.RegisterService(&Credentials_ServiceDesc, srv)
}

func _Credentials_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsServer).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Credentials_CreateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsServer).CreateCredential(ctx, req.(*CreateCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Credentials_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Credentials_GetCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsServer).GetCredential(ctx, req.(*ReadCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Credentials_GetCredentialMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsServer).GetCredentialMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Credentials_GetCredentialMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsServer).GetCredentialMany(ctx, req.(*ReadCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Credentials_UpsertCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsServer).UpsertCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Credentials_UpsertCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsServer).UpsertCredential(ctx, req.(*UpsertCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Credentials_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Credentials_DeleteCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsServer).DeleteCredential(ctx, req.(*DeleteCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Credentials_ServiceDesc is the grpc.ServiceDesc for Credentials service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Credentials_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "credentials.Credentials",
	HandlerType: (*CredentialsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCredential",
			Handler:    _Credentials_CreateCredential_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _Credentials_GetCredential_Handler,
		},
		{
			MethodName: "GetCredentialMany",
			Handler:    _Credentials_GetCredentialMany_Handler,
		},
		{
			MethodName: "UpsertCredential",
			Handler:    _Credentials_UpsertCredential_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _Credentials_DeleteCredential_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/credentials/credentials.proto",
}
