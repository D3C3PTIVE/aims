// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: rpc/c2/channels.proto

package c2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Channels_Create_FullMethodName = "/c2.Channels/Create"
	Channels_Read_FullMethodName   = "/c2.Channels/Read"
	Channels_Upsert_FullMethodName = "/c2.Channels/Upsert"
	Channels_Delete_FullMethodName = "/c2.Channels/Delete"
)

// ChannelsClient is the client API for Channels service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelsClient interface {
	// General
	Create(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error)
	Read(ctx context.Context, in *ReadChannelRequest, opts ...grpc.CallOption) (*ReadChannelResponse, error)
	Upsert(ctx context.Context, in *UpsertChannelRequest, opts ...grpc.CallOption) (*UpsertChannelResponse, error)
	Delete(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*DeleteChannelResponse, error)
}

type channelsClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelsClient(cc grpc.ClientConnInterface) ChannelsClient {
	return &channelsClient{cc}
}

func (c *channelsClient) Create(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error) {
	out := new(CreateChannelResponse)
	err := c.cc.Invoke(ctx, Channels_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) Read(ctx context.Context, in *ReadChannelRequest, opts ...grpc.CallOption) (*ReadChannelResponse, error) {
	out := new(ReadChannelResponse)
	err := c.cc.Invoke(ctx, Channels_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) Upsert(ctx context.Context, in *UpsertChannelRequest, opts ...grpc.CallOption) (*UpsertChannelResponse, error) {
	out := new(UpsertChannelResponse)
	err := c.cc.Invoke(ctx, Channels_Upsert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) Delete(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*DeleteChannelResponse, error) {
	out := new(DeleteChannelResponse)
	err := c.cc.Invoke(ctx, Channels_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelsServer is the server API for Channels service.
// All implementations must embed UnimplementedChannelsServer
// for forward compatibility
type ChannelsServer interface {
	// General
	Create(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error)
	Read(context.Context, *ReadChannelRequest) (*ReadChannelResponse, error)
	Upsert(context.Context, *UpsertChannelRequest) (*UpsertChannelResponse, error)
	Delete(context.Context, *DeleteChannelRequest) (*DeleteChannelResponse, error)
	mustEmbedUnimplementedChannelsServer()
}

// UnimplementedChannelsServer must be embedded to have forward compatible implementations.
type UnimplementedChannelsServer struct {
}

func (UnimplementedChannelsServer) Create(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedChannelsServer) Read(context.Context, *ReadChannelRequest) (*ReadChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedChannelsServer) Upsert(context.Context, *UpsertChannelRequest) (*UpsertChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedChannelsServer) Delete(context.Context, *DeleteChannelRequest) (*DeleteChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedChannelsServer) mustEmbedUnimplementedChannelsServer() {}

// UnsafeChannelsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelsServer will
// result in compilation errors.
type UnsafeChannelsServer interface {
	mustEmbedUnimplementedChannelsServer()
}

func RegisterChannelsServer(s grpc.ServiceRegistrar, srv ChannelsServer) {
	s.RegisterService(&Channels_ServiceDesc, srv)
}

func _Channels_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Channels_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).Create(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channels_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Channels_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).Read(ctx, req.(*ReadChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channels_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Channels_Upsert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).Upsert(ctx, req.(*UpsertChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channels_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Channels_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).Delete(ctx, req.(*DeleteChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Channels_ServiceDesc is the grpc.ServiceDesc for Channels service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Channels_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c2.Channels",
	HandlerType: (*ChannelsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Channels_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Channels_Read_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _Channels_Upsert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Channels_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/c2/channels.proto",
}
