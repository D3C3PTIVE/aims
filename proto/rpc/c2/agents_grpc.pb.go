// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: rpc/c2/agents.proto

package c2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Agents_Create_FullMethodName = "/c2.Agents/Create"
	Agents_Read_FullMethodName   = "/c2.Agents/Read"
	Agents_Upsert_FullMethodName = "/c2.Agents/Upsert"
	Agents_Delete_FullMethodName = "/c2.Agents/Delete"
)

// AgentsClient is the client API for Agents service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentsClient interface {
	// General
	Create(ctx context.Context, in *CreateAgentRequest, opts ...grpc.CallOption) (*CreateAgentResponse, error)
	Read(ctx context.Context, in *ReadAgentRequest, opts ...grpc.CallOption) (*ReadAgentResponse, error)
	Upsert(ctx context.Context, in *UpsertAgentRequest, opts ...grpc.CallOption) (*UpsertAgentResponse, error)
	Delete(ctx context.Context, in *DeleteAgentRequest, opts ...grpc.CallOption) (*DeleteAgentResponse, error)
}

type agentsClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentsClient(cc grpc.ClientConnInterface) AgentsClient {
	return &agentsClient{cc}
}

func (c *agentsClient) Create(ctx context.Context, in *CreateAgentRequest, opts ...grpc.CallOption) (*CreateAgentResponse, error) {
	out := new(CreateAgentResponse)
	err := c.cc.Invoke(ctx, Agents_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentsClient) Read(ctx context.Context, in *ReadAgentRequest, opts ...grpc.CallOption) (*ReadAgentResponse, error) {
	out := new(ReadAgentResponse)
	err := c.cc.Invoke(ctx, Agents_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentsClient) Upsert(ctx context.Context, in *UpsertAgentRequest, opts ...grpc.CallOption) (*UpsertAgentResponse, error) {
	out := new(UpsertAgentResponse)
	err := c.cc.Invoke(ctx, Agents_Upsert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentsClient) Delete(ctx context.Context, in *DeleteAgentRequest, opts ...grpc.CallOption) (*DeleteAgentResponse, error) {
	out := new(DeleteAgentResponse)
	err := c.cc.Invoke(ctx, Agents_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentsServer is the server API for Agents service.
// All implementations must embed UnimplementedAgentsServer
// for forward compatibility
type AgentsServer interface {
	// General
	Create(context.Context, *CreateAgentRequest) (*CreateAgentResponse, error)
	Read(context.Context, *ReadAgentRequest) (*ReadAgentResponse, error)
	Upsert(context.Context, *UpsertAgentRequest) (*UpsertAgentResponse, error)
	Delete(context.Context, *DeleteAgentRequest) (*DeleteAgentResponse, error)
	mustEmbedUnimplementedAgentsServer()
}

// UnimplementedAgentsServer must be embedded to have forward compatible implementations.
type UnimplementedAgentsServer struct {
}

func (UnimplementedAgentsServer) Create(context.Context, *CreateAgentRequest) (*CreateAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAgentsServer) Read(context.Context, *ReadAgentRequest) (*ReadAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedAgentsServer) Upsert(context.Context, *UpsertAgentRequest) (*UpsertAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedAgentsServer) Delete(context.Context, *DeleteAgentRequest) (*DeleteAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAgentsServer) mustEmbedUnimplementedAgentsServer() {}

// UnsafeAgentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentsServer will
// result in compilation errors.
type UnsafeAgentsServer interface {
	mustEmbedUnimplementedAgentsServer()
}

func RegisterAgentsServer(s grpc.ServiceRegistrar, srv AgentsServer) {
	s.RegisterService(&Agents_ServiceDesc, srv)
}

func _Agents_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agents_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentsServer).Create(ctx, req.(*CreateAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agents_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentsServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agents_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentsServer).Read(ctx, req.(*ReadAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agents_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentsServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agents_Upsert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentsServer).Upsert(ctx, req.(*UpsertAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agents_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agents_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentsServer).Delete(ctx, req.(*DeleteAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Agents_ServiceDesc is the grpc.ServiceDesc for Agents service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agents_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c2.Agents",
	HandlerType: (*AgentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Agents_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Agents_Read_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _Agents_Upsert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Agents_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/c2/agents.proto",
}
